
AVRASM ver. 2.1.42  Source/kk2++.asm Sun Mar 13 14:08:24 2016

Source/kk2++.asm(8): Including file 'Source/m644Pdef.inc'
Source/kk2++.asm(12): Including file 'Source/macros.inc'
Source/kk2++.asm(13): Including file 'Source/miscmacros.inc'
Source/kk2++.asm(14): Including file 'Source/variables.asm'
Source/kk2++.asm(15): Including file 'Source/hardware.asm'
Source/kk2++.asm(16): Including file 'Source/168mathlib_macros.inc'
Source/kk2++.asm(17): Including file 'Source/832mathlib_macros.inc'
Source/kk2++.asm(18): Including file 'Source/constants.asm'
Source/kk2++.asm(19): Including file 'Source/bindwrappers.asm'
Source/kk2++.asm(76): Including file 'Source/batteryvoltage.asm'
Source/kk2++.asm(78): Including file 'Source/serial_readrx.asm'
Source/kk2++.asm(79): Including file 'Source/serial_rxtest.asm'
Source/kk2++.asm(80): Including file 'Source/serial_checkrx.asm'
Source/kk2++.asm(81): Including file 'Source/serial_debug.asm'
Source/kk2++.asm(83): Including file 'Source/cppm_main.asm'
Source/kk2++.asm(84): Including file 'Source/cppm_hwsetup.asm'
Source/kk2++.asm(85): Including file 'Source/cppm_mainmenu.asm'
Source/kk2++.asm(86): Including file 'Source/cppm_readrx.asm'
Source/kk2++.asm(87): Including file 'Source/cppm_checkrx.asm'
Source/kk2++.asm(89): Including file 'Source/sbus_main.asm'
Source/kk2++.asm(90): Including file 'Source/sbus_hwsetup.asm'
Source/kk2++.asm(91): Including file 'Source/sbus_mainmenu.asm'
Source/kk2++.asm(92): Including file 'Source/sbus_status.asm'
Source/kk2++.asm(93): Including file 'Source/sbus_readrx.asm'
Source/kk2++.asm(95): Including file 'Source/sat_main.asm'
Source/kk2++.asm(96): Including file 'Source/sat_hwsetup.asm'
Source/kk2++.asm(97): Including file 'Source/sat_mainmenu.asm'
Source/kk2++.asm(98): Including file 'Source/sat_misc.asm'
Source/kk2++.asm(99): Including file 'Source/sat_readrx.asm'
Source/kk2++.asm(101): Including file 'Source/gimbal.asm'
Source/kk2++.asm(107): Including file 'Source/motorcheck.asm'
Source/kk2++.asm(108): Including file 'Source/errorlog.asm'
Source/kk2++.asm(109): Including file 'Source/main.asm'
Source/kk2++.asm(114): Including file 'Source/userprofile.asm'
Source/kk2++.asm(115): Including file 'Source/trigonometry.asm'
Source/kk2++.asm(116): Including file 'Source/setuphw.asm'
Source/kk2++.asm(117): Including file 'Source/beeper.asm'
Source/kk2++.asm(118): Including file 'Source/menu.asm'
Source/kk2++.asm(119): Including file 'Source/lva.asm'
Source/kk2++.asm(120): Including file 'Source/logic.asm'
Source/kk2++.asm(121): Including file 'Source/auxsettings.asm'
Source/kk2++.asm(122): Including file 'Source/loader.asm'
Source/kk2++.asm(123): Including file 'Source/throttlecal.asm'
Source/kk2++.asm(124): Including file 'Source/eeinit.asm'
Source/kk2++.asm(125): Including file 'Source/sensorcal.asm'
Source/kk2++.asm(126): Including file 'Source/flightdisplay.asm'
Source/kk2++.asm(127): Including file 'Source/arm.asm'
Source/kk2++.asm(128): Including file 'Source/flightinit.asm'
Source/kk2++.asm(129): Including file 'Source/pieditor.asm'
Source/kk2++.asm(130): Including file 'Source/numedit.asm'
Source/kk2++.asm(131): Including file 'Source/mixedit.asm'
Source/kk2++.asm(132): Including file 'Source/mixer2.asm'
Source/kk2++.asm(133): Including file 'Source/imu.asm'
Source/kk2++.asm(134): Including file 'Source/pwmgen.asm'
Source/kk2++.asm(135): Including file 'Source/rxtest.asm'
Source/kk2++.asm(136): Including file 'Source/readrx.asm'
Source/kk2++.asm(137): Including file 'Source/mainmenu.asm'
Source/kk2++.asm(138): Including file 'Source/sensortest.asm'
Source/kk2++.asm(139): Including file 'Source/sensorreading.asm'
Source/kk2++.asm(140): Including file 'Source/ST7565.asm'
Source/kk2++.asm(141): Including file 'Source/miscsubs.asm'
Source/kk2++.asm(142): Including file 'Source/168mathlib_subs.asm'
Source/kk2++.asm(143): Including file 'Source/832mathlib_subs.asm'
Source/kk2++.asm(145): Including file 'Source/font6x8.asm'
Source/kk2++.asm(149): Including file 'Source/font12x16.asm'
Source/kk2++.asm(151): Including file 'Source/symbols16x16.asm'
Source/kk2++.asm(153): Including file 'Source/font4x6.asm'
Source/kk2++.asm(156): Including file 'Source/callwrappers.asm'
Source/callwrappers.asm(3): Including file 'Source/bindwrappers.asm'
                 
                 
                 ;Original code by Rolf R Bakke 2011, 2012, 2013
                 
                 
                 ;Original code by Rolf R Bakke 2011, 2012, 2013
                 
                 ;best viewed with a TAB-setting of 8 and monospace font.
                 
                 
                 
                 .include "m644Pdef.inc"
                 
                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega644P.xml **********
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m644Pdef.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega644P
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega644P
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M644PDEF_INC_
                 #define _M644PDEF_INC_
                 
                 
                 #pragma partinc 0
                 
                 ; ***** SPECIFY DEVICE ***************************************************
                 .device ATmega644P
                 #pragma AVRPART ADMIN PART_NAME ATmega644P
                 .equ	SIGNATURE_000	= 0x1e
                 .equ	SIGNATURE_001	= 0x96
                 .equ	SIGNATURE_002	= 0x0a
                 
                 #pragma AVRPART CORE CORE_VERSION V2E
                 
                 
                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                 ; NOTE:
                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                 ; and cannot be used with IN/OUT instructions
                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                 .equ	PCMSK3	= 0x73	; MEMORY MAPPED
                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                 .equ	SREG	= 0x3f
                 .equ	SPL	= 0x3d
                 .equ	SPH	= 0x3e
                 .equ	SPMCSR	= 0x37
                 .equ	MCUCR	= 0x35
                 .equ	MCUSR	= 0x34
                 .equ	SMCR	= 0x33
                 .equ	OCDR	= 0x31
                 .equ	ACSR	= 0x30
                 .equ	SPDR	= 0x2e
                 .equ	SPSR	= 0x2d
                 .equ	SPCR	= 0x2c
                 .equ	GPIOR2	= 0x2b
                 .equ	GPIOR1	= 0x2a
                 .equ	OCR0B	= 0x28
                 .equ	OCR0A	= 0x27
                 .equ	TCNT0	= 0x26
                 .equ	TCCR0B	= 0x25
                 .equ	TCCR0A	= 0x24
                 .equ	GTCCR	= 0x23
                 .equ	EEARH	= 0x22
                 .equ	EEARL	= 0x21
                 .equ	EEDR	= 0x20
                 .equ	EECR	= 0x1f
                 .equ	GPIOR0	= 0x1e
                 .equ	EIMSK	= 0x1d
                 .equ	EIFR	= 0x1c
                 .equ	PCIFR	= 0x1b
                 .equ	TIFR2	= 0x17
                 .equ	TIFR1	= 0x16
                 .equ	TIFR0	= 0x15
                 .equ	PORTD	= 0x0b
                 .equ	DDRD	= 0x0a
                 .equ	PIND	= 0x09
                 .equ	PORTC	= 0x08
                 .equ	DDRC	= 0x07
                 .equ	PINC	= 0x06
                 .equ	PORTB	= 0x05
                 .equ	DDRB	= 0x04
                 .equ	PINB	= 0x03
                 .equ	PORTA	= 0x02
                 .equ	DDRA	= 0x01
                 .equ	PINA	= 0x00
                 
                 
                 ; ***** BIT DEFINITIONS **************************************************
                 
                 ; ***** ANALOG_COMPARATOR ************
                 ; ADCSRB - ADC Control and Status Register B
                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                 
                 ; ACSR - Analog Comparator Control And Status Register
                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                 .equ	ACO	= 5	; Analog Compare Output
                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                 .equ	ACD	= 7	; Analog Comparator Disable
                 
                 ; DIDR1 - Digital Input Disable Register 1
                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                 
                 
                 ; ***** USART0 ***********************
                 ; UDR0 - USART I/O Data Register
                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSR0A - USART Control and Status Register A
                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                 .equ	U2X0	= 1	; Double the USART transmission speed
                 .equ	UPE0	= 2	; Parity Error
                 .equ	DOR0	= 3	; Data overRun
                 .equ	FE0	= 4	; Framing Error
                 .equ	UDRE0	= 5	; USART Data Register Empty
                 .equ	TXC0	= 6	; USART Transmitt Complete
                 .equ	RXC0	= 7	; USART Receive Complete
                 
                 ; UCSR0B - USART Control and Status Register B
                 .equ	TXB80	= 0	; Transmit Data Bit 8
                 .equ	RXB80	= 1	; Receive Data Bit 8
                 .equ	UCSZ02	= 2	; Character Size
                 .equ	TXEN0	= 3	; Transmitter Enable
                 .equ	RXEN0	= 4	; Receiver Enable
                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSR0C - USART Control and Status Register C
                 .equ	UCPOL0	= 0	; Clock Polarity
                 .equ	UCSZ00	= 1	; Character Size
                 .equ	UCPHA0	= UCSZ00	; For compatibility
                 .equ	UCSZ01	= 2	; Character Size
                 .equ	UDORD0	= UCSZ01	; For compatibility
                 .equ	USBS0	= 3	; Stop Bit Select
                 .equ	UPM00	= 4	; Parity Mode Bit 0
                 .equ	UPM01	= 5	; Parity Mode Bit 1
                 .equ	UMSEL00	= 6	; USART Mode Select
                 .equ	UMSEL0	= UMSEL00	; For compatibility
                 .equ	UMSEL01	= 7	; USART Mode Select
                 .equ	UMSEL1	= UMSEL01	; For compatibility
                 
                 ; UBRR0H - USART Baud Rate Register High Byte
                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                 
                 ; UBRR0L - USART Baud Rate Register Low Byte
                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                 
                 
                 ; ***** PORTA ************************
                 ; PORTA - Port A Data Register
                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                 .equ	PA0	= 0	; For compatibility
                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                 .equ	PA1	= 1	; For compatibility
                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                 .equ	PA2	= 2	; For compatibility
                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                 .equ	PA3	= 3	; For compatibility
                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                 .equ	PA4	= 4	; For compatibility
                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                 .equ	PA5	= 5	; For compatibility
                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                 .equ	PA6	= 6	; For compatibility
                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                 .equ	PA7	= 7	; For compatibility
                 
                 ; DDRA - Port A Data Direction Register
                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                 
                 ; PINA - Port A Input Pins
                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                 
                 
                 ; ***** PORTB ************************
                 ; PORTB - Port B Data Register
                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                 .equ	PB0	= 0	; For compatibility
                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                 .equ	PB1	= 1	; For compatibility
                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                 .equ	PB2	= 2	; For compatibility
                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                 .equ	PB3	= 3	; For compatibility
                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                 .equ	PB4	= 4	; For compatibility
                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                 .equ	PB5	= 5	; For compatibility
                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                 .equ	PB6	= 6	; For compatibility
                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                 .equ	PB7	= 7	; For compatibility
                 
                 ; DDRB - Port B Data Direction Register
                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                 
                 ; PINB - Port B Input Pins
                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                 
                 
                 ; ***** PORTC ************************
                 ; PORTC - Port C Data Register
                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                 .equ	PC0	= 0	; For compatibility
                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                 .equ	PC1	= 1	; For compatibility
                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                 .equ	PC2	= 2	; For compatibility
                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                 .equ	PC3	= 3	; For compatibility
                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                 .equ	PC4	= 4	; For compatibility
                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                 .equ	PC5	= 5	; For compatibility
                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                 .equ	PC6	= 6	; For compatibility
                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                 .equ	PC7	= 7	; For compatibility
                 
                 ; DDRC - Port C Data Direction Register
                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                 
                 ; PINC - Port C Input Pins
                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                 
                 
                 ; ***** PORTD ************************
                 ; PORTD - Port D Data Register
                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                 .equ	PD0	= 0	; For compatibility
                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                 .equ	PD1	= 1	; For compatibility
                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                 .equ	PD2	= 2	; For compatibility
                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                 .equ	PD3	= 3	; For compatibility
                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                 .equ	PD4	= 4	; For compatibility
                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                 .equ	PD5	= 5	; For compatibility
                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                 .equ	PD6	= 6	; For compatibility
                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                 .equ	PD7	= 7	; For compatibility
                 
                 ; DDRD - Port D Data Direction Register
                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                 
                 ; PIND - Port D Input Pins
                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                 
                 
                 ; ***** TIMER_COUNTER_0 **************
                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                 
                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                 
                 ; TCCR0A - Timer/Counter  Control Register A
                 .equ	WGM00	= 0	; Waveform Generation Mode
                 .equ	WGM01	= 1	; Waveform Generation Mode
                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                 
                 ; TCCR0B - Timer/Counter Control Register B
                 .equ	CS00	= 0	; Clock Select
                 .equ	CS01	= 1	; Clock Select
                 .equ	CS02	= 2	; Clock Select
                 .equ	WGM02	= 3	; 
                 .equ	FOC0B	= 6	; Force Output Compare B
                 .equ	FOC0A	= 7	; Force Output Compare A
                 
                 ; TCNT0 - Timer/Counter0
                 .equ	TCNT0_0	= 0	; 
                 .equ	TCNT0_1	= 1	; 
                 .equ	TCNT0_2	= 2	; 
                 .equ	TCNT0_3	= 3	; 
                 .equ	TCNT0_4	= 4	; 
                 .equ	TCNT0_5	= 5	; 
                 .equ	TCNT0_6	= 6	; 
                 .equ	TCNT0_7	= 7	; 
                 
                 ; OCR0A - Timer/Counter0 Output Compare Register
                 .equ	OCR0A_0	= 0	; 
                 .equ	OCR0A_1	= 1	; 
                 .equ	OCR0A_2	= 2	; 
                 .equ	OCR0A_3	= 3	; 
                 .equ	OCR0A_4	= 4	; 
                 .equ	OCR0A_5	= 5	; 
                 .equ	OCR0A_6	= 6	; 
                 .equ	OCR0A_7	= 7	; 
                 
                 ; OCR0B - Timer/Counter0 Output Compare Register
                 .equ	OCR0B_0	= 0	; 
                 .equ	OCR0B_1	= 1	; 
                 .equ	OCR0B_2	= 2	; 
                 .equ	OCR0B_3	= 3	; 
                 .equ	OCR0B_4	= 4	; 
                 .equ	OCR0B_5	= 5	; 
                 .equ	OCR0B_6	= 6	; 
                 .equ	OCR0B_7	= 7	; 
                 
                 ; GTCCR - General Timer/Counter Control Register
                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                 .equ	PSR10	= PSRSYNC	; For compatibility
                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                 
                 
                 ; ***** TIMER_COUNTER_2 **************
                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                 .equ	TOIE2A	= TOIE2	; For compatibility
                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                 
                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                 
                 ; TCCR2A - Timer/Counter2 Control Register A
                 .equ	WGM20	= 0	; Waveform Genration Mode
                 .equ	WGM21	= 1	; Waveform Genration Mode
                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                 
                 ; TCCR2B - Timer/Counter2 Control Register B
                 .equ	CS20	= 0	; Clock Select bit 0
                 .equ	CS21	= 1	; Clock Select bit 1
                 .equ	CS22	= 2	; Clock Select bit 2
                 .equ	WGM22	= 3	; Waveform Generation Mode
                 .equ	FOC2B	= 6	; Force Output Compare B
                 .equ	FOC2A	= 7	; Force Output Compare A
                 
                 ; TCNT2 - Timer/Counter2
                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                 
                 ; OCR2A - Timer/Counter2 Output Compare Register A
                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; OCR2B - Timer/Counter2 Output Compare Register B
                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; ASSR - Asynchronous Status Register
                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                 .equ	EXCLK	= 6	; Enable External Clock Input
                 
                 ; GTCCR - General Timer Counter Control register
                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                 .equ	PSR2	= PSRASY	; For compatibility
                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                 
                 
                 ; ***** WATCHDOG *********************
                 ; WDTCSR - Watchdog Timer Control Register
                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                 .equ	WDE	= 3	; Watch Dog Enable
                 .equ	WDCE	= 4	; Watchdog Change Enable
                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                 
                 
                 ; ***** JTAG *************************
                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                 .equ	IDRD	= OCDR7	; For compatibility
                 
                 ; MCUCR - MCU Control Register
                 .equ	JTD	= 7	; JTAG Interface Disable
                 
                 ; MCUSR - MCU Status Register
                 .equ	JTRF	= 4	; JTAG Reset Flag
                 
                 
                 ; ***** BOOT_LOAD ********************
                 ; SPMCSR - Store Program Memory Control Register
                 .equ	SPMEN	= 0	; Store Program Memory Enable
                 .equ	PGERS	= 1	; Page Erase
                 .equ	PGWRT	= 2	; Page Write
                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                 .equ	RWWSRE	= 4	; Read While Write section read enable
                 .equ	SIGRD	= 5	; Signature Row Read
                 .equ	RWWSB	= 6	; Read While Write Section Busy
                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                 
                 
                 ; ***** EXTERNAL_INTERRUPT ***********
                 ; EICRA - External Interrupt Control Register A
                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                 
                 ; EIMSK - External Interrupt Mask Register
                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                 
                 ; EIFR - External Interrupt Flag Register
                 .equ	INTF0	= 0	; External Interrupt Flag 0
                 .equ	INTF1	= 1	; External Interrupt Flag 1
                 .equ	INTF2	= 2	; External Interrupt Flag 2
                 
                 ; PCICR - Pin Change Interrupt Control Register
                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                 .equ	PCIE3	= 3	; Pin Change Interrupt Enable 3
                 
                 ; PCIFR - Pin Change Interrupt Flag Register
                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                 .equ	PCIF3	= 3	; Pin Change Interrupt Flag 3
                 
                 ; PCMSK3 - Pin Change Mask Register 3
                 .equ	PCINT24	= 0	; Pin Change Enable Mask 24
                 .equ	PCINT25	= 1	; Pin Change Enable Mask 25
                 .equ	PCINT26	= 2	; Pin Change Enable Mask 26
                 .equ	PCINT27	= 3	; Pin Change Enable Mask 27
                 .equ	PCINT28	= 4	; Pin Change Enable Mask 28
                 .equ	PCINT29	= 5	; Pin Change Enable Mask 29
                 .equ	PCINT30	= 6	; Pin Change Enable Mask 30
                 .equ	PCINT31	= 7	; Pin Change Enable Mask 31
                 
                 ; PCMSK2 - Pin Change Mask Register 2
                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                 
                 ; PCMSK1 - Pin Change Mask Register 1
                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                 .equ	PCINT15	= 7	; Pin Change Enable Mask 15
                 
                 ; PCMSK0 - Pin Change Mask Register 0
                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                 
                 
                 ; ***** AD_CONVERTER *****************
                 ; ADMUX - The ADC multiplexer Selection Register
                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                 .equ	ADLAR	= 5	; Left Adjust Result
                 .equ	REFS0	= 6	; Reference Selection Bit 0
                 .equ	REFS1	= 7	; Reference Selection Bit 1
                 
                 ; ADCSRA - The ADC Control and Status register A
                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                 .equ	ADIE	= 3	; ADC Interrupt Enable
                 .equ	ADIF	= 4	; ADC Interrupt Flag
                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                 .equ	ADSC	= 6	; ADC Start Conversion
                 .equ	ADEN	= 7	; ADC Enable
                 
                 ; ADCSRB - The ADC Control and Status register B
                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                 ;.equ	ACME	= 6	; 
                 
                 ; ADCH - ADC Data Register High Byte
                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                 
                 ; ADCL - ADC Data Register Low Byte
                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                 
                 ; DIDR0 - Digital Input Disable Register
                 .equ	ADC0D	= 0	; 
                 .equ	ADC1D	= 1	; 
                 .equ	ADC2D	= 2	; 
                 .equ	ADC3D	= 3	; 
                 .equ	ADC4D	= 4	; 
                 .equ	ADC5D	= 5	; 
                 .equ	ADC6D	= 6	; 
                 .equ	ADC7D	= 7	; 
                 
                 
                 ; ***** TIMER_COUNTER_1 **************
                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                 
                 ; TIFR1 - Timer/Counter Interrupt Flag register
                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                 .equ	OCF1A	= 1	; Timer/Counter1 Output Compare A Match Flag
                 .equ	OCF1B	= 2	; Timer/Counter1 Output Compare B Match Flag
                 .equ	ICF1	= 5	; Timer/Counter1 Input Capture Flag
                 
                 ; TCCR1A - Timer/Counter1 Control Register A
                 .equ	WGM10	= 0	; Pulse Width Modulator Select Bit 0
                 .equ	PWM10	= WGM10	; For compatibility
                 .equ	WGM11	= 1	; Pulse Width Modulator Select Bit 1
                 .equ	PWM11	= WGM11	; For compatibility
                 .equ	COM1B0	= 4	; Comparet Ouput Mode 1B, bit 0
                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR1B - Timer/Counter1 Control Register B
                 .equ	CS10	= 0	; Clock Select bit 0
                 .equ	CS11	= 1	; Clock Select 1 bit 1
                 .equ	CS12	= 2	; Clock Select1 bit 2
                 .equ	WGM12	= 3	; Waveform Generation Mode Bit 2
                 .equ	CTC1	= WGM12	; For compatibility
                 .equ	WGM13	= 4	; Waveform Generation Mode Bit 3
                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                 
                 ; TCCR1C - Timer/Counter1 Control Register C
                 .equ	FOC1B	= 6	; Force Output Compare for Channel B
                 .equ	FOC1A	= 7	; Force Output Compare for Channel A
                 
                 
                 ; ***** EEPROM ***********************
                 ; EEARH - EEPROM Address Register Low Byte
                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                 
                 ; EEARL - EEPROM Address Register Low Byte
                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                 
                 ; EEDR - EEPROM Data Register
                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                 
                 ; EECR - EEPROM Control Register
                 .equ	EERE	= 0	; EEPROM Read Enable
                 .equ	EEPE	= 1	; EEPROM Write Enable
                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                 
                 
                 ; ***** TWI **************************
                 ; TWAMR - TWI (Slave) Address Mask Register
                 .equ	TWAM0	= 1	; 
                 .equ	TWAMR0	= TWAM0	; For compatibility
                 .equ	TWAM1	= 2	; 
                 .equ	TWAMR1	= TWAM1	; For compatibility
                 .equ	TWAM2	= 3	; 
                 .equ	TWAMR2	= TWAM2	; For compatibility
                 .equ	TWAM3	= 4	; 
                 .equ	TWAMR3	= TWAM3	; For compatibility
                 .equ	TWAM4	= 5	; 
                 .equ	TWAMR4	= TWAM4	; For compatibility
                 .equ	TWAM5	= 6	; 
                 .equ	TWAMR5	= TWAM5	; For compatibility
                 .equ	TWAM6	= 7	; 
                 .equ	TWAMR6	= TWAM6	; For compatibility
                 
                 ; TWBR - TWI Bit Rate register
                 .equ	TWBR0	= 0	; 
                 .equ	TWBR1	= 1	; 
                 .equ	TWBR2	= 2	; 
                 .equ	TWBR3	= 3	; 
                 .equ	TWBR4	= 4	; 
                 .equ	TWBR5	= 5	; 
                 .equ	TWBR6	= 6	; 
                 .equ	TWBR7	= 7	; 
                 
                 ; TWCR - TWI Control Register
                 .equ	TWIE	= 0	; TWI Interrupt Enable
                 .equ	TWEN	= 2	; TWI Enable Bit
                 .equ	TWWC	= 3	; TWI Write Collition Flag
                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                 .equ	TWINT	= 7	; TWI Interrupt Flag
                 
                 ; TWSR - TWI Status Register
                 .equ	TWPS0	= 0	; TWI Prescaler
                 .equ	TWPS1	= 1	; TWI Prescaler
                 .equ	TWS3	= 3	; TWI Status
                 .equ	TWS4	= 4	; TWI Status
                 .equ	TWS5	= 5	; TWI Status
                 .equ	TWS6	= 6	; TWI Status
                 .equ	TWS7	= 7	; TWI Status
                 
                 ; TWDR - TWI Data register
                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                 
                 ; TWAR - TWI (Slave) Address register
                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                 
                 
                 ; ***** USART1 ***********************
                 ; UDR1 - USART I/O Data Register
                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSR1A - USART Control and Status Register A
                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                 .equ	U2X1	= 1	; Double the USART transmission speed
                 .equ	UPE1	= 2	; Parity Error
                 .equ	DOR1	= 3	; Data overRun
                 .equ	FE1	= 4	; Framing Error
                 .equ	UDRE1	= 5	; USART Data Register Empty
                 .equ	TXC1	= 6	; USART Transmitt Complete
                 .equ	RXC1	= 7	; USART Receive Complete
                 
                 ; UCSR1B - USART Control and Status Register B
                 .equ	TXB81	= 0	; Transmit Data Bit 8
                 .equ	RXB81	= 1	; Receive Data Bit 8
                 .equ	UCSZ12	= 2	; Character Size
                 .equ	TXEN1	= 3	; Transmitter Enable
                 .equ	RXEN1	= 4	; Receiver Enable
                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSR1C - USART Control and Status Register C
                 .equ	UCPOL1	= 0	; Clock Polarity
                 .equ	UCSZ10	= 1	; Character Size
                 .equ	UCPHA1	= UCSZ10	; For compatibility
                 .equ	UCSZ11	= 2	; Character Size
                 .equ	UDORD1	= UCSZ11	; For compatibility
                 .equ	USBS1	= 3	; Stop Bit Select
                 .equ	UPM10	= 4	; Parity Mode Bit 0
                 .equ	UPM11	= 5	; Parity Mode Bit 1
                 .equ	UMSEL10	= 6	; USART Mode Select
                 .equ	UMSEL11	= 7	; USART Mode Select
                 
                 ; UBRR1H - USART Baud Rate Register High Byte
                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                 
                 ; UBRR1L - USART Baud Rate Register Low Byte
                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                 
                 
                 ; ***** CPU **************************
                 ; SREG - Status Register
                 .equ	SREG_C	= 0	; Carry Flag
                 .equ	SREG_Z	= 1	; Zero Flag
                 .equ	SREG_N	= 2	; Negative Flag
                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                 .equ	SREG_S	= 4	; Sign Bit
                 .equ	SREG_H	= 5	; Half Carry Flag
                 .equ	SREG_T	= 6	; Bit Copy Storage
                 .equ	SREG_I	= 7	; Global Interrupt Enable
                 
                 ; MCUCR - MCU Control Register
                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                 .equ	IVSEL	= 1	; Interrupt Vector Select
                 .equ	PUD	= 4	; Pull-up disable
                 .equ	BODSE	= 5	; BOD Power Down in Sleep Enable
                 .equ	BODS	= 6	; BOD Power Down in Sleep
                 ;.equ	JTD	= 7	; JTAG Interface Disable
                 
                 ; MCUSR - MCU Status Register
                 .equ	PORF	= 0	; Power-on reset flag
                 .equ	EXTRF	= 1	; External Reset Flag
                 .equ	BORF	= 2	; Brown-out Reset Flag
                 .equ	WDRF	= 3	; Watchdog Reset Flag
                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                 
                 ; OSCCAL - Oscillator Calibration Value
                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                 
                 ; CLKPR - 
                 .equ	CLKPS0	= 0	; 
                 .equ	CLKPS1	= 1	; 
                 .equ	CLKPS2	= 2	; 
                 .equ	CLKPS3	= 3	; 
                 .equ	CLKPCE	= 7	; 
                 
                 ; SMCR - Sleep Mode Control Register
                 .equ	SE	= 0	; Sleep Enable
                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                 
                 ; GPIOR2 - General Purpose IO Register 2
                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                 
                 ; GPIOR1 - General Purpose IO Register 1
                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                 
                 ; GPIOR0 - General Purpose IO Register 0
                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                 
                 ; PRR0 - Power Reduction Register0
                 .equ	PRADC	= 0	; Power Reduction ADC
                 .equ	PRUSART0	= 1	; Power Reduction USART 0
                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                 .equ	PRUSART1	= 4	; Power Reduction USART 1
                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                 .equ	PRTWI	= 7	; Power Reduction TWI
                 
                 
                 ; ***** SPI **************************
                 ; SPDR - SPI Data Register
                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                 
                 ; SPSR - SPI Status Register
                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                 .equ	WCOL	= 6	; Write Collision Flag
                 .equ	SPIF	= 7	; SPI Interrupt Flag
                 
                 ; SPCR - SPI Control Register
                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                 .equ	CPHA	= 2	; Clock Phase
                 .equ	CPOL	= 3	; Clock polarity
                 .equ	MSTR	= 4	; Master/Slave Select
                 .equ	DORD	= 5	; Data Order
                 .equ	SPE	= 6	; SPI Enable
                 .equ	SPIE	= 7	; SPI Interrupt Enable
                 
                 
                 
                 ; ***** LOCKSBITS ********************************************************
                 .equ	LB1	= 0	; Lock bit
                 .equ	LB2	= 1	; Lock bit
                 .equ	BLB01	= 2	; Boot Lock bit
                 .equ	BLB02	= 3	; Boot Lock bit
                 .equ	BLB11	= 4	; Boot lock bit
                 .equ	BLB12	= 5	; Boot lock bit
                 
                 
                 ; ***** FUSES ************************************************************
                 ; LOW fuse bits
                 .equ	CKSEL0	= 0	; Select Clock Source
                 .equ	CKSEL1	= 1	; Select Clock Source
                 .equ	CKSEL2	= 2	; Select Clock Source
                 .equ	CKSEL3	= 3	; Select Clock Source
                 .equ	SUT0	= 4	; Select start-up time
                 .equ	SUT1	= 5	; Select start-up time
                 .equ	CKOUT	= 6	; Clock output
                 .equ	CKDIV8	= 7	; Divide clock by 8
                 
                 ; HIGH fuse bits
                 .equ	BOOTRST	= 0	; Select Reset Vector
                 .equ	BOOTSZ0	= 1	; Select Boot Size
                 .equ	BOOTSZ1	= 2	; Select Boot Size
                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                 .equ	WDTON	= 4	; Watchdog timer always on
                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                 .equ	JTAGEN	= 6	; Enable JTAG
                 .equ	OCDEN	= 7	; Enable OCD
                 
                 ; EXTENDED fuse bits
                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                 
                 
                 
                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                 .def	XH	= r27
                 .def	XL	= r26
                 .def	YH	= r29
                 .def	YL	= r28
                 .def	ZH	= r31
                 .def	ZL	= r30
                 
                 
                 
                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                 .equ	FLASHEND	= 0x7fff	; Note: Word address
                 .equ	IOEND	= 0x00ff
                 .equ	SRAM_START	= 0x0100
                 .equ	SRAM_SIZE	= 4096
                 .equ	RAMEND	= 0x10ff
                 .equ	XRAMEND	= 0x0000
                 .equ	E2END	= 0x07ff
                 .equ	EEPROMEND	= 0x07ff
                 .equ	EEADRBITS	= 11
                 #pragma AVRPART MEMORY PROG_FLASH 65536
                 #pragma AVRPART MEMORY EEPROM 2048
                 #pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 
                 
                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                 .equ	NRWW_START_ADDR	= 0x7000
                 .equ	NRWW_STOP_ADDR	= 0x7fff
                 .equ	RWW_START_ADDR	= 0x0
                 .equ	RWW_STOP_ADDR	= 0x6fff
                 .equ	PAGESIZE	= 128
                 .equ	FIRSTBOOTSTART	= 0x7e00
                 .equ	SECONDBOOTSTART	= 0x7c00
                 .equ	THIRDBOOTSTART	= 0x7800
                 .equ	FOURTHBOOTSTART	= 0x7000
                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                 
                 
                 
                 ; ***** INTERRUPT VECTORS ************************************************
                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                 .equ	PCI0addr	= 0x0008	; Pin Change Interrupt Request 0
                 .equ	PCI1addr	= 0x000a	; Pin Change Interrupt Request 1
                 .equ	PCI2addr	= 0x000c	; Pin Change Interrupt Request 2
                 .equ	PCI3addr	= 0x000e	; Pin Change Interrupt Request 3
                 .equ	WDTaddr	= 0x0010	; Watchdog Time-out Interrupt
                 .equ	OC2Aaddr	= 0x0012	; Timer/Counter2 Compare Match A
                 .equ	OC2Baddr	= 0x0014	; Timer/Counter2 Compare Match B
                 .equ	OVF2addr	= 0x0016	; Timer/Counter2 Overflow
                 .equ	ICP1addr	= 0x0018	; Timer/Counter1 Capture Event
                 .equ	OC1Aaddr	= 0x001a	; Timer/Counter1 Compare Match A
                 .equ	OC1Baddr	= 0x001c	; Timer/Counter1 Compare Match B
                 .equ	OVF1addr	= 0x001e	; Timer/Counter1 Overflow
                 .equ	OC0Aaddr	= 0x0020	; Timer/Counter0 Compare Match A
                 .equ	OC0Baddr	= 0x0022	; Timer/Counter0 Compare Match B
                 .equ	OVF0addr	= 0x0024	; Timer/Counter0 Overflow
                 .equ	SPIaddr	= 0x0026	; SPI Serial Transfer Complete
                 .equ	URXC0addr	= 0x0028	; USART0, Rx Complete
                 .equ	UDRE0addr	= 0x002a	; USART0 Data register Empty
                 .equ	UTXC0addr	= 0x002c	; USART0, Tx Complete
                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                 .equ	ADCCaddr	= 0x0030	; ADC Conversion Complete
                 .equ	ERDYaddr	= 0x0032	; EEPROM Ready
                 .equ	TWIaddr	= 0x0034	; 2-wire Serial Interface
                 .equ	SPMRaddr	= 0x0036	; Store Program Memory Read
                 .equ	URXC1addr	= 0x0038	; USART1 RX complete
                 .equ	UDRE1addr	= 0x003a	; USART1 Data Register Empty
                 .equ	UTXC1addr	= 0x003c	; USART1 TX complete
                 
                 .equ	INT_VECTORS_SIZE	= 62	; size in words
                 
                 #endif  /* _M644PDEF_INC_ */
                 
                 ; ***** END OF FILE ******************************************************
                 
                 .equ offset = 0x00
                 
                 .include "macros.inc"
                 
                 ;*	file: macros.inc
                 ;*
                 ;*	Description:
                 ;*	Source file for application note AVR001 - Conditional Assembly
                 ;*	and Portability Macros.
                 ;*
                 ;*	Defines a number of macros that makes it easier to access
                 ;*	IO registers and extended IO registers (or SRAM locations up
                 ;*  to adress $FF if applicable).
                 ;*	The macros can be used to produce code that assembles to
                 ;*	any target AVR, without considering if the accessed IO
                 ;*	registers are located in low, standard or extended IO space
                 ;*
                 ;* $Revision: 2.2 $	
                 ;* $Author: jllassen $
                 ;* $Date: Wednesday, January 26, 2005 10:55:18 UTC $
                 ;*****************************************************************
                 
                 ;*********************************************************
                 ;*	BIT access anywhere in IO or lower $FF of data space
                 ;*	SETB - SET Bit in IO of data space
                 ;*	CLRB - CLeaR Bit in IO of data space
                 ;*********************************************************
                 
                 .MACRO SETB 		;Arguments: Address, Bit, Register
                 	.if @1>7
                 		.message "Only values 0-7 allowed for Bit parameter"
                 	.endif
                 	.if @0>0x3F
                 		lds  @2, @0
                 		sbr  @2, (1<<@1)
                 		sts  @0, @2
                 	.elif @0>0x1F
                 		in   @2, @0
                 		sbr  @2, (1<<@1)
                 		out  @0, @2
                 	.else
                 		sbi  @0, @1
                 	.endif
                 .ENDMACRO
                 
                 .MACRO CLRB 		;Arguments: Address, Bit, Register
                 	.if @1>7
                 		.message "Only values 0-7 allowed for Bit parameter"
                 	.endif
                 	.if @0>0x3F
                 		lds  @2, @0
                 		cbr  @2, (1<<@1)
                 		sts  @0, @2
                 	.elif @0>0x1F
                 		in   @2, @0
                 		cbr  @2, (1<<@1)
                 		out  @0, @2
                 	.else
                 		cbi  @0, @1
                 	.endif
                 .ENDMACRO
                 
                 ;*********************************************************
                 ;*	Bit test anywhere in IO or in lower $FF of data space
                 ;*  SKBS : SKip if Bit Set
                 ;*  SKBC : SKip if Bit Cleared
                 ;*********************************************************
                 .MACRO SKBS  		;Arguments: Address, Bit, Register
                 	.if @1>7
                 		.message "Only values 0-7 allowed for Bit parameter"
                 	.endif
                 	.if @0>0x3F
                 		lds  @2, @0
                 		sbrs @2, @1
                 	.elif @0>0x1F
                 		in   @2, @0
                 		sbrs @2, @1
                 	.else
                 		sbis @0, @1
                 	.endif
                 .ENDMACRO
                 
                 .MACRO SKBC  		;Arguments: Address, Bit, Register
                 	.if @1>7
                 		.message "Only values 0-7 allowed for Bit parameter"
                 	.endif
                 	.if @0>0x3F
                 		lds	 @2, @0
                 		sbrc @2, @1
                 	.elif @0>0x1F
                 		in	 @2, @0
                 		sbrc @2, @1
                 	.else
                 		sbic @0, @1
                 	.endif
                 .ENDMACRO
                 
                 ;*********************************************************
                 ;*	Byte access anywhere in IO or lower $FF of data space
                 ;* 	STORE - Store register in IO or data space
                 ;* 	LOAD  - Load register from IO or data space
                 ;*********************************************************
                 
                 .MACRO STORE 		;Arguments: Address, Register
                 	.if	@0>0x3F
                 		sts	@0, @1
                 	.else
                 		out	@0, @1
                 	.endif
                 .ENDMACRO
                 
                 .MACRO LOAD 		;Arguments: Register, Address
                 	.if	@1>0x3F
                 		lds	@0, @1
                 	.else
                 		in	@0, @1
                 	.endif
                 .ENDMACRO
                 .include "miscmacros.inc"
                 
                 .macro RamVariableEnumerate8
                 
                 .if RamVariables > 0x0fff
                 .error "?Out of memory."
                 .endif
                 
                 .equ @0 = RamVariables
                 .set RamVariables=RamVariables+1
                 
                 .endmacro
                 
                 .macro setstatusbit
                 	lds t, StatusBits
                 	ori t, @0
                 	sts StatusBits, t
                 .endmacro
                 
                 .macro lrv		;load RAM variable immediate
                 	ldi t, @1
                 	sts @0, t
                 .endmacro
                 
                 .macro PushAll
                 	push r2
                 	push r3
                 	push r4
                 	push r5
                 	push r6
                 	push r7
                 	push r8
                 
                 	push r17
                 	push r18
                 	push r19
                 	push r20
                 	push r21
                 	push r22
                 	push r23
                 	push r24
                 	push r25
                 
                 	push xl
                 	push xh
                 
                 	push yl
                 	push yh
                 
                 	push zl
                 	push zh
                 .endmacro
                 
                 .macro PopAll
                 	pop zh
                 	pop zl
                 
                 	pop yh
                 	pop yl
                 
                 	pop xh
                 	pop xl
                 
                 	pop r25
                 	pop r24
                 	pop r23
                 	pop r22
                 	pop r21
                 	pop r20
                 	pop r19
                 	pop r18
                 	pop r17
                 
                 	pop r8
                 	pop r7
                 	pop r6
                 	pop r5
                 	pop r4
                 	pop r3
                 	pop r2
                 .endmacro
                 
                 .macro ldx
                 	ldi xl, low(@0)
                 	ldi xh, high(@0)
                 .endmacro
                 .macro ldy
                 	ldi yl, low(@0)
                 	ldi yh, high(@0)
                 .endmacro
                 .macro ldz
                 	ldi zl, low(@0)
                 	ldi zh, high(@0)
                 .endmacro
                 
                 .macro FixedPointVariableEnumerate168
                 
                 .if RamVariables > 0x0fff
                 .error "?Out of memory."
                 .endif
                 
                 .equ @0 = RamVariables
                 .set RamVariables = RamVariables + 3
                 
                 .endmacro
                 
                 .macro FixedPointVariableEnumerate824
                 
                 .if RamVariables > 0x0fff
                 .error "?Out of memory."
                 .endif
                 
                 .equ @0 = RamVariables
                 .set RamVariables = RamVariables + 4
                 
                 .endmacro
                 
                 .macro FixedPointVariableEnumerate832
                 
                 .if RamVariables > 0x0fff
                 .error "?Out of memory."
                 .endif
                 
                 .equ @0 = RamVariables
                 .set RamVariables = RamVariables + 5
                 
                 .endmacro
                 
                 .macro FixedPointVariableEnumerate840
                 
                 .if RamVariables > 0x0fff
                 .error "?Out of memory."
                 .endif
                 
                 .equ @0 = RamVariables
                 .set RamVariables = RamVariables + 6
                 
                 .endmacro
                 
                 .macro EEVariableEnumerate16
                 
                 .if EeRegisters > 0x0178
                 .error "?Out of EEmemory."
                 .endif
                 
                 .equ @0 = EeRegisters
                 .set EeRegisters = EeRegisters + 2
                 
                 .endmacro
                 
                 .macro EEVariableEnumerate8
                 
                 .if EeRegisters > 0x0178
                 .error "?Out of EEmemory."
                 .endif
                 
                 .equ @0 = EeRegisters
                 .set EeRegisters = EeRegisters + 1
                 
                 .endmacro
                 
                 .macro mPrintString
                 	push zl
                 	push zh
                 	ldi zl, low(@0*2)
                 	ldi zh, high(@0*2)
                 	call PrintString
                 	pop zh
                 	pop zl
                 .endmacro
                 
                 .macro brflagtrue
                 	tst @0
                 	brmi @1
                 .endmacro
                 
                 .macro brflagfalse
                 	tst @0
                 	brpl @1
                 .endmacro
                 
                 
                 
                 .macro rvbrflagtrue		;RAM Variable macros
                 	lds t, @0
                 	tst t
                 	brmi @1
                 .endmacro
                 
                 .macro rvbrflagfalse
                 	lds t, @0
                 	tst t
                 	brpl @1
                 .endmacro
                 
                 .macro rvsetflagtrue
                 	ser t
                 	sts @0, t
                 .endmacro
                 
                 .macro rvsetflagfalse
                 	clr t
                 	sts @0, t
                 .endmacro
                 
                 .macro setflagtrue
                 	ser t
                 	mov @0, t
                 .endmacro
                 
                 .macro setflagfalse
                 	clr @0
                 .endmacro
                 
                 .macro rvtest
                 	lds t, @0
                 	tst t
                 .endmacro
                 
                 .macro rvcpi
                 	lds t, @0
                 	cpi t, @1
                 .endmacro
                 
                 .macro rvdec
                 	lds t, @0
                 	dec t
                 	sts @0, t
                 .endmacro
                 
                 .macro rvinc
                 	lds t, @0
                 	inc t
                 	sts @0, t
                 .endmacro
                 
                 .macro rvcp
                 	lds r0, @0
                 	lds r1, @1
                 	cp r0, r1
                 .endmacro
                 
                 .macro rvadd
                 	lds r0, @0
                 	ldi t, @1
                 	add r0, t
                 	sts @0, r0
                 .endmacro
                 
                 .macro rvsub
                 	lds t, @0
                 	subi t, @1
                 	sts @0, t
                 .endmacro
                 
                 .macro rvmov
                 	lds t, @1
                 	sts @0, t
                 .endmacro
                 
                 .macro rvflagand
                 	lds r0, @1
                 	lds r1, @2
                 	and r0, r1
                 	sts @0, r0
                 .endmacro
                 
                 .macro rvflagor
                 	lds r0, @1
                 	lds r1, @2
                 	or  r0, r1
                 	sts @0, r0
                 .endmacro
                 
                 .macro rvflageor
                 	lds r0, @1
                 	lds r1, @2
                 	eor r0, r1
                 	sts @0, r0
                 .endmacro
                 
                 .macro rvflagnot
                 	lds r0, @1
                 	com r0
                 	sts @0, r0
                 .endmacro
                 
                 
                 
                 .macro longbrlt
                 	brge pc + 2
                 	rjmp @0
                 .endmacro
                 
                 .macro longbrge
                 	brlt pc + 2
                 	rjmp @0
                 .endmacro
                 
                 
                 
                 .macro ldzarray			;calculate array address.    @0=array name  @1=cell size  @2=index
                 	;ldi zl, low(@0)
                 	;ldi zh, high(@0)
                   ldz @0
                 	ldi t, @1
                 	mul t, @2
                 	add zl, r0
                 	adc zh, r1
                 .endmacro
                 
                 
                 
                 .macro debug16
                 	b16load @0
                 	call SerOut16
                 	ldi xl, 0x0d
                 	call SerByteOut
                 .endmacro
                 
                 
                 .macro CheckLimit
                 	b16load @0
                 	ldy @1
                 	ldz @2
                 	call Limit
                 	brcc pc + 2
                 	rjmp @3
                 .endmacro
                 
                 
                 .macro pushx
                 	push xl
                 	push xh
                 .endmacro
                 
                 .macro popx
                 	pop xh
                 	pop xl
                 .endmacro
                 
                 .macro pushy
                 	push yl
                 	push yh
                 .endmacro
                 
                 .macro popy
                 	pop yh
                 	pop yl
                 .endmacro
                 
                 .macro pushz
                 	push zl
                 	push zh
                 .endmacro
                 
                 .macro popz
                 	pop zh
                 	pop zl
                 .endmacro
                 .include "variables.asm"
                 
                 
                 ;--- RAM ---
                 
                 .equ	LcdBuffer	=0x0100 ;to 0x04ff  Screen buffer, 1024 bytes
                 
                 .equ	RamMixerTable	=0x0500 ;to 0x053f  SRAM copy of mixer table
                 
                 .set	RamVariables	=0x0540 ;to 0x07ff  SRAM variables
                 
                 				;0x0800-0x08ff Stack
                 
                 
                 
                 
                 
                 ;--- EEPROM ---
                 
                 			;0x0000  to 0x0003  Signature 
                 
                 .equ	EeMixerTable	=0x0004 ;to 0x0043  Mixer Table, 8bit, 64 bytes
                 
                 .equ	EeParameterTable=0x0044 ;to 0x005c  Axis gain and limit parameters, 16bit, 24 bytes
                 
                 .equ	EeSensorCalData	=0x005d ;to 0x006f  Sensor calibration data, 16.8bit, 18 bytes
                 
                 .set	EeRegisters	=0x0070 ;to 0x00ff
                 
                 .equ	EeUserProfile2	=0x0100	;to 0x01ff  User profile #2
                 
                 .equ	EeUserProfile3	=0x0200	;to 0x02ff  User profile #3
                 
                 .equ	EeUserProfile4	=0x0300	;to 0x03ff  User profile #4
                 
                         
                 
                 ;---  16.8 bit signed registers ---
                 
                 FixedPointVariableEnumerate168 Temp
                 FixedPointVariableEnumerate168 Temp2
                 FixedPointVariableEnumerate168 Temper
                 
                 FixedPointVariableEnumerate168 RxOffset
                 
                 FixedPointVariableEnumerate168 RxRoll
                 FixedPointVariableEnumerate168 RxPitch
                 FixedPointVariableEnumerate168 RxThrottle
                 FixedPointVariableEnumerate168 RxYaw
                 FixedPointVariableEnumerate168 RxAux
                 FixedPointVariableEnumerate168 RxAux2
                 FixedPointVariableEnumerate168 RxAux3
                 FixedPointVariableEnumerate168 RxAux4
                 
                 FixedPointVariableEnumerate168 GyroRoll
                 FixedPointVariableEnumerate168 GyroPitch
                 FixedPointVariableEnumerate168 GyroYaw
                 FixedPointVariableEnumerate168 GyroRollZero
                 FixedPointVariableEnumerate168 GyroPitchZero
                 FixedPointVariableEnumerate168 GyroYawZero
                 FixedPointVariableEnumerate168 GyroRollVC
                 FixedPointVariableEnumerate168 GyroPitchVC
                 
                 FixedPointVariableEnumerate168 AccX
                 FixedPointVariableEnumerate168 AccY
                 FixedPointVariableEnumerate168 AccZ
                 FixedPointVariableEnumerate168 AccXZero
                 FixedPointVariableEnumerate168 AccYZero
                 FixedPointVariableEnumerate168 AccZZero
                 
                 FixedPointVariableEnumerate168 BatteryVoltage
                 FixedPointVariableEnumerate168 BatteryVoltageOffset
                 FixedPointVariableEnumerate168 BatteryVoltageLowpass
                 FixedPointVariableEnumerate168 BatteryVoltageLogged
                 
                 FixedPointVariableEnumerate168 MpuTemperature
                 
                 FixedPointVariableEnumerate168 CommandRoll		;output from IMU
                 FixedPointVariableEnumerate168 CommandPitch
                 FixedPointVariableEnumerate168 CommandYaw
                 
                 FixedPointVariableEnumerate168 IntegralRoll		;PI control
                 FixedPointVariableEnumerate168 IntegralPitch
                 FixedPointVariableEnumerate168 IntegralYaw
                 FixedPointVariableEnumerate168 Error
                 FixedPointVariableEnumerate168 PgainRoll
                 FixedPointVariableEnumerate168 PgainPitch
                 FixedPointVariableEnumerate168 PgainYaw
                 FixedPointVariableEnumerate168 PlimitRoll
                 FixedPointVariableEnumerate168 PlimitPitch
                 FixedPointVariableEnumerate168 PlimitYaw
                 FixedPointVariableEnumerate168 IgainRoll
                 FixedPointVariableEnumerate168 IgainPitch
                 FixedPointVariableEnumerate168 IgainYaw
                 FixedPointVariableEnumerate168 IlimitRoll
                 FixedPointVariableEnumerate168 IlimitPitch
                 FixedPointVariableEnumerate168 IlimitYaw
                 
                 FixedPointVariableEnumerate168 PgainRollOrg		;variables used for remote tuning
                 FixedPointVariableEnumerate168 PgainPitchOrg
                 FixedPointVariableEnumerate168 PgainYawOrg
                 FixedPointVariableEnumerate168 IgainRollOrg
                 FixedPointVariableEnumerate168 IgainPitchOrg
                 FixedPointVariableEnumerate168 IgainYawOrg
                 
                 FixedPointVariableEnumerate168 Tuned6			;variables used for remote tuning
                 FixedPointVariableEnumerate168 Tuned7
                 
                 FixedPointVariableEnumerate168 EscLowLimit
                 
                 FixedPointVariableEnumerate168 StickScaleRoll
                 FixedPointVariableEnumerate168 StickScalePitch
                 FixedPointVariableEnumerate168 StickScaleYaw
                 FixedPointVariableEnumerate168 StickScaleThrottle
                 FixedPointVariableEnumerate168 MixFactor
                 
                 FixedPointVariableEnumerate168 StickScaleRollOrg	;variables used for stick scaling offset
                 FixedPointVariableEnumerate168 StickScalePitchOrg
                 
                 FixedPointVariableEnumerate168 StickDeadZone
                 
                 FixedPointVariableEnumerate168 MixValue
                 FixedPointVariableEnumerate168 MixValueFactor
                 
                 FixedPointVariableEnumerate168 Out1
                 FixedPointVariableEnumerate168 Out2
                 FixedPointVariableEnumerate168 Out3
                 FixedPointVariableEnumerate168 Out4
                 FixedPointVariableEnumerate168 Out5
                 FixedPointVariableEnumerate168 Out6
                 FixedPointVariableEnumerate168 Out7
                 FixedPointVariableEnumerate168 Out8
                 
                 FixedPointVariableEnumerate168 FilteredOut1
                 FixedPointVariableEnumerate168 FilteredOut2
                 FixedPointVariableEnumerate168 FilteredOut3
                 FixedPointVariableEnumerate168 FilteredOut4
                 FixedPointVariableEnumerate168 FilteredOut5
                 FixedPointVariableEnumerate168 FilteredOut6
                 FixedPointVariableEnumerate168 FilteredOut7
                 FixedPointVariableEnumerate168 FilteredOut8
                 
                 FixedPointVariableEnumerate168 Offset1
                 FixedPointVariableEnumerate168 Offset2
                 FixedPointVariableEnumerate168 Offset3
                 FixedPointVariableEnumerate168 Offset4
                 FixedPointVariableEnumerate168 Offset5
                 FixedPointVariableEnumerate168 Offset6
                 FixedPointVariableEnumerate168 Offset7
                 FixedPointVariableEnumerate168 Offset8
                 
                 FixedPointVariableEnumerate168 SelflevelPgain
                 FixedPointVariableEnumerate168 SelflevelPgainOrg
                 FixedPointVariableEnumerate168 SelflevelPgainRate
                 FixedPointVariableEnumerate168 SelflevelPlimit
                 
                 FixedPointVariableEnumerate168 BattAlarmVoltage
                 
                 FixedPointVariableEnumerate168 AccSWFilter
                 
                 FixedPointVariableEnumerate168 AccAngleRoll
                 FixedPointVariableEnumerate168 AccAnglePitch
                 
                 FixedPointVariableEnumerate168 LimitV
                 FixedPointVariableEnumerate168 Value
                 
                 FixedPointVariableEnumerate168 LvaDdsAcc
                 
                 FixedPointVariableEnumerate168 PwmOutput
                 
                 FixedPointVariableEnumerate168 ServoFilter
                 
                 FixedPointVariableEnumerate168 ArmedBeepDds
                 
                 FixedPointVariableEnumerate168 BeeperDelay
                 
                 FixedPointVariableEnumerate168 AccTrimRoll
                 FixedPointVariableEnumerate168 AccTrimPitch
                 
                 FixedPointVariableEnumerate168 AccTrimRollOrg		;variables used for remote tuning
                 FixedPointVariableEnumerate168 AccTrimPitchOrg
                 
                 FixedPointVariableEnumerate168 AutoDisarmDelay
                 
                 FixedPointVariableEnumerate168 NoActivityTimer
                 FixedPointVariableEnumerate168 NoActivityDds
                 
                 FixedPointVariableEnumerate168 LiveUpdateTimer
                 FixedPointVariableEnumerate168 FlightTimer
                 
                 FixedPointVariableEnumerate168 EulerAngleRoll
                 FixedPointVariableEnumerate168 EulerAnglePitch
                 
                 FixedPointVariableEnumerate168 Angle
                 
                 FixedPointVariableEnumerate168 AccXfilter
                 FixedPointVariableEnumerate168 AccYfilter
                 FixedPointVariableEnumerate168 AccZfilter
                 
                 FixedPointVariableEnumerate168 CamRollGain
                 FixedPointVariableEnumerate168 CamRollOffset
                 FixedPointVariableEnumerate168 CamPitchGain
                 FixedPointVariableEnumerate168 CamPitchOffset
                 FixedPointVariableEnumerate168 CamRoll
                 FixedPointVariableEnumerate168 CamPitch
                 FixedPointVariableEnumerate168 CamRollHomePos
                 FixedPointVariableEnumerate168 CamPitchHomePos
                 
                 FixedPointVariableEnumerate168 NewCamRollOffset
                 FixedPointVariableEnumerate168 NewCamPitchOffset
                 
                 FixedPointVariableEnumerate168 CamRollGainOrg		;variables used for remote tuning
                 FixedPointVariableEnumerate168 CamPitchGainOrg
                 
                 FixedPointVariableEnumerate168 TuningRateValue		;common input rate used for remote tuning
                 
                 FixedPointVariableEnumerate168 AccZTest
                 FixedPointVariableEnumerate168 TiltAngMult
                 
                 FixedPointVariableEnumerate832 MagicNumber
                 FixedPointVariableEnumerate832 MagicNumberMult
                 FixedPointVariableEnumerate832 MagicNumberTime
                 FixedPointVariableEnumerate832 Theta
                 FixedPointVariableEnumerate832 Sine
                 FixedPointVariableEnumerate832 Cosine
                 
                 FixedPointVariableEnumerate832 VectorX
                 FixedPointVariableEnumerate832 VectorY
                 FixedPointVariableEnumerate832 VectorZ
                 FixedPointVariableEnumerate832 LengthVector
                 
                 FixedPointVariableEnumerate832 VectorA
                 FixedPointVariableEnumerate832 VectorB
                 
                 FixedPointVariableEnumerate832 TempA
                 FixedPointVariableEnumerate832 TempB
                 FixedPointVariableEnumerate832 TempC
                 FixedPointVariableEnumerate832 TempD
                 
                 FixedPointVariableEnumerate832 VectorNewA
                 FixedPointVariableEnumerate832 VectorNewB
                 
                 
                 
                 
                 ;--- RAM variables (8bit)----
                 
                 RamVariableEnumerate8 TWI_address
                 RamVariableEnumerate8 TWI_data
                 
                 RamVariableEnumerate8 MpuFilter
                 RamVariableEnumerate8 MpuAccCfg
                 RamVariableEnumerate8 MpuGyroCfg
                 
                 RamVariableEnumerate8 Xpos		;pixel pos
                 RamVariableEnumerate8 Ypos
                 
                 RamVariableEnumerate8 X1		;line start and end
                 RamVariableEnumerate8 Y1
                 RamVariableEnumerate8 X2
                 RamVariableEnumerate8 Y2
                 
                 RamVariableEnumerate8 PixelType		;0 = EOR   1 = OR   2 = AND
                 
                 RamVariableEnumerate8 FontSelector
                 
                 RamVariableEnumerate8 MainMenuCursorYposSave
                 RamVariableEnumerate8 MainMenuListYposSave
                 
                 RamVariableEnumerate8 LoadMenuCursorYposSave
                 RamVariableEnumerate8 LoadMenuListYposSave
                 
                 RamVariableEnumerate8 BoardOrientation
                 
                 RamVariableEnumerate8 TrigTimerL	;used in trigonometry.asm for calculationg the magic number
                 RamVariableEnumerate8 TrigTimerH
                 
                 RamVariableEnumerate8 Init
                 
                 RamVariableEnumerate8 RxMode
                 
                 RamVariableEnumerate8 RollStartL	;used in readrx.asm
                 RamVariableEnumerate8 RollStartH
                 
                 RamVariableEnumerate8 PitchStartL
                 RamVariableEnumerate8 PitchStartH
                 
                 RamVariableEnumerate8 ThrottleStartL
                 RamVariableEnumerate8 ThrottleStartH
                 
                 RamVariableEnumerate8 YawStartL
                 RamVariableEnumerate8 YawStartH
                 
                 RamVariableEnumerate8 AuxStartL
                 RamVariableEnumerate8 AuxStartH
                 
                 RamVariableEnumerate8 RudderRxPinState
                 RamVariableEnumerate8 AuxRxPinState
                 
                 RamVariableEnumerate8 RollDcnt
                 RamVariableEnumerate8 PitchDcnt
                 RamVariableEnumerate8 ThrottleDcnt
                 RamVariableEnumerate8 YawDcnt
                 RamVariableEnumerate8 AuxDcnt
                 RamVariableEnumerate8 Aux2Dcnt
                 RamVariableEnumerate8 Aux3Dcnt
                 RamVariableEnumerate8 Aux4Dcnt
                 
                 RamVariableEnumerate8 flagRollValid
                 RamVariableEnumerate8 flagPitchValid
                 RamVariableEnumerate8 flagThrottleValid
                 RamVariableEnumerate8 flagYawValid
                 RamVariableEnumerate8 flagAuxValid
                 
                 RamVariableEnumerate8 RxTimeoutLimit
                 
                 RamVariableEnumerate8 OutputRateBitmask		;for each output channel: 0=slow rate  1=fast rate
                 RamVariableEnumerate8 OutputTypeBitmask		;for each output channel: 0=servo 1=ESC
                 RamVariableEnumerate8 OutputRateDivider
                 RamVariableEnumerate8 OutputRateDividerCounter
                 
                 RamVariableEnumerate8 flagRollPitchLink
                 
                 RamVariableEnumerate8 flagPwmEnd
                 RamVariableEnumerate8 flagPwmGen
                 RamVariableEnumerate8 flagPwmState
                 
                 RamVariableEnumerate8 flagArmed
                 RamVariableEnumerate8 flagArmedOldState
                 RamVariableEnumerate8 ArmingDelay
                 
                 RamVariableEnumerate8 flagThrottleZero
                 RamVariableEnumerate8 flagAileronCentered
                 RamVariableEnumerate8 flagElevatorCentered
                 
                 RamVariableEnumerate8 FlashingLEDCounter
                 RamVariableEnumerate8 FlashingLEDCount
                 
                 RamVariableEnumerate8 flagLcdUpdate
                 RamVariableEnumerate8 flagErrorLogSetup
                 
                 RamVariableEnumerate8 flagGimbalMode
                 
                 RamVariableEnumerate8 flagSlOn
                 RamVariableEnumerate8 flagSlStickMixing
                 
                 RamVariableEnumerate8 flagAlarmOn		;alarm activated from the AUX switch
                 RamVariableEnumerate8 flagAlarmOverride
                 
                 RamVariableEnumerate8 AuxBeepDelay
                 RamVariableEnumerate8 AuxCounter
                 RamVariableEnumerate8 AuxSwitchPosition
                 RamVariableEnumerate8 AuxSwitchPositionOld
                 RamVariableEnumerate8 AuxFunctionOld
                 RamVariableEnumerate8 AuxPos1Function
                 RamVariableEnumerate8 AuxPos2Function
                 RamVariableEnumerate8 AuxPos3Function
                 RamVariableEnumerate8 AuxPos4Function
                 RamVariableEnumerate8 AuxPos5Function
                 RamVariableEnumerate8 AuxPos1SS
                 RamVariableEnumerate8 AuxPos2SS
                 RamVariableEnumerate8 AuxPos3SS
                 RamVariableEnumerate8 AuxPos4SS
                 RamVariableEnumerate8 AuxPos5SS
                 RamVariableEnumerate8 Aux4SwitchPosition
                 RamVariableEnumerate8 AuxStickScaling
                 
                 RamVariableEnumerate8 ButtonDelay
                 RamVariableEnumerate8 BtnReversed		;false = normal button order, true = reversed (4 - 3 - 2 - 1)
                 
                 RamVariableEnumerate8 flagSensorsOk
                 
                 RamVariableEnumerate8 flagA
                 RamVariableEnumerate8 flagB
                 
                 RamVariableEnumerate8 Index
                 RamVariableEnumerate8 Mode
                 
                 RamVariableEnumerate8 QTuningIndex
                 
                 RamVariableEnumerate8 OutputTypeBitmaskCopy
                 
                 RamVariableEnumerate8 flagInactive
                 
                 RamVariableEnumerate8 LvaDdsOn
                 RamVariableEnumerate8 flagLvaBuzzerOn
                 
                 RamVariableEnumerate8 flagGeneralBuzzerOn
                 
                 RamVariableEnumerate8 StatusBits
                 RamVariableEnumerate8 StatusCounter
                 
                 RamVariableEnumerate8 flagAutoDisarm
                 
                 RamVariableEnumerate8 flagMutePwm
                 
                 RamVariableEnumerate8 flagDebugBuzzerOn
                 
                 RamVariableEnumerate8 CamServoMixing
                 
                 RamVariableEnumerate8 LcdContrast
                 
                 RamVariableEnumerate8 Timer1sec
                 RamVariableEnumerate8 Timer1min
                 
                 RamVariableEnumerate8 TuningMode		;0=Off, 1=Aileron, 2=Elevator, 3=Rudder, 4=SL gain, 5=ACC trim, 6=Gimbal, 255=Quick Tuning
                 RamVariableEnumerate8 TuningRate		;0=invalid, 1=Low, 2=Medium, 3=High
                 
                 RamVariableEnumerate8 TimeoutCounter
                 
                 RamVariableEnumerate8 ChannelCount
                 RamVariableEnumerate8 ChannelCountArmed
                 RamVariableEnumerate8 CppmChannelCount
                 
                 RamVariableEnumerate8 CppmPulseStartL
                 RamVariableEnumerate8 CppmPulseStartH
                 
                 RamVariableEnumerate8 CppmPulseArrayAddressL
                 RamVariableEnumerate8 CppmPulseArrayAddressH
                 
                 RamVariableEnumerate8 Channel1L
                 RamVariableEnumerate8 Channel1H
                 RamVariableEnumerate8 Channel2L
                 RamVariableEnumerate8 Channel2H
                 RamVariableEnumerate8 Channel3L
                 RamVariableEnumerate8 Channel3H
                 RamVariableEnumerate8 Channel4L
                 RamVariableEnumerate8 Channel4H
                 RamVariableEnumerate8 Channel5L
                 RamVariableEnumerate8 Channel5H
                 RamVariableEnumerate8 Channel6L
                 RamVariableEnumerate8 Channel6H
                 RamVariableEnumerate8 Channel7L
                 RamVariableEnumerate8 Channel7H
                 RamVariableEnumerate8 Channel8L
                 RamVariableEnumerate8 Channel8H
                 RamVariableEnumerate8 Channel9L
                 RamVariableEnumerate8 Channel9H
                 
                 RamVariableEnumerate8 MappedChannel1
                 RamVariableEnumerate8 MappedChannel2
                 RamVariableEnumerate8 MappedChannel3
                 RamVariableEnumerate8 MappedChannel4
                 RamVariableEnumerate8 MappedChannel5
                 RamVariableEnumerate8 MappedChannel6
                 RamVariableEnumerate8 MappedChannel7
                 RamVariableEnumerate8 MappedChannel8
                 
                 RamVariableEnumerate8 SBusByte0			;the following byte values work as an array and the order must not be modified!
                 RamVariableEnumerate8 SBusByte1
                 RamVariableEnumerate8 SBusByte2
                 RamVariableEnumerate8 SBusByte3
                 RamVariableEnumerate8 SBusByte4
                 RamVariableEnumerate8 SBusByte5
                 RamVariableEnumerate8 SBusByte6
                 RamVariableEnumerate8 SBusByte7
                 RamVariableEnumerate8 SBusByte8
                 RamVariableEnumerate8 SBusByte9
                 RamVariableEnumerate8 SBusByte10
                 
                 RamVariableEnumerate8 SBusFlags
                 RamVariableEnumerate8 Channel17
                 RamVariableEnumerate8 Channel18
                 RamVariableEnumerate8 Failsafe
                 RamVariableEnumerate8 DG2Functions
                 
                 RamVariableEnumerate8 SatDataMask
                 
                 RamVariableEnumerate8 RxFrameValid
                 RamVariableEnumerate8 RxFrameLength
                 
                 RamVariableEnumerate8 RxBuffer0
                 RamVariableEnumerate8 RxBuffer1
                 RamVariableEnumerate8 RxBuffer2
                 RamVariableEnumerate8 RxBuffer3
                 RamVariableEnumerate8 RxBuffer4
                 RamVariableEnumerate8 RxBuffer5
                 RamVariableEnumerate8 RxBuffer6
                 RamVariableEnumerate8 RxBuffer7
                 RamVariableEnumerate8 RxBuffer8
                 RamVariableEnumerate8 RxBuffer9
                 RamVariableEnumerate8 RxBuffer10
                 RamVariableEnumerate8 RxBuffer11
                 RamVariableEnumerate8 RxBuffer12
                 RamVariableEnumerate8 RxBuffer13
                 RamVariableEnumerate8 RxBuffer14
                 RamVariableEnumerate8 RxBuffer15
                 RamVariableEnumerate8 RxBuffer16
                 RamVariableEnumerate8 RxBuffer17
                 RamVariableEnumerate8 RxBuffer18
                 RamVariableEnumerate8 RxBuffer19
                 RamVariableEnumerate8 RxBuffer20
                 RamVariableEnumerate8 RxBuffer21
                 RamVariableEnumerate8 RxBuffer22
                 RamVariableEnumerate8 RxBuffer23
                 RamVariableEnumerate8 RxBuffer24
                 
                 RamVariableEnumerate8 RxBufferAddressL
                 RamVariableEnumerate8 RxBufferAddressH
                 
                 RamVariableEnumerate8 RxBufferIndex
                 RamVariableEnumerate8 RxBufferIndexOld
                 RamVariableEnumerate8 RxBufferState
                 
                 RamVariableEnumerate8 FlagByte1			;bit flags for motor layout arrays (one byte for each output, M1 - M8) to set negative values
                 RamVariableEnumerate8 FlagByte2			;(throttle aileron elevator rudder X X X Y) where Y sets rudder to -1 and X is unused
                 RamVariableEnumerate8 FlagByte3
                 RamVariableEnumerate8 FlagByte4
                 RamVariableEnumerate8 FlagByte5
                 RamVariableEnumerate8 FlagByte6
                 RamVariableEnumerate8 FlagByte7
                 RamVariableEnumerate8 FlagByte8
                 
                 RamVariableEnumerate8 UserProfile
                 
                 RamVariableEnumerate8 LedCounter
                 RamVariableEnumerate8 LedSequence
                 RamVariableEnumerate8 LedState
                 
                 
                 
                 ;--- EEPROM registers ----			;Do not change the order of the EEPROM variables! They are read and written sequentially.
                 
                 EEVariableEnumerate8 eeLcdContrast
                 EEVariableEnumerate8 eeRxMode
                 EEVariableEnumerate8 eeUserAccepted
                 EEVariableEnumerate8 eeUserProfile
                 EEVariableEnumerate8 eeEscCalibration
                 EEVariableEnumerate16 eeBatteryVoltageOffset
                 EEVariableEnumerate8 eeGimbalMode
                 EEVariableEnumerate8 eeButtonsReversed
                 EEVariableEnumerate8 eeBoardOrientation		;0=normal, 1=90 degrees, 2=180 degrees and 3=270 degrees
                 
                 EEVariableEnumerate8 eeErrorLogState
                 EEVariableEnumerate8 eeErrorCode
                 EEVariableEnumerate8 eeErrorTimeSec
                 EEVariableEnumerate8 eeErrorTimeMin
                 
                 EEVariableEnumerate16 eeStickScaleRoll
                 EEVariableEnumerate16 eeStickScalePitch
                 EEVariableEnumerate16 eeStickScaleYaw
                 EEVariableEnumerate16 eeStickScaleThrottle
                 EEVariableEnumerate16 eeStickScaleSlMixing
                 
                 EEVariableEnumerate16 eeSelflevelPgain
                 EEVariableEnumerate16 eeSelflevelPlimit
                 EEVariableEnumerate16 eeAccTrimRoll
                 EEVariableEnumerate16 eeAccTrimPitch
                 EEVariableEnumerate16 eeSlMixRate
                 
                 EEVariableEnumerate16 eeEscLowLimit
                 EEVariableEnumerate16 eeStickDeadZone
                 EEVariableEnumerate16 eeBattAlarmVoltage
                 EEVariableEnumerate16 eeServoFilter
                 EEVariableEnumerate16 eeUnused
                 
                 EEVariableEnumerate8 eeChannelRoll		;channel mapping (not for Satellite mode)
                 EEVariableEnumerate8 eeChannelPitch
                 EEVariableEnumerate8 eeChannelThrottle
                 EEVariableEnumerate8 eeChannelYaw
                 EEVariableEnumerate8 eeChannelAux
                 EEVariableEnumerate8 eeChannelAux2
                 EEVariableEnumerate8 eeChannelAux3
                 EEVariableEnumerate8 eeChannelAux4
                 
                 EEVariableEnumerate8 eeSatChannelRoll		;channel mapping for Satellite mode
                 EEVariableEnumerate8 eeSatChannelPitch
                 EEVariableEnumerate8 eeSatChannelThrottle
                 EEVariableEnumerate8 eeSatChannelYaw
                 EEVariableEnumerate8 eeSatChannelAux
                 EEVariableEnumerate8 eeSatChannelAux2
                 EEVariableEnumerate8 eeSatChannelAux3
                 EEVariableEnumerate8 eeSatChannelAux4
                 
                 EEVariableEnumerate8 eeLinkRollPitch		;true=on  false=off
                 EEVariableEnumerate8 eeAutoDisarm		;true=on  false=off
                 EEVariableEnumerate8 eeButtonBeep		;true=on  false=off
                 EEVariableEnumerate8 eeArmingBeeps		;true=on  false=off
                 EEVariableEnumerate8 eeUnused2			;true=on  false=off
                 
                 EEVariableEnumerate16 eeCamRollGain
                 EEVariableEnumerate16 eeCamRollOffset
                 EEVariableEnumerate16 eeCamPitchGain
                 EEVariableEnumerate16 eeCamPitchOffset
                 EEVariableEnumerate8 eeCamServoMixing		;true=vtail/differential mixing false=vanilla servo output
                 EEVariableEnumerate16 eeCamRollHomePos
                 EEVariableEnumerate16 eeCamPitchHomePos
                 
                 EEVariableEnumerate8 eeSensorsCalibrated
                 EEVariableEnumerate8 eeMotorLayoutOk
                 
                 EEVariableEnumerate8 eeAuxPos1SS
                 EEVariableEnumerate8 eeAuxPos2SS
                 EEVariableEnumerate8 eeAuxPos3SS
                 EEVariableEnumerate8 eeAuxPos4SS
                 EEVariableEnumerate8 eeAuxPos5SS
                 EEVariableEnumerate8 eeAuxPos1Function
                 EEVariableEnumerate8 eeAuxPos2Function
                 EEVariableEnumerate8 eeAuxPos3Function
                 EEVariableEnumerate8 eeAuxPos4Function
                 EEVariableEnumerate8 eeAuxPos5Function
                 
                 EEVariableEnumerate8 eeMpuFilter
                 EEVariableEnumerate8 eeMpuGyroCfg
                 EEVariableEnumerate8 eeMpuAccCfg
                 
                 EEVariableEnumerate8 eeTuningRate
                 
                 EEVariableEnumerate8 eeDG2Functions
                 
                 
                 
                 ;--- Registers (global) ----
                 
                 					;r0-r1 used by the HW multiplier
                 
                 					;r2-r13 part of the local variables pool
                 
                 .def	treg			=r14	;temp reg for ISR
                 
                 .def	SregSaver		=r15	;Storage of the SREG, used in ISR
                 
                 .def	t			=r16	;Main temporary register
                 
                 					;R17-R24 is the local variables pool
                 
                 .def	tt			=r25	;Temp reg for ISR
                 
                 .include "hardware.asm"
                 
                 
                 #define lcd_cs1		portd, 5
                 #define lcd_res		portd, 6
                 #define lcd_a0		portd, 7
                 #define	lcd_scl		portd, 4
                 #define	lcd_si		portd, 1
                 
                 #define LedOn		sbi portb, 3
                 #define LedOff		cbi portb, 3
                 #define LedToggle	sbi pinb, 3
                 
                 #define BuzzerOn	sbi portb, 1
                 #define BuzzerOff	cbi portb, 1
                 
                 #define OutputPin1	portc, 6
                 #define OutputPin2	portc, 4
                 #define OutputPin3	portc, 2
                 #define OutputPin4	portc, 3
                 #define OutputPin5	porta, 4
                 #define OutputPin6	porta, 5
                 #define OutputPin7	portc, 5
                 #define OutputPin8	portc, 7
                 
                 //#define DebugOutputPin	portb, 0
                 
                 #define LvaOutputPin	portb, 2
                 
                 #define DigitalOutPin	portb, 0
                 .include "168mathlib_macros.inc"
                 
                 .macro b16ldi
                 
                 	ldi t, high(int(@1+0x8000)-0x8000)
                 	sts @0 + 0, t
                 	ldi t, low(int(@1+0x8000)-0x8000)
                 	sts @0 + 1, t
                 	ldi t, int(frac(@1)*0x100+0x100)-0x100
                 	sts @0 + 2, t
                 
                 .endmacro
                 
                 
                 .macro b16clr
                 
                 	ldi t, 0
                 	sts @0 + 0, t
                 	sts @0 + 1, t
                 	sts @0 + 2, t
                 
                 .endmacro
                 
                 
                 .macro b16set		;can be used to clear or set all three bytes to the same value
                 
                 	sts @0 + 0, t
                 	sts @0 + 1, t
                 	sts @0 + 2, t
                 
                 .endmacro
                 
                 
                 .macro b16neg
                 
                 .def	Op1_2=r19
                 .def	Op1_1=r20
                 .def	Op1_0=r21
                 
                 .def	Op2_2=r22
                 .def	Op2_1=r23
                 .def	Op2_0=r24
                 
                 	lds Op2_2, @0 + 0
                 	lds Op2_1, @0 + 1
                 	lds Op2_0, @0 + 2
                 
                 	clr Op1_0
                 	clr Op1_1
                 	clr Op1_2
                 	sub Op1_0, Op2_0
                 	sbc Op1_1, Op2_1
                 	sbc Op1_2, Op2_2
                 
                 	sts @0 + 0, Op1_2
                 	sts @0 + 1, Op1_1
                 	sts @0 + 2, Op1_0
                 
                 .undef	Op1_2
                 .undef	Op1_1
                 .undef	Op1_0
                 
                 .undef	Op2_2
                 .undef	Op2_1
                 .undef	Op2_0
                 
                 .endmacro
                 
                 
                 .macro b16nmov
                 
                 .def	Op1_2=r19
                 .def	Op1_1=r20
                 .def	Op1_0=r21
                 
                 .def	Op2_2=r22
                 .def	Op2_1=r23
                 .def	Op2_0=r24
                 
                 	lds Op2_2, @1 + 0
                 	lds Op2_1, @1 + 1
                 	lds Op2_0, @1 + 2
                 
                 	clr Op1_0
                 	clr Op1_1
                 	clr Op1_2
                 	sub Op1_0, Op2_0
                 	sbc Op1_1, Op2_1
                 	sbc Op1_2, Op2_2
                 
                 	sts @0 + 0, Op1_2
                 	sts @0 + 1, Op1_1
                 	sts @0 + 2, Op1_0
                 
                 .undef	Op1_2
                 .undef	Op1_1
                 .undef	Op1_0
                 
                 .undef	Op2_2
                 .undef	Op2_1
                 .undef	Op2_0
                 
                 .endmacro
                 
                 
                 .macro b16store			;X:Y  -> 16.8 register
                 
                 	sts @0 + 0, xh
                 	sts @0 + 1, xl
                 	sts @0 + 2, yh
                 
                 .endmacro
                 
                 
                 .macro b16load			;X:Y  <- 16.8 register
                 
                 	lds xh, @0 + 0
                 	lds xl, @0 + 1
                 	lds yh, @0 + 2
                 
                 .endmacro
                 
                 
                 .macro b16loadz			;Z  <- 16.8 register (no decimals)
                 
                 	lds zh, @0 + 0
                 	lds zl, @0 + 1
                 
                 .endmacro
                 
                 
                 .macro b16store_array		;reg -> reg[index]   b16store_array array, reg
                 
                 .def	Op1_2=r19
                 .def	Op1_1=r20
                 .def	Op1_0=r21
                 
                 .def	a=r22
                 
                 	push zl
                 	push zh
                 
                 	lds Op1_2, @1 + 0
                 	lds Op1_1, @1 + 1
                 	lds Op1_0, @1 + 2
                 
                 	ldi zl, low(@0)
                 	ldi zh, high(@0)
                 
                 	lds a, Index
                 	ldi t, 3
                 	mul a, t
                 	add zl, r0
                 	adc zh, r1
                 
                 	st z+, Op1_2
                 	st z+, Op1_1
                 	st z+, Op1_0
                 
                 	pop zh
                 	pop zl
                 
                 .undef	Op1_2
                 .undef	Op1_1
                 .undef	Op1_0
                 
                 .undef	a
                 
                 .endmacro 
                 
                 
                 .macro b16load_array		;reg <- reg[index]   b16load_array reg, array
                 
                 .def	Op1_2=r19
                 .def	Op1_1=r20
                 .def	Op1_0=r21
                 
                 .def	a=r22
                 
                 	push zl
                 	push zh
                 
                 	ldi zl, low(@1)
                 	ldi zh, high(@1)
                 
                 	lds a, Index
                 	ldi t, 3
                 	mul a, t
                 	add zl, r0
                 	adc zh, r1
                 
                 	ld Op1_2, z+
                 	ld Op1_1, z+
                 	ld Op1_0, z+
                 
                 	sts @0 + 0, Op1_2
                 	sts @0 + 1, Op1_1
                 	sts @0 + 2, Op1_0
                 
                 	pop zh
                 	pop zl
                 
                 .undef	Op1_2
                 .undef	Op1_1
                 .undef	Op1_0
                 
                 .undef	a
                 
                 .endmacro 
                 
                 
                 
                 .macro b16add
                 
                 .def	Op1_2=r19
                 .def	Op1_1=r20
                 .def	Op1_0=r21
                 
                 .def	Op2_2=r22
                 .def	Op2_1=r23
                 .def	Op2_0=r24
                 
                 	lds Op1_2, @1 + 0
                 	lds Op1_1, @1 + 1
                 	lds Op1_0, @1 + 2
                 
                 	lds Op2_2, @2 + 0
                 	lds Op2_1, @2 + 1
                 	lds Op2_0, @2 + 2
                 
                 	add Op1_0, Op2_0
                 	adc Op1_1, Op2_1
                 	adc Op1_2, Op2_2
                 	
                 	sts @0 + 0, Op1_2
                 	sts @0 + 1, Op1_1
                 	sts @0 + 2, Op1_0
                 
                 .undef	Op1_2
                 .undef	Op1_1
                 .undef	Op1_0
                 
                 .undef	Op2_2
                 .undef	Op2_1
                 .undef	Op2_0
                 
                 .endmacro
                 
                 
                 
                 .macro b16mul
                 
                 .def	Op1_2=r17
                 .def	Op1_1=r18
                 .def	Op1_0=r19
                 
                 .def	Op2_2=r20
                 .def	Op2_1=r21
                 .def	Op2_0=r22
                 
                 .def	Result2=r23
                 .def	Result1=r24
                 .def	Result0=r2
                 .def	Sign=r3
                 
                 	lds Op1_2, @1 + 0
                 	lds Op1_1, @1 + 1
                 	lds Op1_0, @1 + 2
                 
                 	lds Op2_2, @2 + 0
                 	lds Op2_1, @2 + 1
                 	lds Op2_0, @2 + 2
                 
                 	call multc		;code is moved out of the macro to optimize for size with very little speed penalty.
                 
                 	sts @0 + 0, Result2
                 	sts @0 + 1, Result1
                 	sts @0 + 2, Result0
                 
                 .undef	Op1_2
                 .undef	Op1_1
                 .undef	Op1_0
                 
                 .undef	Op2_2
                 .undef	Op2_1
                 .undef	Op2_0
                 
                 .undef	Result2
                 .undef	Result1
                 .undef	Result0
                 .undef	Sign
                 
                 .endmacro
                 
                 
                 .macro b16sub
                 .def	Op1_2=r19
                 .def	Op1_1=r20
                 .def	Op1_0=r21
                 
                 .def	Op2_2=r22
                 .def	Op2_1=r23
                 .def	Op2_0=r24
                 
                 	lds Op1_2, @1 + 0
                 	lds Op1_1, @1 + 1
                 	lds Op1_0, @1 + 2
                 
                 	lds Op2_2, @2 + 0
                 	lds Op2_1, @2 + 1
                 	lds Op2_0, @2 + 2
                 
                 	sub Op1_0, Op2_0
                 	sbc Op1_1, Op2_1
                 	sbc Op1_2, Op2_2
                 	
                 	sts @0 + 0, Op1_2
                 	sts @0 + 1, Op1_1
                 	sts @0 + 2, Op1_0
                 
                 .undef	Op1_2
                 .undef	Op1_1
                 .undef	Op1_0
                 
                 .undef	Op2_2
                 .undef	Op2_1
                 .undef	Op2_0
                 
                 .endmacro
                 
                 
                 .macro b16dec
                 .def	Op1_2=r19
                 .def	Op1_1=r20
                 
                 	lds Op1_2, @0 + 0
                 	lds Op1_1, @0 + 1
                 	
                 	subi Op1_1, 1
                 	sbci Op1_2, 0
                 	
                 	sts @0 + 0, Op1_2
                 	sts @0 + 1, Op1_1
                 
                 .undef	Op1_2
                 .undef	Op1_1
                 
                 .endmacro
                 
                 
                 .macro b16inc
                 .def	Op1_2=r19
                 .def	Op1_1=r20
                 
                 	lds Op1_2, @0 + 0
                 	lds Op1_1, @0 + 1
                 	
                 	ldi t,1
                 	add Op1_1, t
                 	clr t
                 	adc Op1_2, t
                 	
                 	sts @0 + 0, Op1_2
                 	sts @0 + 1, Op1_1
                 
                 .undef	Op1_2
                 .undef	Op1_1
                 
                 .endmacro
                 
                 
                 .macro b16fdiv
                 
                 .def	Op1_2=r22
                 .def	Op1_1=r23
                 .def	Op1_0=r24
                 
                 	lds Op1_2, @0 + 0
                 	lds Op1_1, @0 + 1
                 	lds Op1_0, @0 + 2
                 		
                 	ldi t, @1	
                 
                 	call b16fdiv_c
                 
                 	sts @0 + 0, Op1_2
                 	sts @0 + 1, Op1_1
                 	sts @0 + 2, Op1_0
                 
                 .undef	Op1_2
                 .undef	Op1_1
                 .undef	Op1_0
                 
                 .endmacro
                 
                 
                 .macro b16fmul
                 
                 .def	Op1_2=r22
                 .def	Op1_1=r23
                 .def	Op1_0=r24
                 
                 	lds Op1_2, @0 + 0
                 	lds Op1_1, @0 + 1
                 	lds Op1_0, @0 + 2
                 		
                 	ldi t, @1	
                 
                 	call b16fmul_c
                 		
                 	sts @0 + 0, Op1_2
                 	sts @0 + 1, Op1_1
                 	sts @0 + 2, Op1_0
                 
                 .undef	Op1_2
                 .undef	Op1_1
                 .undef	Op1_0
                 
                 .endmacro
                 
                 
                 .macro b16mov
                 
                 	lds t, @1 + 0
                 	sts @0 + 0, t
                 	lds t, @1 + 1
                 	sts @0 + 1, t
                 	lds t, @1 + 2
                 	sts @0 + 2, t
                 
                 .endmacro
                 
                 
                 .macro b16mov2
                 
                 	lds t, @2 + 0
                 	sts @0 + 0, t
                 	sts @1 + 0, t
                 	lds t, @2 + 1
                 	sts @0 + 1, t
                 	sts @1 + 1, t
                 	lds t, @2 + 2
                 	sts @0 + 2, t
                 	sts @1 + 2, t
                 
                 .endmacro
                 
                 
                 .macro b16cmp
                 
                 .def	Op1_2=r19
                 .def	Op1_1=r20
                 .def	Op1_0=r21
                 
                 .def	Op2_2=r22
                 .def	Op2_1=r23
                 .def	Op2_0=r24
                 
                 	lds Op1_2, @0 + 0
                 	lds Op1_1, @0 + 1
                 	lds Op1_0, @0 + 2
                 
                 	lds Op2_2, @1 + 0
                 	lds Op2_1, @1 + 1
                 	lds Op2_0, @1 + 2
                 
                 	cp  Op1_0,Op2_0
                 	cpc Op1_1,Op2_1
                 	cpc Op1_2,Op2_2
                 
                 .undef	Op1_2
                 .undef	Op1_1
                 .undef	Op1_0
                 
                 .undef	Op2_2
                 .undef	Op2_1
                 .undef	Op2_0
                 
                 .endmacro
                 
                 
                 .macro b16mac		;Multiply-and-accumulate    xh:xl.yh is the accumulator
                 
                 .def	Op1_2=r19
                 .def	Op1_1=r20
                 .def	Op1_0=r21
                 
                 	lds Op1_2, @0 + 0
                 	lds Op1_1, @0 + 1
                 	lds Op1_0, @0 + 2
                 
                 	call macc	 ;code is moved out of the macro and into miscsubs.asm to optimize for size with very little speed penalty.
                 
                 .undef	Op1_2
                 .undef	Op1_1
                 .undef	Op1_0
                 
                 
                 .endmacro
                 .include "832mathlib_macros.inc"
                 
                 .macro b832ldi
                 
                 	ldi t, low(int(@1+0x100)-0x100)
                 	sts @0 + 0, t
                 	ldi t, high(int(frac(@1)*0x10000+0x10000)-0x10000)
                 	sts @0 + 1, t
                 	ldi t, low(int(frac(@1)*0x10000+0x10000)-0x10000)
                 	sts @0 + 2, t
                 	ldi t, high(int(frac(@1)*0x100000000+0x100000000)-0x100000000)
                 	sts @0 + 3, t
                 	ldi t, low(int(frac(@1)*0x100000000+0x100000000)-0x100000000)
                 	sts @0 + 4, t
                 
                 .endmacro
                 
                 
                 .macro b832mov
                 
                 	lds t, @1 + 0
                 	sts @0 + 0, t
                 	lds t, @1 + 1
                 	sts @0 + 1, t
                 	lds t, @1 + 2
                 	sts @0 + 2, t
                 	lds t, @1 + 3
                 	sts @0 + 3, t
                 	lds t, @1 + 4
                 	sts @0 + 4, t
                 
                 .endmacro
                 
                 
                 .macro b832clr
                 
                 	ldi t, 0
                 	sts @0 + 0, t
                 	sts @0 + 1, t
                 	sts @0 + 2, t
                 	sts @0 + 3, t
                 	sts @0 + 4, t
                 
                 .endmacro.
                 
                 
                 .macro b832store		;X:Y  -> 8.32 register
                 
                 	sts @0 + 0, xh
                 	sts @0 + 1, xl
                 	sts @0 + 2, yh
                 	sts @0 + 3, yl
                 	sts @0 + 4, zh
                 
                 .endmacro
                 
                 
                 .macro b832load			;X:Y  <- 8.32 register
                 
                 	lds xh, @0 + 0
                 	lds xl, @0 + 1
                 	lds yh, @0 + 2
                 	lds yl, @0 + 3
                 	lds zh, @0 + 4
                 
                 .endmacro
                 
                 
                 .macro b832add
                 
                 .def	Op1_4=r3
                 .def	Op1_3=r4
                 .def	Op1_2=r5
                 .def	Op1_1=r6
                 .def	Op1_0=r7
                 
                 .def	op2_4=r18
                 .def	op2_3=r19
                 .def	Op2_2=r20
                 .def	Op2_1=r21
                 .def	Op2_0=r22
                 
                 	lds Op1_4, @1 + 0
                 	lds Op1_3, @1 + 1
                 	lds Op1_2, @1 + 2
                 	lds Op1_1, @1 + 3
                 	lds Op1_0, @1 + 4
                 
                 	lds Op2_4, @2 + 0
                 	lds Op2_3, @2 + 1
                 	lds Op2_2, @2 + 2
                 	lds Op2_1, @2 + 3
                 	lds Op2_0, @2 + 4
                 
                 	add Op1_0, Op2_0
                 	adc Op1_1, Op2_1
                 	adc Op1_2, Op2_2
                 	adc Op1_3, Op2_3
                 	adc Op1_4, Op2_4
                 	
                 	sts @0 + 0, Op1_4
                 	sts @0 + 1, Op1_3
                 	sts @0 + 2, Op1_2
                 	sts @0 + 3, Op1_1
                 	sts @0 + 4, Op1_0
                 
                 .undef	Op1_4
                 .undef	Op1_3
                 .undef	Op1_2
                 .undef	Op1_1
                 .undef	Op1_0
                 
                 .undef	op2_4
                 .undef	op2_3
                 .undef	Op2_2
                 .undef	Op2_1
                 .undef	Op2_0
                 
                 .endmacro
                 
                 
                 .macro b832sub
                 
                 .def	Op1_4=r3
                 .def	Op1_3=r4
                 .def	Op1_2=r5
                 .def	Op1_1=r6
                 .def	Op1_0=r7
                 
                 .def	op2_4=r18
                 .def	op2_3=r19
                 .def	Op2_2=r20
                 .def	Op2_1=r21
                 .def	Op2_0=r22
                 
                 	lds Op1_4, @1 + 0
                 	lds Op1_3, @1 + 1
                 	lds Op1_2, @1 + 2
                 	lds Op1_1, @1 + 3
                 	lds Op1_0, @1 + 4
                 
                 	lds Op2_4, @2 + 0
                 	lds Op2_3, @2 + 1
                 	lds Op2_2, @2 + 2
                 	lds Op2_1, @2 + 3
                 	lds Op2_0, @2 + 4
                 
                 	sub Op1_0, Op2_0
                 	sbc Op1_1, Op2_1
                 	sbc Op1_2, Op2_2
                 	sbc Op1_3, Op2_3
                 	sbc Op1_4, Op2_4
                 	
                 	sts @0 + 0, Op1_4
                 	sts @0 + 1, Op1_3
                 	sts @0 + 2, Op1_2
                 	sts @0 + 3, Op1_1
                 	sts @0 + 4, Op1_0
                 
                 .undef	Op1_4
                 .undef	Op1_3
                 .undef	Op1_2
                 .undef	Op1_1
                 .undef	Op1_0
                 
                 .undef	op2_4
                 .undef	op2_3
                 .undef	Op2_2
                 .undef	Op2_1
                 .undef	Op2_0
                 
                 .endmacro
                 
                 
                 .macro b832mul
                 
                 .undef	XH	
                 .undef	XL
                 .undef	YH
                 .undef	YL
                 .undef	ZH
                 .undef	ZL
                 
                 .def	Op1_4=r3
                 .def	Op1_3=r4
                 .def	Op1_2=r5
                 .def	Op1_1=r6
                 .def	Op1_0=r7
                 
                 .def	op2_4=r18
                 .def	op2_3=r19
                 .def	Op2_2=r20
                 .def	Op2_1=r21
                 .def	Op2_0=r22
                 
                 .def	Result4=r27
                 .def	Result3=r28
                 .def	Result2=r29
                 .def	Result1=r30
                 .def	Result0=r31
                 .def	Resultm1=r8
                 .def	Resultm2=r9
                 .def	Resultm3=r10
                 
                 .def	Sign=r23
                 
                 	lds Op1_4, @1 + 0
                 	lds Op1_3, @1 + 1
                 	lds Op1_2, @1 + 2
                 	lds Op1_1, @1 + 3
                 	lds Op1_0, @1 + 4
                 
                 	lds Op2_4, @2 + 0
                 	lds Op2_3, @2 + 1
                 	lds Op2_2, @2 + 2
                 	lds Op2_1, @2 + 3
                 	lds Op2_0, @2 + 4
                 
                 	call b832mul_c
                 
                 	sts @0 + 0, Result4
                 	sts @0 + 1, Result3
                 	sts @0 + 2, Result2
                 	sts @0 + 3, Result1
                 	sts @0 + 4, Result0
                 
                 .undef	Op1_4
                 .undef	Op1_3
                 .undef	Op1_2
                 .undef	Op1_1
                 .undef	Op1_0
                 
                 .undef	op2_4
                 .undef	op2_3
                 .undef	Op2_2
                 .undef	Op2_1
                 .undef	Op2_0
                 
                 
                 .undef	Result4
                 .undef	Result3
                 .undef	Result2
                 .undef	Result1
                 .undef	Result0
                 .undef	Resultm1
                 .undef	Resultm2
                 .undef	Resultm3
                 
                 .undef	Sign
                 
                 .def	XH	= r27
                 .def	XL	= r26
                 .def	YH	= r29
                 .def	YL	= r28
                 .def	ZH	= r31
                 .def	ZL	= r30
                 
                 .endmacro
                 
                 
                 
                 .macro b832fdiv
                 
                 .def	Op1_4=r3
                 .def	Op1_3=r4
                 .def	Op1_2=r5
                 .def	Op1_1=r6
                 .def	Op1_0=r7
                 
                 
                 	lds Op1_4, @0 + 0
                 	lds Op1_3, @0 + 1
                 	lds Op1_2, @0 + 2
                 	lds Op1_1, @0 + 3
                 	lds Op1_0, @0 + 4
                 		
                 	ldi t, @1	
                 
                 	call b832fdiv_c
                 
                 	sts @0 + 0, Op1_4
                 	sts @0 + 1, Op1_3
                 	sts @0 + 2, Op1_2
                 	sts @0 + 3, Op1_1
                 	sts @0 + 4, Op1_0
                 
                 .undef	Op1_4
                 .undef	Op1_3
                 .undef	Op1_2
                 .undef	Op1_1
                 .undef	Op1_0
                 
                 .endmacro
                 
                 .include "constants.asm"
                 
                 .equ	f4x6			= 0	;fonts and symbols
                 .equ 	f6x8			= 1
                 .equ	f8x12			= 2
                 .equ	f12x16			= 3
                 .equ	s16x16			= 4
                 
                 .equ	RxModeStandard		= 0
                 .equ	RxModeCppm		= 1
                 .equ	RxModeSBus		= 2
                 .equ	RxModeSatDSM2		= 3
                 .equ	RxModeSatDSMX		= 4
                 
                 .equ	MixValueThrottle	= 0
                 .equ	MixValueRoll		= 1
                 .equ	MixValuePitch		= 2
                 .equ	MixValueYaw		= 3
                 .equ	MixValueOffset		= 4
                 .equ	MixValueFlags		= 5
                 
                 .equ	bMixerFlagType		= 0	;1 = ESC  0 = servo
                 .equ	fEsc			= 1
                 .equ	fServo			= 0
                 
                 .equ	bMixerFlagRate		= 1	;1 = high 0 = low
                 .equ	fHigh			= 1
                 .equ	fLow			= 0
                 
                 .equ	GyroLowLimit 		= -120	;limits for sensor testing
                 .equ	GyroHighLimit	 	= 120
                 
                 .equ	AccLowLimit 		= -120
                 .equ	AccHighLimit	 	= 120
                 .equ	AccZHighLimit	 	= 330
                 
                 .equ	MpuAcc16g		= 0x18
                 .equ	MpuAcc8g		= 0x10
                 .equ	MpuAcc4g		= 0x08
                 .equ	MpuAcc2g		= 0x00
                 
                 .equ	MpuGyro2000		= 0x18
                 .equ	MpuGyro1000		= 0x10
                 .equ	MpuGyro500		= 0x08
                 .equ	MpuGyro250		= 0x00
                 
                 .equ	AuxCounterInit		= 175
                 
                 .equ	AccNotCalibrated	= 0x01
                 .equ	SanityCheckFailed	= 0x02
                 .equ	RxSignalLost		= 0x03	;this bit pattern has 1st priority
                 .equ	NoMotorLayout		= 0x04
                 .equ	LvaWarning		= 0x08	;this bit will not prevent arming
                 
                 .equ	NoAileronInput		= 0x10	;status bit values for standard receiver mode
                 .equ	NoElevatorInput		= 0x20
                 .equ	NoThrottleInput		= 0x40
                 .equ	NoRudderInput		= 0x80
                 
                 .equ	NoCppmInput		= 0x10	;status bit values for CPPM receiver mode
                 
                 .equ	NoSBusInput		= 0x10	;status bit values for S.Bus receiver mode
                 .equ	SBusFailsafe		= 0x20
                 
                 .equ	NoSatelliteInput	= 0x10	;status bit values for Satellite mode
                 .equ	SatProtocolError	= 0x20
                 
                 .equ	TimeoutLimit		= 250
                 
                 .equ	NoError			= 0	;message codes for the error log
                 .equ	ErrorSignalLost		= 1
                 .equ	ErrorFailsafe		= 2
                 .equ	ErrorSatProtocolFail	= 3
                 
                 .include "bindwrappers.asm"
                 
                 ; Details on the calling convention and rules: http://www.atmel.com/images/doc42055.pdf 
                 
                 #ifndef BIND_WRAPPERS_ASM
                 #define BIND_WRAPPERS_ASM
                 
                 
                 .macro push_r18_to_r27_r30_r31
                   push r18
                   push r19
                   push r20
                   push r21
                   push r22
                   push r23
                   push r24
                   push r25
                   push r26
                   push r27
                   push r30
                   push r31
                 .endmacro
                 
                 .macro pop_r18_to_r27_r30_r31
                   pop r31
                   pop r30
                   pop r27
                   pop r26
                   pop r25
                   pop r24
                   pop r23
                   pop r22
                   pop r21
                   pop r20
                   pop r19
                   pop r18
                 .endmacro
                 
                 
                 .macro safe_call_c
                   push_all
                   clr r1
                   call @0
                   pop_all
                 .endmacro
                 
                 
                 .macro push_r2_to_r17_r28_r29
                   push r2
                   push r3
                   push r4
                   push r5
                   push r6
                   push r7
                   push r8
                   push r9
                   push r10
                   push r11
                   push r12
                   push r13
                   push r14
                   push r15
                   push r16
                   push r17
                   push r28
                   push r29
                 .endmacro
                 
                 .macro pop_r2_to_r17_r28_r29
                   pop r29
                   pop r28
                   pop r17
                   pop r16
                   pop r15
                   pop r14
                   pop r13
                   pop r12
                   pop r11
                   pop r10
                   pop r9
                   pop r8
                   pop r7
                   pop r6
                   pop r5
                   pop r4
                   pop r3
                   pop r2
                 .endmacro
                 
                 .macro safe_called_from_c
                   push_r2_to_r17_r28_r29
                   call @0
                   pop_r2_to_r17_r28_r29
                   clr r1
                 .endmacro
                 
                 
                 
                 .macro push_all
                   push r0
                   push r1
                   push_r2_to_r17_r28_r29
                   push_r18_to_r27_r30_r31
                 .endmacro
                 
                 .macro pop_all
                   pop_r18_to_r27_r30_r31
                   pop_r2_to_r17_r28_r29
                   pop r1
                   pop r0
                 .endmacro
                 
                 .macro push_for_call_return_value
                   push r0
                   push r1
                   push r2
                   push r3
                   push r4
                   push r5
                   push r6
                   push r7
                   push r8
                   push r9
                   push r10
                   push r11
                   push r12
                   push r13
                   push r14
                   push r15
                   push r16
                   push r17
                   push r18
                   push r19
                   push r20
                   push r21
                   push r22
                   push r23
                   push r26
                   push r27
                   push r28
                   push r29
                   push r30
                   push r31
                 .endmacro
                 
                 .macro pop_for_call_return_value
                   pop r31
                   pop r30
                   pop r29
                   pop r28
                   pop r27
                   pop r26
                   pop r23
                   pop r22
                   pop r21
                   pop r20
                   pop r19
                   pop r18
                   pop r17
                   pop r16
                   pop r15
                   pop r14
                   pop r13
                   pop r12
                   pop r11
                   pop r10
                   pop r9
                   pop r8
                   pop r7
                   pop r6
                   pop r5
                   pop r4
                   pop r3
                   pop r2
                   pop r1
                   pop r0
                 .endmacro
                 
                 #endif
                 
                 .org 0x0000
                 
000000 940c 0040 	jmp reset		; Reset
000002 940c 4395 	jmp IsrPitch		; External Interrupt Request 0
000004 940c 4372 	jmp IsrRoll		; External Interrupt Request 1
000006 940c 003e 	jmp unused		; External Interrupt Request 2
000008 940c 003e 	jmp unused		; Pin Change Interrupt Request 0
00000a 940c 43e5 	jmp IsrYawAux		; Pin Change Interrupt Request 1
00000c 940c 003e 	jmp unused		; Pin Change Interrupt Request 2
00000e 940c 43b8 	jmp IsrThrottleCppm	; Pin Change Interrupt Request 3
000010 940c 003e 	jmp unused		; Watchdog Time-out Interrupt
000012 940c 003e 	jmp unused		; Timer/Counter2 Compare Match A
000014 940c 003e 	jmp unused		; Timer/Counter2 Compare Match B
000016 940c 4138 	jmp IsrPwmQuiet		; Timer/Counter2 Overflow
000018 940c 003e 	jmp unused		; Timer/Counter1 Capture Event
00001a 940c 3ef8 	jmp IsrPwmStart		; Timer/Counter1 Compare Match A
00001c 940c 3f2d 	jmp IsrPwmEnd		; Timer/Counter1 Compare Match B
00001e 940c 003e 	jmp unused		; Timer/Counter1 Overflow
000020 940c 003e 	jmp unused		; Timer/Counter0 Compare Match A
000022 940c 003e 	jmp unused		; Timer/Counter0 Compare Match B
000024 940c 184c 	jmp IsrLed		; Timer/Counter0 Overflow
000026 940c 003e 	jmp unused		; SPI Serial Transfer Complete
000028 940c 01e3 	jmp IsrSerialRx		; USART0, Rx Complete
00002a 940c 003e 	jmp unused		; USART0 Data register Empty
00002c 940c 003e 	jmp unused		; USART0, Tx Complete
00002e 940c 003e 	jmp unused		; Analog Comparator
000030 940c 003e 	jmp unused		; ADC Conversion Complete
000032 940c 003e 	jmp unused		; EEPROM Ready
000034 940c 003e 	jmp unused		; 2-wire Serial Interface
000036 940c 003e 	jmp unused		; Store Program Memory Read
000038 940c 003e 	jmp unused		; USART1 RX complete
00003a 940c 003e 	jmp unused		; USART1 Data Register Empty
00003c 940c 003e 	jmp unused		; USART1 TX complete
                 
00003e 9518      unused:	reti
                 
                 
                 
                 	;--- Common initialization ---
                 
                 c_main:
00003f 9508        ret
                 
                 reset:
                 
000040 ef0f      	ldi t, low(ramend)	;initalize stack pointer
000041 bf0d      	out spl, t
000042 e100      	ldi t, high(ramend)
000043 bf0e      	out sph, t
                 
000044 940e 003f   call c_main
                 
000046 15b7
000047 03d3
000048 07b1
000049 0c14
00004a 0c14      entrypoints: .dw Main, CppmMain, SBusMain, SatelliteMain, SatelliteMain
                 
                 
                 .include "batteryvoltage.asm"
                 
                 .def Item = r17
                 
                 AdjustBatteryVoltage:
                 
00004b 2711      	clr Item
                 
00004c 9100 0803 	lds t, UserProfile		;refuse access unless user profile #1 is selected
00004e 2300      	tst t
00004f f029      	breq abv11
                 
000050 efe0
000051 e6fa      	ldz nadtxt2*2
000052 940e 357a 	call ShowNoAccessDlg
000054 9508      	ret
                 
000055 931f      abv11:	push Item
000056 940e 477d 	call ReadBatteryVoltage
000058 911f      	pop Item
000059 9100 058e
00005b 9300 0546
00005d 9100 058f
00005f 9300 0547
000061 9100 0590
000063 9300 0548 	b16mov Temper, BatteryVoltage
                 
000065 940e 4d8f 	call LcdClear12x16
                 
000067 e202
000068 9300 073f 	lrv X1, 34			;centering the voltage value
00006a e001
00006b 9300 0540
00006d e900
00006e 9300 0541
000070 e000
000071 9300 0542 	b16ldi Temp, 400
000073 9130 0546
000075 9140 0547
000077 9150 0548
000079 9160 0540
00007b 9170 0541
00007d 9180 0542
00007f 1758
000080 0747
000081 0736      	b16cmp Temper, Temp
000082 f434      	brge abv15
                 
000083 9000 073f
000085 e006
000086 0e00
000087 9200 073f 	rvadd X1, 6			;less than 10V
                 
000089 931f      abv15:	push Item
00008a 940e 2a3c 	call PrintVoltage
00008c 911f      	pop Item
                 
00008d e001
00008e 9300 0744 	lrv FontSelector, f6x8
                 
000090 e101
000091 9300 0740 	lrv Y1, 17			;print menu
000093 e004      	ldi t, 4
000094 efec
000095 e0f2      	ldz abv8*2
000096 940e 4c18 	call PrintStringArray
                 
                 	;footer
000098 940e 4bbd 	call PrintSelectFooter
                 
                 	;print selector
00009a eeec
00009b e0f2
00009c e004
00009d 9f01
00009e 0de0
00009f 1df1      	ldzarray abv7*2, 4, Item
0000a0 940e 4b0f 	call PrintSelector
                 
0000a2 940e 4d2c 	call LcdUpdate
                 
0000a4 940e 42f4 	call RxPollDelay
                 
0000a6 940e 4eaf 	call GetButtons
0000a8 2300      	tst t
0000a9 f409      	brne abv19
                 
0000aa cfaa      	rjmp abv11			;no button pushed
                 
0000ab 940e 1dd3 abv19:	call Beep
                 
0000ad 3008      	cpi t, 0x08			;BACK?
0000ae f409      	brne abv20
0000af 9508      	ret
                 
0000b0 3004      abv20:	cpi t, 0x04			;PREV?
0000b1 f429      	brne abv25
                 
0000b2 951a      abv21:	dec Item
                 
0000b3 7013      abv24:	andi Item, 0x03
0000b4 940e 4ecd 	call ReleaseButtons
0000b6 cf9e      	rjmp abv11
                 
0000b7 3002      abv25:	cpi t, 0x02			;NEXT?
0000b8 f411      	brne abv30
                 
0000b9 9513      	inc Item
0000ba cff8      	rjmp abv24
                 
0000bb 3001      abv30:	cpi t, 0x01			;SELECT?
0000bc f7b1      	brne abv24
                 
0000bd 3010      	cpi Item, 0
0000be f419      	brne abv31
                 
0000bf e0aa      	ldi xl, 10			;KK2.1 offset value
0000c0 d0fa      	rcall SaveBatteryVoltageOffset
0000c1 cf93      	rjmp abv11
                 
0000c2 3011      abv31:	cpi Item, 1
0000c3 f419      	brne abv32
                 
0000c4 e0a2      	ldi xl, 2			;KK2.1.5 offset value
0000c5 d0f5      	rcall SaveBatteryVoltageOffset
0000c6 cf8e      	rjmp abv11
                 
0000c7 3012      abv32:	cpi Item, 2
0000c8 f089      	breq abv33
                 
0000c9 d0e5      	rcall LoadBatteryVoltageOffset	;adjust offset value
0000ca e0c1
0000cb efdc      	ldy -1023			;lower limit
0000cc efef
0000cd e0f3      	ldz 1023			;upper limit
0000ce 940e 33a4 	call NumberEdit
0000d0 2da0      	mov xl, r0
0000d1 2db1      	mov xh, r1
0000d2 27dd      	clr yh
0000d3 93b0 0591
0000d5 93a0 0592
0000d7 93d0 0593 	b16store BatteryVoltageOffset
0000d9 c06f      	rjmp abv34
                 
0000da 9100 058e
0000dc 9300 0540
0000de 9100 058f
0000e0 9300 0541
0000e2 9100 0590
0000e4 9300 0542 abv33:	b16mov Temp, BatteryVoltage	;modify voltage
0000e6 9160 0540
0000e8 9170 0541
0000ea 9180 0542
0000ec e002
0000ed 940e 4f2b
0000ef 9360 0540
0000f1 9370 0541
0000f3 9380 0542 	b16fdiv Temp, 2
0000f5 91b0 0540
0000f7 91a0 0541
0000f9 91d0 0542 	b16load Temp
0000fb e1c4
0000fc e0d0      	ldy 20				;lower limit
0000fd e0e4
0000fe e0f1      	ldz 260				;upper limit
0000ff 940e 33a4 	call NumberEdit
000101 2da0      	mov xl, r0
000102 2db1      	mov xh, r1
000103 27dd      	clr yh
                 
000104 93b0 0540
000106 93a0 0541
000108 93d0 0542 	b16store Temp			;calculate offset value
00010a 9160 0540
00010c 9170 0541
00010e 9180 0542
000110 e002
000111 940e 4f34
000113 9360 0540
000115 9370 0541
000117 9380 0542 	b16fmul Temp, 2
000119 9130 0540
00011b 9140 0541
00011d 9150 0542
00011f 9160 058e
000121 9170 058f
000123 9180 0590
000125 1b58
000126 0b47
000127 0b36
000128 9330 0540
00012a 9340 0541
00012c 9350 0542 	b16sub Temp, Temp, BatteryVoltage
00012e 9130 0591
000130 9140 0592
000132 9150 0593
000134 9160 0540
000136 9170 0541
000138 9180 0542
00013a 0f58
00013b 1f47
00013c 1f36
00013d 9330 0591
00013f 9340 0592
000141 9350 0593 	b16add BatteryVoltageOffset, BatteryVoltageOffset, Temp
000143 91b0 0591
000145 91a0 0592
000147 91d0 0593 	b16load BatteryVoltageOffset
                 
000149 e7e5
00014a e0f0      abv34:	ldz eeBatteryVoltageOffset	;save in EEPROM for profile #1 only
00014b 940e 4ee8 	call StoreEeVariable16
00014d cf65      	rjmp abv24
                 
                 
                 .undef Item
                 
                 
                 
00014e 7355
00014f 2065
000150 4b4b
000151 2e32
000152 2031
000153 664f
000154 7366
000155 7465
000156 0000      abv2:	.db "Use KK2.1 Offset", 0, 0
000157 7355
000158 2065
000159 4b4b
00015a 2e32
00015b 2e31
00015c 2035
00015d 664f
00015e 7366
00015f 7465
000160 0000      abv3:	.db "Use KK2.1.5 Offset", 0, 0
000161 6f4d
000162 6964
000163 7966
000164 5620
000165 6c6f
000166 6174
000167 6567
000168 2820
000169 2f31
00016a 3031
00016b 0029      abv4:	.db "Modify Voltage (1/10)", 0
00016c 6441
00016d 756a
00016e 7473
00016f 4f20
000170 6666
000171 6573
000172 2074
000173 6156
000174 756c
000175 0065      abv5:	.db "Adjust Offset Value", 0
                 
000176 1000
000177 197f      abv7:	.db 0, 16, 127, 25
000178 1900
000179 227f      	.db 0, 25, 127, 34
00017a 2200
00017b 2b7f      	.db 0, 34, 127, 43
00017c 2b00
00017d 347f      	.db 0, 43, 127, 52
                 
00017e 029c
00017f 02ae
000180 02c2
000181 02d8      abv8:	.dw abv2*2, abv3*2, abv4*2, abv5*2
                 
000182 6854
000183 2065
000184 6162
000185 7474
000186 7265
000187 2079
000188 6f76
000189 746c
00018a 6761
00018b 0065      svo1:	.db "The battery voltage", 0
00018c 666f
00018d 7366
00018e 7465
00018f 6820
000190 7361
000191 6220
000192 6565
000193 206e
000194 6573
000195 0074      svo2:	.db "offset has been set", 0
000196 6361
000197 6f63
000198 6472
000199 6e69
00019a 2067
00019b 6f74
00019c 7320
00019d 6c65
00019e 6365
00019f 6574
0001a0 0064      svo3:	.db "according to selected", 0
0001a1 4b4b
0001a2 2032
0001a3 6f62
0001a4 7261
0001a5 2064
0001a6 6576
0001a7 7372
0001a8 6f69
0001a9 2e6e
0001aa 0000      svo4:	.db "KK2 board version.", 0, 0
                 
0001ab 0304
0001ac 0318
0001ad 032c
0001ae 0342      svo8:	.dw svo1*2, svo2*2, svo3*2, svo4*2
                 
                 
                 
                 	;--- Load battery voltage offset value from EEPROM ---
                 
                 LoadBatteryVoltageOffset:
                 
0001af e7e5
0001b0 e0f0      	ldz eeBatteryVoltageOffset
0001b1 940e 4edf 	call GetEeVariable16		;load from profile #1 only
0001b3 27dd      	clr yh
0001b4 93b0 0591
0001b6 93a0 0592
0001b8 93d0 0593 	b16store BatteryVoltageOffset
0001ba 9508      	ret
                 
                 
                 
                 	;--- Save battery voltage offset value to EEPROM ---
                 
                 SaveBatteryVoltageOffset:
                 
0001bb 27bb      	clr xh				;store value in SRAM first (register XL has already been set as input variable)
0001bc 27dd      	clr yh
0001bd 93b0 0591
0001bf 93a0 0592
0001c1 93d0 0593 	b16store BatteryVoltageOffset
                 
0001c3 e7e5
0001c4 e0f0      	ldz eeBatteryVoltageOffset	;store in EEPROM for profile #1 only
0001c5 940e 4ee8 	call StoreEeVariable16
                 
0001c7 940e 4d8f 	call LcdClear12x16
                 
                 	;header
0001c9 e202
0001ca 9300 073f 	lrv X1, 34
0001cc e4e4
0001cd e9fb      	ldz saved*2
0001ce 940e 4b90 	call PrintHeader
                 
                 	;text
0001d0 e004      	ldi t, 4
0001d1 e5e6
0001d2 e0f3      	ldz svo8*2
0001d3 940e 4c18 	call PrintStringArray
                 
                 	;footer
0001d5 940e 4bf3 	call PrintOkFooter
                 
0001d7 940e 4d2c 	call LcdUpdate
                 
0001d9 940e 4ed8 	call WaitForOkButton
0001db 9508      	ret
                 
                 
                 
                 	;--- Write default battery voltage offset value to EEPROM ---
                 
                 ResetBatteryVoltageOffset:
                 
0001dc e0a2
0001dd e0b0      	ldx 2				;offset for KK2.1.5 = 2
0001de e7e5
0001df e0f0      	ldz eeBatteryVoltageOffset
0001e0 940e 4ee8 	call StoreEeVariable16		;save in profile #1 only
0001e2 9508      	ret
                 
                 
                 .include "serial_readrx.asm"
                 
                 
                 
                 	;--- Put serial RX data into a buffer ---
                 
                 IsrSerialRx:
                 
0001e3 b6ff      	in SregSaver, sreg
                 
0001e4 939f        push tt
0001e5 93ff      	push zh
0001e6 93ef      	push zl
                 
                 	;Read and store data
0001e7 90e0 00c6 	lds treg, udr0			;read from USART buffer
                 
0001e9 91e0 07f6 	lds zl, RxBufferAddressL	;save the received data byte in the buffer
0001eb 91f0 07f7 	lds zh, RxBufferAddressH
0001ed 92e1      	st z+, treg
                 
                 	;Update buffer index
0001ee 90e0 07dc 	lds treg, RxFrameLength
0001f0 9190 07f8 	lds tt, RxBufferIndex
0001f2 9593      	inc tt
0001f3 159e      	cp tt, treg
0001f4 f01c      	brlt isr20
                 
0001f5 eded
0001f6 e0f7      	ldz RxBuffer0
0001f7 2799      	clr tt
                 
0001f8 9390 07f8 isr20:	sts RxBufferIndex, tt
                 
                 	;Save the buffer pointer
0001fa 93e0 07f6 	sts RxBufferAddressL, zl
0001fc 93f0 07f7 	sts RxBufferAddressH, zh
                 
                 	;Exit
0001fe 91ef      	pop zl
0001ff 91ff      	pop zh
000200 919f        pop tt
000201 beff      	out sreg, SregSaver
000202 9518      	reti
                 
                 
                 
                 	;--- Clear buffer ---
                 
                 ClearSerialBuffer:
                 
000203 e109      	ldi t, 25
000204 e0a0      	ldi xl, 0
000205 eded
000206 e0f7      	ldz RxBuffer0
                 
000207 93a1      csb1:	st z+, xl
000208 950a      	dec t
000209 f7e9      	brne csb1
                 
00020a 9508      	ret
                 .include "serial_rxtest.asm"
                 
                 .set xoff = 85					;X position for the channel value texts
                 
                 
                 SerialRxTest:
                 
00020b 9100 074d 	lds t, RxMode
00020d 3002      	cpi t, RxModeSBus
00020e f411      	brne srt2
                 
00020f 940e 09f7 	call GetSBusFlags			;S.Bus mode
                 
000211 9100 07db
000213 2300
000214 f01a      srt2:	rvbrflagtrue RxFrameValid, srt1
                 
000215 940e 0340 	call NoSerialDataDlg
000217 9508      	ret
                 
000218 940e 4434 srt1:	call GetRxChannels
                 
00021a 9100 07fa 	lds t, RxBufferState			;update the display only when we have new data
00021c 3003      	cpi t, 3
00021d f041      	breq srt8
                 
00021e e1c9      	ldi yl, 25				;wait 2.5ms
00021f 940e 4ea1 	call wms
                 
000221 9100 07db
000223 2300
000224 f40a      	rvbrflagfalse RxFrameValid, srt8	;update the display also when RX data has become invalid
                 
000225 c06b      	rjmp srt30				;skip display update
                 
000226 940e 42fb srt8:	call ScaleInputValues			;divide RX values by 10
                 
000228 940e 4d81 	call LcdClear6x8
                 
00022a e005      	ldi t, 5				;print all channel labels first
00022b e2ee
00022c e9fd      	ldz rxch*2
00022d 940e 4c18 	call PrintStringArray
                 
00022f e001
000230 9300 0740 	lrv Y1, 1				;aileron
000232 91b0 054c
000234 91a0 054d
000236 91d0 054e 	b16load RxRoll
000238 e3e0
000239 e8f5      	ldz ailtxt*2
00023a efcf      	ser yl
00023b 940e 42b4 	call PrintRxValue
                 
00023d 91b0 054f
00023f 91a0 0550
000241 91d0 0551 	b16load RxPitch				;elevator
000243 e3e6
000244 e8f5      	ldz eletxt*2
000245 efcf      	ser yl
000246 940e 42b4 	call PrintRxValue
                 
000248 940e 42e2 	call PrintRxColon			;throttle (needs special attention)
00024a 91b0 0552
00024c 91a0 0553
00024e 91d0 0554 	b16load RxThrottle
000250 940e 4b47 	call Print16Signed
000252 e505
000253 9300 073f 	lrv X1, xoff
000255 9100 0773
000257 2300
000258 f412      	rvbrflagfalse flagThrottleZero, srt4
                 
000259 27aa      	clr xl					;idle
00025a c008      	rjmp srt6
                 
00025b e5ea
00025c e0f0      srt4:	ldz 90
00025d 940e 42f1 	call CompareXZ
00025f f414      	brge srt5
                 
000260 e0a1      	ldi xl, 1				;1 - 90%
000261 c001      	rjmp srt6
                 
000262 e0a2      srt5:	ldi xl, 2				;full
                 	
000263 e3ec
000264 e8f5      srt6:	ldz thrtxt*2
000265 940e 42d9 	call PrintRxText
                 
000267 91b0 0555
000269 91a0 0556
00026b 91d0 0557 	b16load RxYaw				;rudder
00026d e4e2
00026e e8f5      	ldz rudtxt*2
00026f efcf      	ser yl
000270 940e 42b4 	call PrintRxValue
                 
000272 940e 42e2 	call PrintRxColon			;aux (needs special attention)
000274 91b0 0558
000276 91a0 0559
000278 91d0 055a 	b16load RxAux
00027a 940e 4b47 	call Print16Signed
00027c e505
00027d 9300 073f 	lrv X1, xoff
00027f 9100 0781 	lds t, AuxSwitchPosition
000281 e0ee
000282 e9fd      	ldz auxtxt*2
000283 940e 4c0f 	call PrintFromStringArray
                 
                 	;footer
000285 e000
000286 9300 073f 	lrv X1, 0
000288 e309
000289 9300 0740 	lrv Y1, 57
00028b eaec
00028c e9fb      	ldz bckmore*2
00028d 940e 4c2e 	call PrintString
                 
00028f 940e 4d2c 	call LcdUpdate
                 
000291 940e 4eaf srt30:	call GetButtons
                 
000293 3008      	cpi t, 0x08				;BACK?
000294 f409      	brne srt35
                 
000295 9508      	ret
                 
000296 3004      srt35:	cpi t, 0x04				;MORE?
000297 f419      	brne srt7
                 
000298 940e 1dd3 	call Beep				;go to the second screen
00029a d001      	rcall SerialRxTest2
                 
00029b cf7c      srt7:	rjmp srt1
                 
                 
                 
                 	;--- Second screen ---
                 
                 SerialRxTest2:
                 
00029c 940e 4434 	call GetRxChannels
                 
00029e 9100 074d 	lds t, RxMode				;read S.Bus flags in S.Bus mode only
0002a0 3002      	cpi t, RxModeSBus
0002a1 f411      	brne srt201
                 
0002a2 940e 09f7 	call GetSBusFlags
                 
0002a4 9100 07fa srt201:	lds t, RxBufferState			;update the display only when we have new data
0002a6 3003      	cpi t, 3
0002a7 f041      	breq srt204
                 
0002a8 e1c9      	ldi yl, 25				;wait 2.5ms
0002a9 940e 4ea1 	call wms
                 
0002ab 9100 07db
0002ad 2300
0002ae f40a      	rvbrflagfalse RxFrameValid, srt204	;update the display also when RX data has become invalid
                 
0002af c05e      	rjmp srt203				;skip display update
                 
0002b0 940e 0736 srt204:	call ScaleAuxInputValues		;divide RX values by 10
0002b2 9110 0561
0002b4 9120 0562
0002b6 9130 0563
0002b8 9140 0540
0002ba 9150 0541
0002bc 9160 0542
0002be 940e 4f3a
0002c0 9370 0561
0002c2 9380 0562
0002c4 9220 0563 	b16mul RxAux4, RxAux4, Temp		;TEMP was set to 0.1 in ScaleAuxInputValues
                 
0002c6 940e 4d81 	call LcdClear6x8
                 
0002c8 27bb      	clr xh					;print all AUX channel labels first
0002c9 940e 42a4 	call PrintAuxLabels
                 
0002cb e001
0002cc 9300 0740 	lrv Y1, 1				;aux2
0002ce 91b0 055b
0002d0 91a0 055c
0002d2 91d0 055d 	b16load RxAux2
0002d4 e2ea
0002d5 e8f5      	ldz notext*2
0002d6 efcf      	ser yl
0002d7 940e 42b4 	call PrintRxValue
                 
0002d9 91b0 055e
0002db 91a0 055f
0002dd 91d0 0560 	b16load RxAux3				;aux3
0002df e2ea
0002e0 e8f5      	ldz notext*2
0002e1 efcf      	ser yl
0002e2 940e 42b4 	call PrintRxValue
                 
0002e4 940e 42e2 	call PrintRxColon			;aux4
0002e6 91b0 0561
0002e8 91a0 0562
0002ea 91d0 0563 	b16load RxAux4
0002ec 940e 4b47 	call Print16Signed
0002ee e505
0002ef 9300 073f 	lrv X1, xoff
0002f1 9100 078e 	lds t, Aux4SwitchPosition
0002f3 e2e8
0002f4 e9fd      	ldz aux4txt*2
0002f5 940e 4c0f 	call PrintFromStringArray
                 
0002f7 9100 074d 	lds t, RxMode				;print digital channels in S.Bus mode only
0002f9 3002      	cpi t, RxModeSBus
0002fa f479      	brne srt205
                 
0002fb 91a0 07d6 	lds xl, Channel17			;digital channel 1
0002fd e3e0
0002fe e0f6      	ldz dg1*2
0002ff e3c8
000300 e0d6      	ldy dg1txt*2
000301 d01e      	rcall PrintDigitalChannel
                 
000302 91a0 07d7 	lds xl, Channel18			;digital channel 2
000304 e3e4
000305 e0f6      	ldz dg2*2
000306 e3cc
000307 e0d6      	ldy dg2txt*2
000308 940e 0320 	call PrintDigitalChannel
                 
                 srt205:	;footer
00030a 940e 4bdb 	call PrintBackFooter
                 
00030c 940e 4d2c 	call LcdUpdate
                 
00030e 940e 4eaf srt203:	call GetButtons
                 
000310 3008      	cpi t, 0x08				;BACK?
000311 f429      	brne srt202
                 
000312 940e 1dd3 	call Beep				;return to the first RX test screen
000314 940e 4ecd 	call ReleaseButtons
000316 9508      	ret
                 
000317 cf84      srt202:	rjmp SerialRxTest2
                 
                 
                 
000318 4744
000319 0031      dg1:	.db "DG1", 0
00031a 4744
00031b 0032      dg2:	.db "DG2", 0
                 
00031c 9bf4
00031d 9c0a      dg1txt:	.dw off*2, alarm*2
00031e 9bf4
00031f 9bf8      dg2txt:	.dw off*2, on*2
                 
                 
                 
                 	;--- Print digital channel states (DG1/DG2) ---
                 
                 PrintDigitalChannel:
                 
000320 93cf
000321 93df      	pushy					;register Y (input parameter) points to the string array
000322 93af      	push xl					;register XL (input parameter) holds the input value from DG1 or DG2
000323 e000
000324 9300 073f 	lrv X1, 0
000326 940e 4b89 	call LineFeed
000328 940e 4c2e 	call PrintString			;register Z (input parameter) points to the label
00032a e300
00032b 9300 073f 	lrv X1, 48
00032d 940e 4ba7 	call PrintColonAndSpace
00032f e309
000330 9300 073f 	lrv X1, 57
000332 e300      	ldi t, '0'
000333 91af      	pop xl
000334 0f0a      	add t, xl
000335 940e 4c35 	call PrintChar
000337 e505
000338 9300 073f 	lrv X1, xoff
00033a 2f0a      	mov t, xl
00033b 91ff
00033c 91ef      	popz
00033d 940e 4c0f 	call PrintFromStringArray
00033f 9508      	ret
                 
                 
                 .include "serial_checkrx.asm"
                 
                 
                 
                 	;--- No serial data ---
                 
                 NoSerialDataDlg:
                 
000340 940e 4d8f 	call LcdClear12x16
                 
000342 e106
000343 9300 073f 	lrv X1, 22
000345 ecee
000346 e0f6      	ldz nsd1*2
000347 940e 4b90 	call PrintHeader
                 
000349 e000
00034a 9300 073f 	lrv X1, 0			;print the first instruction line according to selected RX mode
00034c 9100 074d 	lds t, RxMode
00034e 3002      	cpi t, RxModeSBus
00034f f419      	brne nsd11
                 
000350 eee8
000351 e0f6      	ldz nosbus*2			;S.Bus
000352 c002      	rjmp nsd12
                 
000353 ede6
000354 e0f6      nsd11:	ldz nosat*2			;Satellite
                 
000355 940e 4c2e nsd12:	call PrintString
000357 940e 4b89 	call LineFeed
                 
000359 e002      	ldi t, 2			;print instructions
00035a e1ee
00035b e0f7      	ldz nsd8*2
00035c 940e 4c18 	call PrintStringArray
                 
                 	;footer
00035e 940e 4bdb 	call PrintBackFooter
                 
000360 940e 4d2c 	call LcdUpdate
                 
000362 940e 4ed1 nsd10:	call GetButtonsBlocking
000364 3008      	cpi t, 0x08			;BACK?
000365 f7e1      	brne nsd10
                 
000366 9508      	ret
                 
                 
                 
000367 4f4e
000368 4420
000369 5441
00036a 0041      nsd1:	.db "NO DATA", 0
                 
00036b 6c50
00036c 6165
00036d 6573
00036e 7320
00036f 7075
000370 6c70
000371 2079
000372 6153
000373 0074      nosat:	.db "Please supply Sat", 0
000374 6c50
000375 6165
000376 6573
000377 7320
000378 7075
000379 6c70
00037a 2079
00037b 2e53
00037c 7542
00037d 0073      nosbus:	.db "Please supply S.Bus", 0
00037e 6164
00037f 6174
000380 7420
000381 206f
000382 6874
000383 2065
000384 6874
000385 6f72
000386 7474
000387 656c
000388 0000      nsd3:	.db "data to the throttle", 0, 0
000389 6e69
00038a 7570
00038b 2074
00038c 6970
00038d 2e6e
00038e 0000      nsd4:	.db "input pin.", 0, 0
                 
00038f 06fc
000390 0712      nsd8:	.dw nsd3*2, nsd4*2
                 
                 .include "serial_debug.asm"
                 
                 
                 
                 SerialDebug:
                 
000391 940e 0203 	call ClearSerialBuffer
                 
000393 940e 4434 sdb11:	call GetRxChannels
                 
                 	;print the contents of the serial buffer
000395 940e 4d81 	call LcdClear6x8
                 
000397 e0f5      	ldi zh, 5				;number of lines
000398 e0e5      	ldi zl, 5				;number of values per line
000399 edcd
00039a e0d7      	ldy RxBuffer0
                 
00039b d01f      sdb12:	rcall PrintHex
00039c 95ea      	dec zl
00039d f7e9      	brne sdb12
                 
00039e 940e 4b89 	call LineFeed
0003a0 e000
0003a1 9300 073f 	lrv X1, 0
0003a3 e0e5      	ldi zl, 5
0003a4 95fa      	dec zh
0003a5 f7a9      	brne sdb12
                 
                 	;footer
0003a6 940e 4bdb 	call PrintBackFooter
                 
0003a8 940e 4d2c 	call LcdUpdate
                 
0003aa 940e 42f4 	call RxPollDelay
                 
0003ac 940e 4eaf 	call GetButtons
                 
0003ae 3008      	cpi t, 0x08				;BACK?
0003af f719      	brne sdb11
                 
0003b0 940e 1dd3 	call Beep
0003b2 9508      	ret
                 
                 
                 
0003b3 3130
0003b4 3332
0003b5 3534
0003b6 3736
0003b7 3938
0003b8 4241
0003b9 4443
0003ba 4645      hex:	.db "0123456789ABCDEF"
                 
                 
                 
                 	;--- Print hex value ---
                 
                 PrintHex:
                 
0003bb 93ef
0003bc 93ff      	pushz
0003bd e200      	ldi t, ' ';
0003be 940e 4c35 	call PrintChar
                 
0003c0 8108      	ld t, y
0003c1 9502      	swap t
0003c2 700f      	andi t, 0x0F
0003c3 d006      	rcall ph1
                 
0003c4 9109      	ld t, y+
0003c5 700f      	andi t, 0x0F
0003c6 d003      	rcall ph1
                 
0003c7 91ff
0003c8 91ef      	popz
0003c9 9508      	ret
                 
0003ca e6e6
0003cb e0f7      ph1:	ldz hex*2
0003cc 0fe0      	add zl, t
0003cd 2700      	clr t
0003ce 1ff0      	adc zh, t
                 
0003cf 9104      	lpm t, z
0003d0 940e 4c35 	call PrintChar
0003d2 9508      	ret
                 
                 
                 
                 .include "cppm_main.asm"
                 
                 	;--- Specialized setup and main routine for CPPM receivers ---
                 
                 CppmMain:
                 
0003d3 e6a4
0003d4 e0b0      	ldx 100
0003d5 940e 4e9c 	call WaitXms
                 
0003d7 940e 04f0 	call SetupHardwareForCppm
                 
                 
                 	;--- Initialize LCD ---
                 
                 	;call LoadLcdContrast; Not needed, called in main.c
0003d9 940e 4d2c 	call LcdUpdate
0003db 940e 4d70 	call LcdClear
0003dd 940e 4d2c 	call LcdUpdate
                 
                 
                 	;--- Variables init ---
                 
0003df 940e 255c 	call EeInit
                 
0003e1 e000
0003e2 9300 0745 	lrv MainMenuCursorYposSave, 0
0003e4 e000
0003e5 9300 0746 	lrv MainMenuListYposSave, 0
                 
0003e7 e000
0003e8 9300 0747 	lrv LoadMenuCursorYposSave, 0
0003ea e000
0003eb 9300 0748 	lrv LoadMenuListYposSave, 0
                 
0003ed e003
0003ee 9300 0597
0003f0 ef0f
0003f1 9300 0598
0003f3 e000
0003f4 9300 0599 	b16ldi BatteryVoltageLogged, 1023
                 
0003f6 e001
0003f7 9300 069c
0003f9 e80e
0003fa 9300 069d
0003fc e000
0003fd 9300 069e 	b16ldi FlightTimer, 398		;tuned for better accuracy (1 second)
                 
0003ff 2700      	clr t
000400 9300 07a4 	sts Timer1sec, t
000402 9300 07a5 	sts Timer1min, t
                 
000404 9300 07a6 	sts TuningMode, t
                 
000406 9300 076e 	sts flagPwmGen, t
                 
000408 9300 0779 	sts flagErrorLogSetup, t
                 
00040a 9300 0776 	sts FlashingLEDCounter, t
                 
00040c eaaf      	ldi xl, AuxCounterInit
00040d 93a0 0780 	sts AuxCounter, xl
00040f e0a2      	ldi xl, 2
000410 93a0 0781 	sts AuxSwitchPosition, xl
000412 e0a1      	ldi xl, 1
000413 93a0 078e 	sts Aux4SwitchPosition, xl
000415 93a0 0783 	sts AuxFunctionOld, xl
                 
000417 9300 0774 	sts flagAileronCentered, t	;set to false
000419 9300 0775 	sts flagElevatorCentered, t
                 
00041b 9300 07b0 	sts Channel1L, t
00041d 9300 07b1 	sts Channel1H, t
00041f 9300 07b2 	sts Channel2L, t
000421 9300 07b3 	sts Channel2H, t
000423 9300 07b4 	sts Channel3L, t
000425 9300 07b5 	sts Channel3H, t
000427 9300 07b6 	sts Channel4L, t
000429 9300 07b7 	sts Channel4H, t
00042b 9300 07b8 	sts Channel5L, t
00042d 9300 07b9 	sts Channel5H, t
00042f 9300 07ba 	sts Channel6L, t
000431 9300 07bb 	sts Channel6H, t
000433 9300 07bc 	sts Channel7L, t
000435 9300 07bd 	sts Channel7H, t
000437 9300 07be 	sts Channel8L, t
000439 9300 07bf 	sts Channel8H, t
                 
00043b 9300 07db 	sts RxFrameValid, t
00043d 9300 07a8 	sts TimeoutCounter, t
00043f 9300 07ab 	sts CppmChannelCount, t
000441 9300 07a9 	sts ChannelCount, t
                 
000443 ebe0
000444 e0f7      	ldz Channel1L
000445 93e0 07ae 	sts CppmPulseArrayAddressL, zl
000447 93f0 07af 	sts CppmPulseArrayAddressH, zh
                 
000449 e0a3      	ldi xl, 3			;RxBufferState must be set to 3 (i.e. "New data") to make the Tuning and AUX Settings screens work properly
00044a 93a0 07fa 	sts RxBufferState, xl
                 
00044c e100      	ldi t, NoCppmInput
00044d 9300 079d 	sts StatusBits, t
                 
00044f 940e 4ac1 	call setup_mpu6050
                 
000451 940e 2856 	call GyroCal
                 
                 
                 #ifdef STANDALONE_GIMBAL_CONTROLLER
                 #endif
                 
                 
                 cm10:	;--- ESC calibration ----
                 
000453 9478      	sei				;global interrupts must be enabled here for PWM output in EscThrottleCalibration
                 
000454 e7e4
000455 e0f0      	ldz eeEscCalibration		;check ESC calibration setting
000456 940e 4f15 	call ReadEeprom
000458 2300      	tst t
000459 f051      	breq cm5			;jump if ESC calibration is disabled
                 
00045a 940e 2527 	call DisableEscCalibration
                 
00045c b103      	load t, pinb			;read buttons. Will not use 'GetButtons' here because of delay
00045d 9500      	com t
00045e 9502      	swap t
00045f 700f      	andi t, 0x0F			;any button pressed?
000460 f089      	breq cm2
                 
000461 940e 2431 	call EscThrottleCalibration	;yes, do calibration
000463 c00e      	rjmp cm2
                 
                 
                 	;--- Misc. ---
                 
000464 ef0f
000465 9300 0796 cm5:	rvsetflagtrue Mode		;will prevent buttons held down during start-up from opening the menu or changing user profile
                 
                 
                 	;--- Reset LCD contrast when button #1 is held down ---
                 
000467 940e 4eaf 	call GetButtons
000469 3008      	cpi t, 0x08
00046a f411      	brne cm15
                 
00046b 940e 5719 	call SetDefaultLcdContrast
                 
                 
                 	;--- Display the Error Log setup screen when button #4 is held down ---
                 
00046d 3001      cm15:	cpi t, 0x01
00046e f419      	brne cm2
                 
00046f ef0f
000470 9300 0779 	rvsetflagtrue flagErrorLogSetup
                 
                 
                 	;--- Flight loop init ---
                 
000472 940e 2d19 cm2:	call FlightInit
                 
                 	;       76543210		;clear pending OCR1A and B interrupt
000474 e006      	ldi t,0b00000110
000475 bb06      	store tifr1, t
                 
                 
                 	;--- Flight loop ---
                 
000476 940e 3ed5 cm1:	call PwmStart			;runtime between PwmStart and B interrupt (in PwmEnd) must not exeed 1.5ms
000478 940e 0655 	call GetCppmChannels
00047a 940e 0768 	call CheckCppmRx
00047c 940e 2c29 	call Arming
00047e 940e 1f8a 	call Logic
000480 940e 2171 	call AddAuxStickScaling
                 #ifdef IN_FLIGHT_TUNING
                 #endif
000482 940e 36df 	call Imu
000484 940e 35ab 	call Mixer
000486 940e 116c 	call GimbalStab
000488 940e 1cb4 	call Beeper
00048a 940e 1e7e 	call Lva
00048c 940e 3f3b 	call PwmEnd
                 
00048e 9000 0770
000490 9010 0771
000492 2401
000493 9200 0793 	rvflageor flagA, flagArmed, flagArmedOldState	;flagA == true if flagArmed changes state
000495 9100 0793
000497 2300
000498 f432      	rvbrflagfalse flagA, cm11
                 
000499 940e 1f57 	call CheckLvaSetting
                 
00049b 9100 0770 	lds t, flagArmed
00049d 9300 0771 	sts flagArmedOldState, t
                 
00049f 9100 0778
0004a1 2300
0004a2 f42a      cm11:	rvbrflagfalse flagLcdUpdate, cm3;update LCD once if flagLcdUpdate is true
                 
0004a3 2700
0004a4 9300 0778 	rvsetflagfalse flagLcdUpdate
0004a6 940e 294a 	call UpdateFlightDisplay
                 
0004a8 9100 0770
0004aa 2300
0004ab f40a      cm3:	rvbrflagfalse flagArmed, cm7	;skip buttonreading if armed
0004ac cfc9      	rjmp cm1
                 
0004ad b103      cm7:	load t, pinb			;read buttons
0004ae 9500      	com t
0004af 9502      	swap t
0004b0 700f      	andi t, 0x0F			;any button pushed?
0004b1 f439      	brne cm4
                 
0004b2 2700
0004b3 9300 0796 	rvsetflagfalse Mode		;no, reset Mode and ButtonDelay, and then go to start of the loop
                 
0004b5 e000
0004b6 9300 0790 cm8:	lrv ButtonDelay, 0
0004b8 cfbd      	rjmp cm1	
                 
0004b9 9100 0790
0004bb 9503
0004bc 9300 0790 cm4:	rvinc ButtonDelay		;yes, ButtonDelay++
0004be 9100 0790
0004c0 3302      	rvcpi ButtonDelay, 50		;ButtonDelay == 50?
0004c1 f009      	breq cm6			;yes, re-check button
0004c2 cfb3      	rjmp cm1			;no, go to start of the loop	
                 
0004c3 9100 0796
0004c5 2300
0004c6 f372      cm6:	rvbrflagtrue Mode, cm8		;abort if the button hasn't been released since start-up
                 
                 ;	         76543210		;disable OCR1A and B interrupt
0004c7 e000      	ldi t, 0b00000000
0004c8 9300 006f 	store timsk1, t
                 
0004ca 940e 4eaf 	call GetButtons			;re-check the button and abort if it was released too soon
0004cc 700f      	andi t, 0x0F
0004cd f339      	breq cm8
                 
0004ce 3001      	cpi t, 0x01
0004cf f029      	breq cm9
                 
0004d0 3008      	cpi t, 0x08
0004d1 f061      	breq cm13
                 
                 
                 	;--- User profile ---
                 
0004d2 940e 181d 	call ChangeUserProfile
0004d4 cf9d      	rjmp cm2
                 
                 
                 cm9:	;--- Error log ---
                 
0004d5 940e 1dd3 	call Beep
0004d7 940e 158a 	call ClearLoggedError		;clear logged error when the ERROR LOG screen is displayed
0004d9 f448      	brcc cm12
                 
0004da ef0f
0004db 9300 0796 cm14:	rvsetflagtrue Mode		;will wait for the button to be released
0004dd cf94      	rjmp cm2
                 
0004de 940e 1dd3 cm13:	call Beep
0004e0 940e 15a1 	call ToggleErrorLogState	;toggle error logging state when the setup screen is displayed
0004e2 cff7      	rjmp cm14
                 
                 
                 cm12:	;--- Menu ---
                 
0004e3 9829      	BuzzerOff			;will prevent constant beeping in menu when 'Button Beep' is disabled
0004e4 982a      	cbi LvaOutputPin		;will avoid constant high level on external LVA output pin
0004e5 940e 1831 	call StartLedSeq		;the LED flashing sequence will indicate current user profile selection
0004e7 940e 4112 	call StartPwmQuiet
0004e9 940e 0529 	call CppmMainMenu
0004eb 940e 4126 	call StopPwmQuiet
0004ed 940e 1847 	call StopLedSeq
0004ef cf82      	rjmp cm2
                 
                 .include "cppm_hwsetup.asm"
                 
                 SetupHardwareForCppm:
                 
                 	;       76543210	;set port directions
0004f0 e302      	ldi t,0b00110010	// output5, output6
0004f1 b901      	out ddra,t
                 
                 	;       76543210
0004f2 e00e      	ldi t,0b00001110
                 //	ldi t,0b00001111	// DEBUGGING
0004f3 b904      	out ddrb,t
                 
                 	;       76543210
                 //	ldi t,0b11111111
0004f4 ef0c      	ldi t,0b11111100	// scl, sda, output 1-8
0004f5 b907      	out ddrc,t
                 
                 	;       76543210
0004f6 ef02      	ldi t,0b11110010
0004f7 b90a      	out ddrd,t
                 
                 	;       76543210
0004f8 ef0f      	ldi t,0b11111111	;turn off digital inputs on port A
0004f9 9300 007e 	store didr0,t
                 
                 	;       76543210
0004fb ef01      	ldi t,0b11110001	;turn on pull ups on button inputs and aux pin
0004fc b905      	out portb,t
                 
                 	;       76543210
0004fd e003      	ldi t,0b00000011	;turn on pull-ups TWI pins
0004fe b908      	out portc,t
                 
                 	;       76543210
0004ff e00d      	ldi t,0b00001101	;turn on pull ups on thr, ele and ail
000500 b90b      	out portd ,t
                 
                 	;       76543210
000501 e000      	ldi t,0b00000000	;set timer 1 to run at 2.5MHz
000502 9300 0080 	store tccr1a, t
                 
                 	;       76543210
000504 e002      	ldi t,0b00000010	
000505 9300 0081 	store tccr1b, t
                 
                 	;       76543210
000507 e000      	ldi t,0b00000000	
000508 9300 0082 	store tccr1c, t
                 
                 	;       76543210
00050a e008      	ldi t,0b00001000	;CPPM input on throttle pin
00050b 9300 0068 	store pcicr, t
                 
                 	;       76543210
00050d e001      	ldi t,0b00000001
00050e 9300 0073 	store pcmsk3, t
                 
                 
                 
                 	;--- Init TWI ---
                 
000510 9100 00b9 	lds t, TWSR
000512 7f0c      	andi t, 0b11111100	;initialize TWI prescaler set to 4^0 = 1
000513 9300 00b9 	sts TWSR, t
                 
000515 e101      	ldi t, 17 
000516 9300 00b8 	sts TWBR, t		;TWBR = ((20000000L / 400000L) - 16) / 2 = 17 for 400kHz clk rate
                 
                 
                 
                 	;--- Setup LCD --- 
                 
000518 9a5d      	sbi lcd_cs1		;LCD signals
000519 9a5c      	sbi lcd_scl
00051a 985e      	cbi lcd_res
                 
00051b 9a2b      	LedOn			;I'm alive
00051c 9a29      	BuzzerOn
00051d efa4
00051e e0b1      	ldx 500
00051f 940e 4e9c 	call WaitXms
000521 982b      	LedOff
000522 9829      	BuzzerOff
                 
000523 9a5e      	sbi lcd_res
                 
000524 e6a4
000525 e0b0      	ldx 100
000526 940e 4e9c 	call WaitXms
                 
                 	
                 
                 	;---
                 
000528 9508      	ret
                 
                 .include "cppm_mainmenu.asm"
                 
                 
                 CppmMainMenu:
                 
000529 e9ca
00052a e0da      cmm23:	ldy cmm1 * 2
                 
00052b 91a0 0746 	lds xl, MainMenuListYposSave
00052d 91b0 0745 	lds xh, MainMenuCursorYposSave
                 
00052f e102      	ldi t, 18		;number of menu items
                 #ifndef IN_FLIGHT_TUNING
000530 950a        dec t
                 #endif
                 
000531 940e 1de9 	call Menu
                 
000533 93c0 0746 	sts MainMenuListYposSave, yl
000535 93d0 0745 	sts MainMenuCursorYposSave, yh
                 
000537 f008      	brcs cmm22		;BACK pressed?
000538 9508      	ret			;Yes, return
                 	
000539 0faa      cmm22:	lsl xl			;No, calculate index    Z = *cmm18 * 2 + xl * 2
00053a eeee
00053b e0fb      	ldz cmm18 * 2
00053c 0fea      	add zl, xl
00053d 2700      	clr t
00053e 1ff0      	adc zh, t
                 
00053f 91a5      	lpm xl, z+		;x = (Z)
000540 91b4      	lpm xh, z
                 	
000541 01fd      	movw z, x		;z = x
                 	
000542 9509      	icall			;go to choosen menu item code  (sound like an apple product!  lawlz)
                 
000543 940e 1dd3 	call Beep
                 
000545 940e 4d70 	call LcdClear		;blank screen
000547 940e 4d2c 	call LcdUpdate	
                 
000549 940e 4ecd 	call ReleaseButtons
                 	
00054b 940c 0529 	jmp cmm23
                 
                 
                 
                 
                 cmm1:	
                 #ifdef IN_FLIGHT_TUNING
                 #endif
00054d 4950
00054e 4520
00054f 6964
000550 6f74
000551 2072
000552 2020
000553 2020
000554 2020
000555 2020
000556 2020      	.db "PI Editor           "
000557 6553
000558 666c
000559 6c2d
00055a 7665
00055b 6c65
00055c 5320
00055d 7465
00055e 6974
00055f 676e
000560 2073      	.db "Self-level Settings "
000561 7453
000562 6369
000563 206b
000564 6353
000565 6c61
000566 6e69
000567 2067
000568 2020
000569 2020
00056a 2020      	.db "Stick Scaling       "
00056b 6f4d
00056c 6564
00056d 5320
00056e 7465
00056f 6974
000570 676e
000571 2073
000572 2020
000573 2020
000574 2020      	.db "Mode Settings       "
000575 694d
000576 6373
000577 202e
000578 6553
000579 7474
00057a 6e69
00057b 7367
00057c 2020
00057d 2020
00057e 2020      	.db "Misc. Settings      "
00057f 6947
000580 626d
000581 6c61
000582 5320
000583 7465
000584 6974
000585 676e
000586 2073
000587 2020
000588 2020      	.db "Gimbal Settings     "
000589 6441
00058a 6176
00058b 636e
00058c 6465
00058d 5320
00058e 7465
00058f 6974
000590 676e
000591 2073
000592 2020      	.db "Advanced Settings   "
000593 5541
000594 2058
000595 7753
000596 7469
000597 6863
000598 5320
000599 7465
00059a 7075
00059b 2020
00059c 2020      	.db "AUX Switch Setup    "
00059d 6e49
00059e 7469
00059f 6169
0005a0 206c
0005a1 6553
0005a2 7574
0005a3 2070
0005a4 2020
0005a5 2020
0005a6 2020      	.db "Initial Setup       "
0005a7 6552
0005a8 6563
0005a9 7669
0005aa 7265
0005ab 5420
0005ac 7365
0005ad 2074
0005ae 2020
0005af 2020
0005b0 2020      	.db "Receiver Test       "
0005b1 6553
0005b2 736e
0005b3 726f
0005b4 5420
0005b5 7365
0005b6 2074
0005b7 2020
0005b8 2020
0005b9 2020
0005ba 2020      	.db "Sensor Test         "
0005bb 6853
0005bc 776f
0005bd 4d20
0005be 746f
0005bf 726f
0005c0 4c20
0005c1 7961
0005c2 756f
0005c3 2074
0005c4 2020      	.db "Show Motor Layout   "
0005c5 7355
0005c6 7265
0005c7 5020
0005c8 6f72
0005c9 6966
0005ca 656c
0005cb 2020
0005cc 2020
0005cd 2020
0005ce 2020      	.db "User Profile        "
0005cf 7845
0005d0 7274
0005d1 2061
0005d2 6546
0005d3 7461
0005d4 7275
0005d5 7365
0005d6 2020
0005d7 2020
0005d8 2020      	.db "Extra Features      "
0005d9 5345
0005da 2043
0005db 6143
0005dc 696c
0005dd 7262
0005de 7461
0005df 6f69
0005e0 206e
0005e1 2020
0005e2 2020      	.db "ESC Calibration     "
0005e3 6556
0005e4 7372
0005e5 6f69
0005e6 206e
0005e7 6e49
0005e8 6f66
0005e9 6d72
0005ea 7461
0005eb 6f69
0005ec 206e      	.db "Version Information "
0005ed 434c
0005ee 2044
0005ef 6f43
0005f0 746e
0005f1 6172
0005f2 7473
0005f3 2020
0005f4 2020
0005f5 2020
0005f6 2020      	.db "LCD Contrast        "
                 
                 
                 cmm18:	
                 #ifdef IN_FLIGHT_TUNING
                 #endif
0005f7 32fc      	.dw PiEditor
0005f8 58f3      	.dw SelflevelSettings
0005f9 5938      	.dw StickScaling
0005fa 5869      	.dw ModeSettings
0005fb 597d      	.dw MiscSettings
0005fc 1035      	.dw GimbalSettings
0005fd 5784      	.dw AdvancedSettings
0005fe 2048      	.dw AuxSwitchSetup
0005ff 5ae6      	.dw InitialSetup
000600 416e      	.dw RxTest
000601 468d      	.dw SensorTest
000602 5a07      	.dw MotorLayout
000603 16da      	.dw UserProfileSetup
000604 5824      	.dw ExtraFeatures
000605 5692      	.dw EscCalWarning
000606 571b      	.dw ShowVersion
000607 57c9      	.dw Contrast
                 
                 
                 .include "cppm_readrx.asm"
                 
                 
                 
                 	;--- CPPM ISR ---
                 
                 IsrCppm:
                 
                 ;	in SregSaver, sreg		;see readrx.asm
                 
000608 93af      	push xl
000609 93bf      	push xh
00060a 93ef      	push zl
00060b 93ff      	push zh
                 
00060c 91a0 0084 	lds xl, tcnt1l			;calculate pulse length: X = TCNT1 - CppmPulseStart, CppmPulseStart = TCNT1
00060e 91b0 0085 	lds xh, tcnt1h
000610 91e0 07ac 	lds zl, CppmPulseStartL
000612 91f0 07ad 	lds zh, CppmPulseStartH
000614 93a0 07ac 	sts CppmPulseStartL, xl
000616 93b0 07ad 	sts CppmPulseStartH, xh
000618 1bae      	sub xl, zl
000619 0bbf      	sbc xh, zh
00061a f42a      	brpl cppm8
                 
00061b e0e0
00061c e0f0      	ldz 0				;X = ABS(X)
00061d 1bea      	sub zl, xl
00061e 0bfb      	sbc zh, xh
00061f 01df      	movw x, z
                 
000620 e6ea
000621 e1f8      cppm8:	ldz 6250			;pulse longer than 2.5ms?
000622 17ae      	cp  xl, zl
000623 07bf      	cpc xh, zh
000624 f090      	brlo cppm9
                 
000625 ebe0
000626 e0f7      	ldz Channel1L			;yes, reset cppm sequence
                 
000627 9190 07ab 	lds tt, CppmChannelCount	;CPPM pulse train is considered valid when minimum 4 channels have been detected
000629 24ee      	clr treg
00062a 92e0 07ab 	sts CppmChannelCount, treg
00062c 9390 07a9 	sts ChannelCount, tt
00062e 3094      	cpi tt, 4
00062f f40c      	brge cppm6
                 
000630 c019      	rjmp cppm10			;invalid CPPM frame
                 
000631 ef9f      cppm6:	ser tt				;set flag to indicate that a valid CPPM pulse train has been received
000632 9390 07db 	sts RxFrameValid, tt
                 
000634 92e0 07a8 	sts TimeoutCounter, treg	;reset timeout counter
000636 c013      	rjmp cppm10
                 
000637 9190 07ab cppm9:	lds tt, CppmChannelCount	;count channels
000639 9593      	inc tt
00063a 9390 07ab 	sts CppmChannelCount, tt
                 
00063c 91e0 07ae cppm11:	lds zl, CppmPulseArrayAddressL	;store channel in channel array.
00063e 91f0 07af 	lds zh, CppmPulseArrayAddressH
                 
000640 93a1      	st z+, xl
000641 93b1      	st z+, xh
                 
000642 eca0
000643 e0b7      	ldx Channel9L			;end of array reached?
000644 17ea      	cp  zl, xl
000645 07fb      	cpc zh, xh
000646 f018      	brlo cppm10
000647 f011      	breq cppm10
                 
000648 ece0
000649 e0f7      	ldz Channel9L			;yes, limit
                 
00064a 93e0 07ae cppm10:	sts CppmPulseArrayAddressL, zl	;store array pointer
00064c 93f0 07af 	sts CppmPulseArrayAddressH, zh
                 
00064e 91ff      	pop zh
00064f 91ef      	pop zl
000650 91bf      	pop xh
000651 91af      	pop xl
                 
000652 919f        pop tt
000653 beff      	out sreg, SregSaver		;exit	
000654 9518      	reti
                 
                 
                 
                 	;--- Read all input channel values ---
                 
                 GetCppmChannels:
                 
                 
                 	;--- Roll ---
                 
000655 9000 07c2 	lds r0, MappedChannel1		;get roll channel value
000657 940e 4567 	call GetSafeChannelValue
000659 940e 4572 	call Sanitize
00065b 940e 458e 	call DeadZone
                 
00065d 27dd      	clr yh
00065e 93b0 054c
000660 93a0 054d
000662 93d0 054e 	b16store RxRoll
000664 940e 45a0 	call IsChannelCentered
000666 93c0 0774 	sts flagAileronCentered, yl
                 
                 	
                 	;--- Pitch ---
                 
000668 9000 07c3 	lds r0, MappedChannel2		;get pitch channel value
00066a 940e 4567 	call GetSafeChannelValue
00066c 940e 4572 	call Sanitize
00066e 940e 458e 	call DeadZone
                 
000670 27dd      	clr yh
000671 93b0 054f
000673 93a0 0550
000675 93d0 0551 	b16store RxPitch
000677 940e 45a0 	call IsChannelCentered
000679 93c0 0775 	sts flagElevatorCentered, yl
                 
                 
                 	;--- Throttle ---
                 
00067b 9000 07c4 	lds r0, MappedChannel3		;get throttle channel value
00067d 940e 4567 	call GetSafeChannelValue
                 
00067f 2700
000680 9300 0773 	rvsetflagfalse flagThrottleZero
                 
000682 940e 4585 	call Xabs			;X = ABS(X)
                 
000684 e3eb
000685 e0fb      	ldz 2875			;X = X - 2875 (1.15ms)
000686 1bae      	sub xl, zl
000687 0bbf      	sbc xh, zh
                 
000688 e0e0
000689 e0f0      	ldz 0				;X < 0 ?
00068a 17ae      	cp  xl, zl
00068b 07bf      	cpc xh, zh
00068c f40c      	brge gcc8
                 
00068d c005      	rjmp gcc30			;yes, set to zero
                 
00068e e3e5
00068f e0fc      gcc8:	ldz 3125			;X > 3125? (1.25ms)
000690 17ae      	cp  xl, zl
000691 07bf      	cpc xh, zh
000692 f02c      	brlt gcc2
                 
000693 e0a0
000694 e0b0      gcc30:	ldx 0				;yes, set to zero
000695 ef0f
000696 9300 0773 	rvsetflagtrue flagThrottleZero
                 
000698 27dd      gcc2:	clr yh
000699 93b0 0552
00069b 93a0 0553
00069d 93d0 0554 	b16store RxThrottle
                 
                 
                 	;--- Yaw ---
                 
00069f 9000 07c5 	lds r0, MappedChannel4		;get yaw channel value
0006a1 940e 4567 	call GetSafeChannelValue
0006a3 940e 4572 	call Sanitize
0006a5 940e 458e 	call DeadZone
                 
0006a7 27dd      	clr yh
0006a8 93b0 0555
0006aa 93a0 0556
0006ac 93d0 0557 	b16store RxYaw
                 
                 	
                 	;--- AUX ---
                 
0006ae 9000 07c6 	lds r0, MappedChannel5		;get aux channel value
0006b0 940e 4567 	call GetSafeChannelValue
0006b2 940e 4572 	call Sanitize
                 
0006b4 27cc      	clr yl				;AUX switch position #1
0006b5 eae8
0006b6 effd      	ldz -600
0006b7 17ae      	cp  xl, zl
0006b8 07bf      	cpc xh, zh
0006b9 f09c      	brlt gcc35
                 
0006ba 95c3      	inc yl				;AUX switch position #2
0006bb e3e8
0006bc efff      	ldz -200
0006bd 17ae      	cp  xl, zl
0006be 07bf      	cpc xh, zh
0006bf f06c      	brlt gcc35
                 
0006c0 95c3      	inc yl				;AUX switch position #3
0006c1 ece8
0006c2 e0f0      	ldz 200
0006c3 17ae      	cp  xl, zl
0006c4 07bf      	cpc xh, zh
0006c5 f03c      	brlt gcc35
                 
0006c6 95c3      	inc yl				;AUX switch position #4
0006c7 e5e8
0006c8 e0f2      	ldz 600
0006c9 17ae      	cp  xl, zl
0006ca 07bf      	cpc xh, zh
0006cb f00c      	brlt gcc35
                 
0006cc 95c3      	inc yl				;AUX switch position #5
                 
0006cd 93c0 0781 gcc35:	sts AuxSwitchPosition, yl
                 
0006cf 27dd      	clr yh
0006d0 93b0 0558
0006d2 93a0 0559
0006d4 93d0 055a 	b16store RxAux
                 
                 
                 	;--- AUX2 ---
                 
0006d6 9000 07c7 	lds r0, MappedChannel6		;get aux2 channel value
0006d8 940e 4567 	call GetSafeChannelValue
0006da 940e 4572 	call Sanitize
                 
0006dc 27dd      	clr yh
0006dd 93b0 055b
0006df 93a0 055c
0006e1 93d0 055d 	b16store RxAux2
                 
                 
                 	;--- AUX3 ---
                 
0006e3 9000 07c8 	lds r0, MappedChannel7		;get aux3 channel value
0006e5 940e 4567 	call GetSafeChannelValue
0006e7 940e 4572 	call Sanitize
                 
0006e9 27dd      	clr yh
0006ea 93b0 055e
0006ec 93a0 055f
0006ee 93d0 0560 	b16store RxAux3
                 
                 
                 	;--- AUX4 ---
                 
0006f0 9000 07c9 	lds r0, MappedChannel8		;get aux4 channel value
0006f2 940e 4567 	call GetSafeChannelValue
0006f4 940e 4572 	call Sanitize
                 
0006f6 27cc      	clr yl				;AUX4 switch position #1
0006f7 e7e0
0006f8 effe      	ldz -400
0006f9 17ae      	cp  xl, zl
0006fa 07bf      	cpc xh, zh
0006fb f03c      	brlt gcc38
                 
0006fc 95c3      	inc yl				;AUX4 switch position #2
0006fd e9e0
0006fe e0f1      	ldz 400
0006ff 17ae      	cp  xl, zl
000700 07bf      	cpc xh, zh
000701 f00c      	brlt gcc38
                 
000702 95c3      	inc yl				;AUX4 switch position #3
                 
000703 93c0 078e gcc38:	sts Aux4SwitchPosition, yl
                 
000705 27dd      	clr yh
000706 93b0 0561
000708 93a0 0562
00070a 93d0 0563 	b16store RxAux4
                 
                 
                 	;--- Check RX ---
                 
00070c 9100 07db
00070e 2300
00070f f522      	rvbrflagfalse RxFrameValid, gcc24
000710 c010      	rjmp gcc22
                 
000711 9300 07a8 gcc23:	sts TimeoutCounter, t
000713 9100 0770
000715 2300
000716 f44a      	rvbrflagfalse flagArmed, gcc21
                 
000717 9100 07a9 	lds t, ChannelCount		;CPPM sync lost while armed?
000719 91a0 07aa 	lds xl, ChannelCountArmed
00071b 170a      	cp t, xl
00071c f019      	breq gcc21
                 
00071d e0a4      	ldi xl, 4			;yes
00071e 940e 1573 	call LogError
                 
000720 9508      gcc21:	ret
                 
000721 9100 07a8 gcc22:	lds t, TimeoutCounter		;timeout?
000723 9503      	inc t
000724 91a0 0767 	lds xl, RxTimeoutLimit
000726 170a      	cp t, xl
000727 f348      	brlo gcc23
                 
000728 9100 0770
00072a 2300
00072b f442      	rvbrflagfalse flagArmed, gcc24	;yes
                 
00072c 9100 079d
00072e 6003
00072f 9300 079d 	setstatusbit RxSignalLost	;set status bit for "Signal Lost" and activate the Lost Model alarm only when armed
000731 ef0f
000732 9300 077e 	rvsetflagtrue flagAlarmOverride
                 
000734 940c 0bb6 gcc24:	jmp ClearInputChannels		;will tag the received frame as invalid and clear all input channels
                 
                 
                 
                 	;--- Scale AUX inputs (divide by 10) ---
                 
                 ScaleAuxInputValues:
                 
000736 e000
000737 9300 0540
000739 e000
00073a 9300 0541
00073c e109
00073d 9300 0542 	b16ldi Temp, 0.1
00073f 9110 055b
000741 9120 055c
000743 9130 055d
000745 9140 0540
000747 9150 0541
000749 9160 0542
00074b 940e 4f3a
00074d 9370 055b
00074f 9380 055c
000751 9220 055d 	b16mul RxAux2, RxAux2, Temp
000753 9110 055e
000755 9120 055f
000757 9130 0560
000759 9140 0540
00075b 9150 0541
00075d 9160 0542
00075f 940e 4f3a
000761 9370 055e
000763 9380 055f
000765 9220 0560 	b16mul RxAux3, RxAux3, Temp
000767 9508      	ret
                 
                 
                 
                 .include "cppm_checkrx.asm"
                 
                 
                 CheckCppmRx:
                 
000768 9100 07db 	lds t, RxFrameValid			;set/clear RX error
00076a 9500      	com t
00076b 7100      	andi t, NoCppmInput
00076c 91a0 079d 	lds xl, StatusBits
00076e 7eaf      	cbr xl, NoCppmInput
00076f 2b0a      	or t, xl
000770 9300 079d 	sts StatusBits, t
000772 9508      	ret
                 
                 
                 
000773 4f4e
000774 5320
000775 4749
000776 414e
000777 004c      ncs1:	.db "NO SIGNAL", 0
000778 6c50
000779 6165
00077a 6573
00077b 7320
00077c 7075
00077d 6c70
00077e 2079
00077f 2061
000780 5043
000781 4d50
000782 0000      ncs2:	.db "Please supply a CPPM", 0, 0
000783 5028
000784 4d50
000785 2029
000786 6973
000787 6e67
000788 6c61
000789 7420
00078a 206f
00078b 6874
00078c 0065      ncs3:	.db "(PPM) signal to the", 0
00078d 6874
00078e 6f72
00078f 7474
000790 656c
000791 6920
000792 706e
000793 7475
000794 7020
000795 6e69
000796 002e      ncs4:	.db "throttle input pin.", 0
                 
000797 0ef0
000798 0f06
000799 0f1a      ncs8:	.dw ncs2*2, ncs3*2, ncs4*2
                 
                 
                 
                 	;--- No CPPM input signal ---
                 
                 ShowNoCppmSignalDlg:
                 
00079a 940e 4d8f 	call LcdClear12x16
                 
00079c e00a
00079d 9300 073f 	lrv X1, 10			;header
00079f eee6
0007a0 e0fe      	ldz ncs1*2
0007a1 940e 4b90 	call PrintHeader
                 
0007a3 e003      	ldi t, 3			;print "Please supply a CPPM (PPM) signal to the throttle input pin."
0007a4 e2ee
0007a5 e0ff      	ldz ncs8*2
0007a6 940e 4c18 	call PrintStringArray
                 
                 	;footer
0007a8 940e 4bdb 	call PrintBackFooter
                 
0007aa 940e 4d2c 	call LcdUpdate
                 
0007ac 940e 4ed1 ncs10:	call GetButtonsBlocking
0007ae 3008      	cpi t, 0x08			;BACK?
0007af f7e1      	brne ncs10
                 
0007b0 9508      	ret
                 
                 
                 .include "sbus_main.asm"
                 
                 	;--- Specialized setup and main routine for Futaba S.Bus receivers ---
                 
                 SBusMain:
                 
0007b1 e6a4
0007b2 e0b0      	ldx 100
0007b3 940e 4e9c 	call WaitXms
                 
0007b5 940e 08bf 	call SetupHardwareForSBus
                 
                 
                 	;--- Initialize LCD ---
                 
                 	;call LoadLcdContrast; Not needed, called in main.c
0007b7 940e 4d2c 	call LcdUpdate
0007b9 940e 4d70 	call LcdClear
0007bb 940e 4d2c 	call LcdUpdate
                 
                 
                 	;--- Variables init ---
                 
0007bd 940e 255c 	call EeInit
                 
0007bf e000
0007c0 9300 0745 	lrv MainMenuCursorYposSave, 0
0007c2 e000
0007c3 9300 0746 	lrv MainMenuListYposSave, 0
                 
0007c5 e000
0007c6 9300 0747 	lrv LoadMenuCursorYposSave, 0
0007c8 e000
0007c9 9300 0748 	lrv LoadMenuListYposSave, 0
                 
0007cb e003
0007cc 9300 0597
0007ce ef0f
0007cf 9300 0598
0007d1 e000
0007d2 9300 0599 	b16ldi BatteryVoltageLogged, 1023
                 
0007d4 e001
0007d5 9300 069c
0007d7 e80e
0007d8 9300 069d
0007da e000
0007db 9300 069e 	b16ldi FlightTimer, 398		;tuned for better accuracy (1 second)
                 
0007dd 2700      	clr t
0007de 9300 07a4 	sts Timer1sec, t
0007e0 9300 07a5 	sts Timer1min, t
                 
0007e2 9300 07a6 	sts TuningMode, t
                 
0007e4 9300 076e 	sts flagPwmGen, t
                 
0007e6 9300 0779 	sts flagErrorLogSetup, t
                 
0007e8 9300 0776 	sts FlashingLEDCounter, t
                 
0007ea eaaf      	ldi xl, AuxCounterInit
0007eb 93a0 0780 	sts AuxCounter, xl
0007ed e0a2      	ldi xl, 2
0007ee 93a0 0781 	sts AuxSwitchPosition, xl
0007f0 e0a1      	ldi xl, 1
0007f1 93a0 078e 	sts Aux4SwitchPosition, xl
0007f3 93a0 0783 	sts AuxFunctionOld, xl
                 
0007f5 9300 0774 	sts flagAileronCentered, t	;set to false
0007f7 9300 0775 	sts flagElevatorCentered, t
                 
0007f9 e1a9      	ldi xl, 25
0007fa 93a0 07dc 	sts RxFrameLength, xl
                 
0007fc 9300 07db 	sts RxFrameValid, t
0007fe 9300 07a8 	sts TimeoutCounter, t
                 
000800 9300 07d6 	sts Channel17, t
000802 9300 07d7 	sts Channel18, t
000804 9300 07d8 	sts Failsafe, t
                 
000806 9300 07f8 	sts RxBufferIndex, t
000808 9300 07f9 	sts RxBufferIndexOld, t
00080a 9300 07fa 	sts RxBufferState, t
00080c 9300 07dd 	sts RxBuffer0, t
00080e eded
00080f e0f7      	ldz RxBuffer0
000810 93e0 07f6 	sts RxBufferAddressL, zl
000812 93f0 07f7 	sts RxBufferAddressH, zh
                 
000814 e100      	ldi t, NoSBusInput
000815 9300 079d 	sts StatusBits, t
                 
000817 940e 4ac1 	call setup_mpu6050
                 
000819 940e 2856 	call GyroCal
                 
                 #ifdef STANDALONE_GIMBAL_CONTROLLER
                 #endif
                 
                 
                 bm10:	;--- ESC calibration ----
                 
00081b 9478      	sei				;global interrupts must be enabled here for PWM output in EscThrottleCalibration
                 
00081c e7e4
00081d e0f0      	ldz eeEscCalibration		;check ESC calibration setting
00081e 940e 4f15 	call ReadEeprom
000820 2300      	tst t
000821 f051      	breq bm5			;jump if ESC calibration is disabled
                 
000822 940e 2527 	call DisableEscCalibration
                 
000824 b103      	load t, pinb			;read buttons. Will not use 'GetButtons' here because of delay
000825 9500      	com t
000826 9502      	swap t
000827 700f      	andi t, 0x0F			;any button pressed?
000828 f089      	breq bm2
                 
000829 940e 2431 	call EscThrottleCalibration	;yes, do calibration
00082b c00e      	rjmp bm2
                 
                 
                 	;--- Misc. ---
                 
00082c ef0f
00082d 9300 0796 bm5:	rvsetflagtrue Mode		;will prevent buttons held down during start-up from opening the menu or changing user profile
                 
                 
                 	;--- Reset LCD contrast when button #1 is held down ---
                 
00082f 940e 4eaf 	call GetButtons
000831 3008      	cpi t, 0x08
000832 f411      	brne bm15
                 
000833 940e 5719 	call SetDefaultLcdContrast
                 
                 
                 	;--- Display the Error Log setup screen when button #4 is held down ---
                 
000835 3001      bm15:	cpi t, 0x01
000836 f419      	brne bm2
                 
000837 ef0f
000838 9300 0779 	rvsetflagtrue flagErrorLogSetup
                 
                 
                 	;--- Flight loop init ---
                 
00083a 940e 2d19 bm2:	call FlightInit
                 
00083c 9100 079d 	lds t, StatusBits		;clear the failsafe flag
00083e 7d0f      	cbr t, SBusFailsafe
00083f 9300 079d 	sts StatusBits, t
                 
                 	;       76543210		;clear pending OCR1A and B interrupt
000841 e006      	ldi t,0b00000110
000842 bb06      	store tifr1, t
                 
                 
                 	;--- Flight loop ---
                 
000843 940e 3ed5 bm1:	call PwmStart			;runtime between PwmStart and B interrupt (in PwmEnd) must not exeed 1.5ms
000845 940e 0a3c 	call GetSBusChannels
000847 940e 09f7 	call GetSBusFlags
000849 940e 0a2b 	call SBusFeatures
00084b 940e 2c29 	call Arming
00084d 940e 1f8a 	call Logic
00084f 940e 2171 	call AddAuxStickScaling
                 #ifdef IN_FLIGHT_TUNING
                 #endif
000851 940e 36df 	call Imu
000853 940e 35ab 	call Mixer
000855 940e 116c 	call GimbalStab
000857 940e 1cb4 	call Beeper
000859 940e 1e7e 	call Lva
00085b 940e 3f3b 	call PwmEnd
                 
00085d 9000 0770
00085f 9010 0771
000861 2401
000862 9200 0793 	rvflageor flagA, flagArmed, flagArmedOldState	;flagA == true if flagArmed changes state
000864 9100 0793
000866 2300
000867 f432      	rvbrflagfalse flagA, bm11
                 
000868 940e 1f57 	call CheckLvaSetting
                 
00086a 9100 0770 	lds t, flagArmed
00086c 9300 0771 	sts flagArmedOldState, t
                 
00086e 9100 0778
000870 2300
000871 f42a      bm11:	rvbrflagfalse flagLcdUpdate, bm3;update LCD once if flagLcdUpdate is true
                 
000872 2700
000873 9300 0778 	rvsetflagfalse flagLcdUpdate
000875 940e 294a 	call UpdateFlightDisplay
                 
000877 9100 0770
000879 2300
00087a f40a      bm3:	rvbrflagfalse flagArmed, bm7	;skip buttonreading if armed
00087b cfc7      	rjmp bm1
                 
00087c b103      bm7:	load t, pinb			;read buttons
00087d 9500      	com t
00087e 9502      	swap t
00087f 700f      	andi t, 0x0F			;any button pushed?
000880 f439      	brne bm4
                 
000881 2700
000882 9300 0796 	rvsetflagfalse Mode		;no, reset Mode and ButtonDelay, and then go to start of the loop
                 
000884 e000
000885 9300 0790 bm8:	lrv ButtonDelay, 0
000887 cfbb      	rjmp bm1	
                 
000888 9100 0790
00088a 9503
00088b 9300 0790 bm4:	rvinc ButtonDelay		;yes, ButtonDelay++
00088d 9100 0790
00088f 3302      	rvcpi ButtonDelay, 50		;ButtonDelay == 50?
000890 f009      	breq bm6			;yes, re-check button
000891 cfb1      	rjmp bm1			;no, go to start of the loop	
                 
000892 9100 0796
000894 2300
000895 f372      bm6:	rvbrflagtrue Mode, bm8		;abort if the button hasn't been released since start-up
                 
                 ;	         76543210		;disable OCR1A and B interrupt
000896 e000      	ldi t, 0b00000000
000897 9300 006f 	store timsk1, t
                 
000899 940e 4eaf 	call GetButtons			;re-check the button and abort if it was released too soon
00089b 700f      	andi t, 0x0F
00089c f339      	breq bm8
                 
00089d 3001      	cpi t, 0x01
00089e f029      	breq bm9
                 
00089f 3008      	cpi t, 0x08
0008a0 f061      	breq bm13
                 
                 
                 	;--- User profile ---
                 
0008a1 940e 181d 	call ChangeUserProfile
0008a3 cf96      	rjmp bm2
                 
                 
                 bm9:	;--- Error log ---
                 
0008a4 940e 1dd3 	call Beep
0008a6 940e 158a 	call ClearLoggedError		;clear logged error when the ERROR LOG screen is displayed
0008a8 f448      	brcc bm12
                 
0008a9 ef0f
0008aa 9300 0796 bm14:	rvsetflagtrue Mode		;will wait for the button to be released
0008ac cf8d      	rjmp bm2
                 
0008ad 940e 1dd3 bm13:	call Beep
0008af 940e 15a1 	call ToggleErrorLogState	;toggle error logging state when the setup screen is displayed
0008b1 cff7      	rjmp bm14
                 
                 
                 bm12:	;--- Menu ---
                 
0008b2 9829      	BuzzerOff			;will prevent constant beeping in menu when 'Button Beep' is disabled
0008b3 982a      	cbi LvaOutputPin		;will avoid constant high level on external LVA output pin
0008b4 940e 1831 	call StartLedSeq		;the LED flashing sequence will indicate current user profile selection
0008b6 940e 4112 	call StartPwmQuiet
0008b8 940e 090d 	call SBusMainMenu
0008ba 940e 4126 	call StopPwmQuiet
0008bc 940e 1847 	call StopLedSeq
0008be cf7b      	rjmp bm2
                 
                 .include "sbus_hwsetup.asm"
                 
                 SetupHardwareForSBus:
                 
                 	;       76543210	;set port directions
0008bf e302      	ldi t,0b00110010	// output5, output6
0008c0 b901      	out ddra,t
                 
                 	;       76543210
0008c1 e00f      	ldi t,0b00001111
0008c2 b904      	out ddrb,t
                 
                 	;       76543210
                 //	ldi t,0b11111111
0008c3 ef0c      	ldi t,0b11111100	// scl, sda, output 1-8
0008c4 b907      	out ddrc,t
                 
                 	;       76543210
0008c5 ef02      	ldi t,0b11110010
0008c6 b90a      	out ddrd,t
                 
                 	;       76543210
0008c7 ef0f      	ldi t,0b11111111	;turn off digital inputs on port A
0008c8 9300 007e 	store didr0,t
                 
                 	;       76543210
0008ca ef00      	ldi t,0b11110000	;turn on pull ups on button inputs
0008cb b905      	out portb,t
                 
                 	;       76543210
0008cc e003      	ldi t,0b00000011	;turn on pull ups SPI pin
0008cd b908      	out portc,t
                 
                 	;       76543210
0008ce e00d      	ldi t,0b00001101	;turn on pull ups on thr, ele and ail
0008cf b90b      	out portd ,t
                 
                 	;       76543210
0008d0 e000      	ldi t,0b00000000	;set timer 1 to run at 2.5MHz
0008d1 9300 0080 	store tccr1a, t
                 
                 	;       76543210
0008d3 e002      	ldi t,0b00000010	
0008d4 9300 0081 	store tccr1b, t
                 
                 	;       76543210
0008d6 e000      	ldi t,0b00000000	
0008d7 9300 0082 	store tccr1c, t
                 
                 
                 	;--- Setup USART0 for S.Bus communication ---
                 
0008d9 9100 00c0 usart1:	load t, ucsr0a		;make sure USART RX buffer is empty
0008db 7800      	andi t, 0x80
0008dc f019      	breq usart2
                 
0008dd 9100 00c6 	load t, udr0
0008df cff9      	rjmp usart1
                 
0008e0 e002      usart2:	ldi t, 0x02		;set the 2x flag (U2X0)
0008e1 9300 00c0 	store ucsr0a, t
                 
0008e3 2700      	clr t			;set baud rate registers for 100k baud. Baud = 20000000 / ( 8 * (UBRRn + 1))	Where U2X0 = 1
0008e4 9300 00c5 	store ubrr0h, t
                 
0008e6 e108      	ldi t, 0x18		;UBRRn = (fOSC / (8 * BAUD)) - 1 = (20000000 / 800000) - 1 = 24
0008e7 9300 00c4 	store ubrr0l, t
                 
0008e9 e100      	ldi t, 0x10		;enable receiver (RXEN0)
0008ea 9300 00c1 	store ucsr0b, t
                 
                 	;       76543210
0008ec e20e      	ldi t,0b00101110	;use asynchronous mode and 8E2 communication
0008ed 9300 00c2 	store ucsr0c, t
                 
0008ef 9100 00c1 	load t, ucsr0b		;enable USART RX Complete Interrupt (RXCIE0)
0008f1 6800      	ori t, 0x80
0008f2 9300 00c1 	store ucsr0b, t
                 
                 
                 
                 	;--- Init_TWI ---
                 
0008f4 9100 00b9 	lds t, TWSR
0008f6 7f0c      	andi t, 0b11111100	;initialize twi prescaler set to 4^0 = 1
0008f7 9300 00b9 	sts TWSR, t
                 
0008f9 e101      	ldi t, 17 
0008fa 9300 00b8 	sts TWBR, t		;TWBR = ((20000000L / 400000L) - 16) / 2 = 17 for 400kHz clk rate
                 
                 
                 
                 	;--- Setup LCD --- 
                 
0008fc 9a5d      	sbi lcd_cs1		;LCD signals
0008fd 9a5c      	sbi lcd_scl
0008fe 985e      	cbi lcd_res
                 
0008ff 9a2b      	LedOn			;I'm alive
000900 9a29      	BuzzerOn
000901 efa4
000902 e0b1      	ldx 500
000903 940e 4e9c 	call WaitXms
000905 982b      	LedOff
000906 9829      	BuzzerOff
                 
000907 9a5e      	sbi lcd_res
                 
000908 e6a4
000909 e0b0      	ldx 100
00090a 940e 4e9c 	call WaitXms
                 
                 	
                 
                 	;---
                 
00090c 9508      	ret
                 
                 .include "sbus_mainmenu.asm"
                 
                 
                 SBusMainMenu:
                 
00090d e6c2
00090e e1d2      smm23:	ldy smm1 * 2
                 
00090f 91a0 0746 	lds xl, MainMenuListYposSave
000911 91b0 0745 	lds xh, MainMenuCursorYposSave
                 
000913 e103      	ldi t, 19		;number of menu items
                 #ifndef IN_FLIGHT_TUNING
000914 950a        dec t
                 #endif
                 
000915 940e 1de9 	call Menu
                 
000917 93c0 0746 	sts MainMenuListYposSave, yl
000919 93d0 0745 	sts MainMenuCursorYposSave, yh
                 
00091b f008      	brcs smm22		;BACK pressed?
00091c 9508      	ret			;Yes, return
                 	
00091d 0faa      smm22:	lsl xl			;No, calculate index    Z = *smm18 * 2 + xl * 2
00091e ecea
00091f e1f3      	ldz smm18 * 2
000920 0fea      	add zl, xl
000921 2700      	clr t
000922 1ff0      	adc zh, t
                 
000923 91a5      	lpm xl, z+		;x = (Z)
000924 91b4      	lpm xh, z
                 	
000925 01fd      	movw z, x		;z = x
                 	
000926 9509      	icall			;go to choosen menu item code  (sound like an apple product!  lawlz)
                 
000927 940e 1dd3 	call Beep
                 
000929 940e 4d70 	call LcdClear		;blank screen
00092b 940e 4d2c 	call LcdUpdate	
                 
00092d 940e 4ecd 	call ReleaseButtons
                 	
00092f 940c 090d 	jmp smm23
                 
                 
                 
                 
                 smm1:	
                 #ifdef IN_FLIGHT_TUNING
                 #endif
000931 4950
000932 4520
000933 6964
000934 6f74
000935 2072
000936 2020
000937 2020
000938 2020
000939 2020
00093a 2020      	.db "PI Editor           "
00093b 6553
00093c 666c
00093d 6c2d
00093e 7665
00093f 6c65
000940 5320
000941 7465
000942 6974
000943 676e
000944 2073      	.db "Self-level Settings "
000945 7453
000946 6369
000947 206b
000948 6353
000949 6c61
00094a 6e69
00094b 2067
00094c 2020
00094d 2020
00094e 2020      	.db "Stick Scaling       "
00094f 6f4d
000950 6564
000951 5320
000952 7465
000953 6974
000954 676e
000955 2073
000956 2020
000957 2020
000958 2020      	.db "Mode Settings       "
000959 694d
00095a 6373
00095b 202e
00095c 6553
00095d 7474
00095e 6e69
00095f 7367
000960 2020
000961 2020
000962 2020      	.db "Misc. Settings      "
000963 6947
000964 626d
000965 6c61
000966 5320
000967 7465
000968 6974
000969 676e
00096a 2073
00096b 2020
00096c 2020      	.db "Gimbal Settings     "
00096d 6441
00096e 6176
00096f 636e
000970 6465
000971 5320
000972 7465
000973 6974
000974 676e
000975 2073
000976 2020      	.db "Advanced Settings   "
000977 5541
000978 2058
000979 7753
00097a 7469
00097b 6863
00097c 5320
00097d 7465
00097e 7075
00097f 2020
000980 2020      	.db "AUX Switch Setup    "
000981 4744
000982 2032
000983 7753
000984 7469
000985 6863
000986 5320
000987 7465
000988 7075
000989 2020
00098a 2020      	.db "DG2 Switch Setup    "
00098b 6e49
00098c 7469
00098d 6169
00098e 206c
00098f 6553
000990 7574
000991 2070
000992 2020
000993 2020
000994 2020      	.db "Initial Setup       "
000995 6552
000996 6563
000997 7669
000998 7265
000999 5420
00099a 7365
00099b 2074
00099c 2020
00099d 2020
00099e 2020      	.db "Receiver Test       "
00099f 6553
0009a0 736e
0009a1 726f
0009a2 5420
0009a3 7365
0009a4 2074
0009a5 2020
0009a6 2020
0009a7 2020
0009a8 2020      	.db "Sensor Test         "
0009a9 6853
0009aa 776f
0009ab 4d20
0009ac 746f
0009ad 726f
0009ae 4c20
0009af 7961
0009b0 756f
0009b1 2074
0009b2 2020      	.db "Show Motor Layout   "
0009b3 7355
0009b4 7265
0009b5 5020
0009b6 6f72
0009b7 6966
0009b8 656c
0009b9 2020
0009ba 2020
0009bb 2020
0009bc 2020      	.db "User Profile        "
0009bd 7845
0009be 7274
0009bf 2061
0009c0 6546
0009c1 7461
0009c2 7275
0009c3 7365
0009c4 2020
0009c5 2020
0009c6 2020      	.db "Extra Features      "
0009c7 5345
0009c8 2043
0009c9 6143
0009ca 696c
0009cb 7262
0009cc 7461
0009cd 6f69
0009ce 206e
0009cf 2020
0009d0 2020      	.db "ESC Calibration     "
0009d1 6556
0009d2 7372
0009d3 6f69
0009d4 206e
0009d5 6e49
0009d6 6f66
0009d7 6d72
0009d8 7461
0009d9 6f69
0009da 206e      	.db "Version Information "
0009db 434c
0009dc 2044
0009dd 6f43
0009de 746e
0009df 6172
0009e0 7473
0009e1 2020
0009e2 2020
0009e3 2020
0009e4 2020      	.db "LCD Contrast        "
                 
                 
                 smm18:
                 #ifdef IN_FLIGHT_TUNING
                 #endif
0009e5 32fc      	.dw PiEditor
0009e6 58f3      	.dw SelflevelSettings
0009e7 5938      	.dw StickScaling
0009e8 5869      	.dw ModeSettings
0009e9 597d      	.dw MiscSettings
0009ea 1035      	.dw GimbalSettings
0009eb 5784      	.dw AdvancedSettings
0009ec 2048      	.dw AuxSwitchSetup
0009ed 59c2      	.dw SBusDG2SwitchSetup
0009ee 5ae6      	.dw InitialSetup
0009ef 020b      	.dw SerialRxTest
0009f0 468d      	.dw SensorTest
0009f1 5a07      	.dw MotorLayout
0009f2 16da      	.dw UserProfileSetup
0009f3 5824      	.dw ExtraFeatures
0009f4 5692      	.dw EscCalWarning
0009f5 571b      	.dw ShowVersion
0009f6 57c9      	.dw Contrast
                 
                 
                 .include "sbus_status.asm"
                 
                 
                 
                 	;--- Read S.Bus flags ---
                 
                 GetSBusFlags:
                 
                 	;S.Bus flags (4 bit) are stored in SBusFlags:
                 	;S.Bus data received:	----4567
                 
0009f7 91a0 07d5 	lds xl, SBusFlags
0009f9 91b0 07db 	lds xh, RxFrameValid
0009fb 23bb      	tst xh				;is S.Bus data frame valid?
0009fc f431      	brne sbf5
                 
0009fd 9100 079d
0009ff 6100
000a00 9300 079d 	setstatusbit NoSBusInput	;no, exit and refuse arming
000a02 9508      	ret
                 
000a03 9100 079d sbf5:	lds t, StatusBits		;yes, clear the "No S.Bus data" error
000a05 7e0f      	cbr t, NoSBusInput
000a06 9300 079d 	sts StatusBits, t
                 
000a08 2f0a      	mov t, xl			;read digital channel 17
000a09 7001      	andi t, 0x01
000a0a 9300 07d6 	sts Channel17, t
                 
000a0c 950a      	dec t				;activate alarm when channel 17 is on
000a0d 9500      	com t
000a0e 9300 077e 	sts flagAlarmOverride, t
                 
000a10 95a6      	lsr xl				;read digital channel 18
000a11 2f0a      	mov t, xl
000a12 7001      	andi t, 0x01
000a13 9300 07d7 	sts Channel18, t
                 
000a15 95a6      	lsr xl				;ignore the 'Frame Lost' flag
                 
000a16 95a6      	lsr xl				;set the 'Failsafe' flag if one or more failsafe situations occurred
000a17 70a1      	andi xl, 0x01
000a18 f089      	breq sbf1
                 
000a19 93a0 07d8 	sts Failsafe, xl
000a1b 9100 079d
000a1d 6200
000a1e 9300 079d 	setstatusbit SBusFailsafe
000a20 ef0f
000a21 9300 077e 	rvsetflagtrue flagAlarmOverride	;activate the Lost Model alarm
000a23 9100 0770
000a25 2300
000a26 f41a      	rvbrflagfalse flagArmed, sbf1
                 
000a27 e0a2      	ldi xl, ErrorFailsafe
000a28 940e 1573 	call LogError
                 
000a2a 9508      sbf1:	ret
                 
                 
                 
                 	;--- Run features assigned to channel 18 (DG2) ---
                 
                 SBusFeatures:
                 
000a2b 9100 07d7 	lds t, Channel18		;get DG2 switch position
000a2d 2300      	tst t
000a2e f411      	brne ref1
                 
000a2f 9a28      	sbi DigitalOutPin		;off. Reset digital output (aux)
000a30 c00a      	rjmp ref3
                 
000a31 91c0 07d9 ref1:	lds yl, DG2Functions		;on. Handle active functions
000a33 95c6      	lsr yl
000a34 f418      	brcc ref2
                 
000a35 2700
000a36 9300 0773 	rvsetflagfalse flagThrottleZero	;keep motors spinning and prevent accidental disarming in mid-air
                 
000a38 95c6      ref2:	lsr yl
000a39 f408      	brcc ref3
                 
000a3a 9828      	cbi DigitalOutPin		;set digital output (aux)
                 
000a3b 9508      ref3:	ret
                 
                 .include "sbus_readrx.asm"
                 
                 	//* Futaba S.Bus format (8-E-2/100Kbps)
                 	//*	S.Bus decoding algorithm borrowed in part from Arduino
                 	//*
                 	//* The protocol is 25 Bytes long and is sent every 14ms (analog mode) or 7ms (highspeed mode).
                 	//* One Byte = 1 startbit + 8 data bit + 1 parity bit + 2 stopbit (8E2), baudrate = 100,000 bit/s
                 	//*
                 	//* The highest bit is sent first. The logic is inverted.
                 	//*
                 	//* [startbyte] [data1] [data2] .... [data22] [flags][endbyte]
                 	//* 
                 	//* 0 startbyte = 11110000b (0xF0)
                 	//* 1-22 data = [ch1, 11bit][ch2, 11bit] .... [ch16, 11bit] (Values = 0 to 2047)
                 	//* 	channel 1 uses 8 bits from data1 and 3 bits from data2
                 	//* 	channel 2 uses last 5 bits from data2 and 6 bits from data3
                 	//* 	etc.
                 	//* 
                 	//* 23 flags = 
                 	//*	bit7 = ch17 = digital channel (0x80)
                 	//* 	bit6 = ch18 = digital channel (0x40)
                 	//* 	bit5 = Frame lost, equivalent red LED on receiver (0x20)
                 	//* 	bit4 = failsafe activated (0x10)
                 	//* 	bit3 = n/a
                 	//* 	bit2 = n/a
                 	//* 	bit1 = n/a
                 	//* 	bit0 = n/a
                 	//* 24 endbyte = 00000000b
                 	//*
                 	//************************************************************
                 
                 
                 	;--- Read all input channel values ---
                 
                 GetSBusChannels:
                 
000a3c 91a0 07f8 	lds xl, RxBufferIndex		;data received since last iteration?
000a3e 91b0 07f9 	lds xh, RxBufferIndexOld
000a40 17ab      	cp xl, xh
000a41 f059      	breq gsc1
                 
000a42 93a0 07f9 	sts RxBufferIndexOld, xl	;yes. Will use old input values, but only if valid
000a44 e001      	ldi t, 1
000a45 9300 07fa 	sts RxBufferState, t
000a47 9100 07db
000a49 2300
000a4a f40a      	rvbrflagfalse RxFrameValid, gsc2
                 
000a4b c04b      	rjmp gsc31			;use old input values
                 
000a4c c169      gsc2:	rjmp ClearInputChannels		;invalid
                 
000a4d 9100 07fa gsc1:	lds t, RxBufferState		;no additional data received. Frame sync?
000a4f 3002      	cpi t, 2
000a50 f059      	breq gsc3
                 
000a51 9503      	inc t				;no, update status
000a52 3604      	cpi t, 100
000a53 f008      	brlo gsc15
                 
000a54 950a      	dec t				;prevent wrap-around
                 
000a55 9300 07fa gsc15:	sts RxBufferState, t
000a57 9100 07db
000a59 2300
000a5a f78a      	rvbrflagfalse RxFrameValid, gsc2
                 
000a5b c03b      	rjmp gsc31			;use old input values
                 
000a5c 91a0 07f8 gsc3:	lds xl, RxBufferIndex		;is the buffer full?
000a5e 23aa      	tst xl
000a5f f091      	breq gsc4
                 
000a60 2700      	clr t				;no, communication must be out of sync so we'll try to recover...
000a61 9300 07fa 	sts RxBufferState, t
000a63 9300 07f9 	sts RxBufferIndexOld, t
000a65 94f8      	cli
000a66 9300 07f8 	sts RxBufferIndex, t
000a68 9300 07dd 	sts RxBuffer0, t
000a6a eded
000a6b e0f7      	ldz RxBuffer0
000a6c 93e0 07f6 	sts RxBufferAddressL, zl
000a6e 93f0 07f7 	sts RxBufferAddressH, zh
000a70 9478      	sei
000a71 c144      	rjmp ClearInputChannels
                 
000a72 eded
000a73 e0f7      gsc4:	ldz RxBuffer0			;yes, check start byte
000a74 8100      	ld t, z
000a75 300f      	cpi t, 0x0F			;OBSERVE! Bit order is reversed when read from the USART buffer
000a76 f009      	breq gsc6
                 
000a77 c13e      gsc5:	rjmp ClearInputChannels		;invalid value found
                 
000a78 efe5
000a79 e0f7      gsc6:	ldz RxBuffer24			;check end byte
000a7a 8100      	ld t, z
000a7b 2300      	tst t				;FASST
000a7c f021      	breq gsc7
                 
000a7d 8100      	ld t, z				;FASSTest (thanks to fnurgel)
000a7e 7c0f      	andi t, 0xCF
000a7f 3004      	cpi t, 0x04
000a80 f7b1      	brne gsc5
                 
                 gsc7:	;S.Bus frame appears to be valid
000a81 ef0f      	ser t
000a82 9300 07db 	sts RxFrameValid, t
                 
                 	;S.Bus flags
000a84 9731      	sbiw z, 1
000a85 8100      	ld t, z
000a86 9300 07d5 	sts SBusFlags, t
                 
                 	;Data bytes
000a88 edee
000a89 e0f7      	ldz RxBuffer1
000a8a ecaa
000a8b e0b7      	ldx SBusByte0
000a8c e0ca      	ldi yl, 10
                 
000a8d 9101      gsc8:	ld t, z+
000a8e 930d      	st x+, t
000a8f 95ca      	dec yl
000a90 f7e2      	brpl gsc8
                 
                 	;Set signal for "New frame"
000a91 e003      	ldi t, 3
000a92 9300 07fa 	sts RxBufferState, t
                 
000a94 2700      	clr t				;reset timeout counter
000a95 9300 07a8 	sts TimeoutCounter, t
                 
                 
                 gsc31:	;--- Channel 1 ---
                 
                 	;S.Bus channel 1 is 11 bit long and is stored in SBusByte0 and SBusByte1:
                 	;S.Bus data received:	76543210 -----A98
                 	;Variable name:		   xl	    xh
                 
000a97 91a0 07ca 	lds xl, SBusByte0
000a99 91b0 07cb 	lds xh, SBusByte1
                 
000a9b 70b7      	andi xh, 0x07
                 
000a9c 93a0 07b0 	sts Channel1L, xl
000a9e 93b0 07b1 	sts Channel1H, xh
                 
                 	
                 	;--- Channel 2 ---
                 
                 	;S.Bus channel 2 is 11 bit long and is stored in SBusByte1 and SBusByte2:
                 	;S.Bus data received:	43210--- --A98765
                 	;Variable name:		   xl	    xh
                 
000aa0 91a0 07cb 	lds xl, SBusByte1
000aa2 91b0 07cc 	lds xh, SBusByte2
                 
000aa4 95b7      	ror xh
000aa5 95a7      	ror xl
000aa6 95b7      	ror xh
000aa7 95a7      	ror xl
000aa8 95b7      	ror xh
000aa9 95a7      	ror xl
000aaa 70b7      	andi xh, 0x07
                 
000aab 93a0 07b2 	sts Channel2L, xl
000aad 93b0 07b3 	sts Channel2H, xh
                 
                 
                 	;--- Channel 3 ---
                 
                 	;S.Bus channel 3 is 11 bit long and is stored in SBusByte2, SBusByte3 and SBusByte4:
                 	;S.Bus data received:	10------ 98765432 -------A
                 	;Variable name:		   yh	    xl	     xh
                 
000aaf 91d0 07cc 	lds yh, SBusByte2
000ab1 91a0 07cd 	lds xl, SBusByte3
000ab3 91b0 07ce 	lds xh, SBusByte4
                 
000ab5 1fdd      	rol yh
000ab6 1faa      	rol xl
000ab7 1fbb      	rol xh
000ab8 1fdd      	rol yh
000ab9 1faa      	rol xl
000aba 1fbb      	rol xh
000abb 70b7      	andi xh, 0x07
                 
000abc 93a0 07b4 	sts Channel3L, xl
000abe 93b0 07b5 	sts Channel3H, xh
                 
                 
                 	;--- Channel 4 ---
                 
                 	;S.Bus channel 4 is 11 bit long and is stored in SBusByte4 and SBusByte5:
                 	;S.Bus data received:	6543210- ----A987
                 	;Variable name:    	   xl       xh
                 
000ac0 91a0 07ce 	lds xl, SBusByte4
000ac2 91b0 07cf 	lds xh, SBusByte5
                 
000ac4 95b7      	ror xh
000ac5 95a7      	ror xl
000ac6 70b7      	andi xh, 0x07
                 
000ac7 93a0 07b6 	sts Channel4L, xl
000ac9 93b0 07b7 	sts Channel4H, xh
                 
                 
                 	;--- Channel 5 ---
                 
                 	;S.Bus channel 5 is 11 bit long and is stored in SBusByte5 and SBusByte6:
                 	;S.Bus data received:	3210---- -A987654
                 	;Variable name:    	   xl       xh
                 
000acb 91a0 07cf 	lds xl, SBusByte5
000acd 91b0 07d0 	lds xh, SBusByte6
                 
000acf 95b7      	ror xh
000ad0 95a7      	ror xl
000ad1 95b7      	ror xh
000ad2 95a7      	ror xl
000ad3 95b7      	ror xh
000ad4 95a7      	ror xl
000ad5 95b7      	ror xh
000ad6 95a7      	ror xl
000ad7 70b7      	andi xh, 0x07
                 
000ad8 93a0 07b8 	sts Channel5L, xl
000ada 93b0 07b9 	sts Channel5H, xh
                 
                 
                 	;--- Channel 6 ---
                 
                 	;S.Bus channel 6 is 11 bit long and is stored in SBusByte6, SBusByte7 and SBusByte8:
                 	;S.Bus data received:	0------- 87654321 ------A9
                 	;Variable name:    	   yh       xl       xh
                 
000adc 91d0 07d0 	lds yh, SBusByte6
000ade 91a0 07d1 	lds xl, SBusByte7
000ae0 91b0 07d2 	lds xh, SBusByte8
                 
000ae2 1fdd      	rol yh
000ae3 1faa      	rol xl
000ae4 1fbb      	rol xh
000ae5 70b7      	andi xh, 0x07
                 
000ae6 93a0 07ba 	sts Channel6L, xl
000ae8 93b0 07bb 	sts Channel6H, xh
                 
                 
                 	;--- Channel 7 ---
                 
                 	;S.Bus channel 7 is 11 bit long and is stored in SBusByte8 and SBusByte9:
                 	;S.Bus data received:	543210-- ---A9876
                 	;Variable name:    	   xl       xh
                 
000aea 91a0 07d2 	lds xl, SBusByte8
000aec 91b0 07d3 	lds xh, SBusByte9
                 
000aee 95b7      	ror xh
000aef 95a7      	ror xl
000af0 95b7      	ror xh
000af1 95a7      	ror xl
000af2 70b7      	andi xh, 0x07
                 
000af3 93a0 07bc 	sts Channel7L, xl
000af5 93b0 07bd 	sts Channel7H, xh
                 
                 
                 	;--- Channel 8 ---
                 
                 	;S.Bus channel 8 is 11 bit long and is stored in SBusByte9 and SBusByte10:
                 	;S.Bus data received:	210----- A9876543
                 	;Variable name:    	   xl       xh
                 
000af7 91a0 07d3 	lds xl, SBusByte9
000af9 91b0 07d4 	lds xh, SbusByte10
                 
000afb e005      	ldi t, 5
000afc 95b6      gsc58:	lsr xh
000afd 95a7      	ror xl
000afe 950a      	dec t
000aff f7e1      	brne gsc58
                 
000b00 93a0 07be 	sts Channel8L, xl
000b02 93b0 07bf 	sts Channel8H, xh
                 
                 
                 	;--- Roll ---
                 
000b04 9000 07c2 	lds r0, MappedChannel1		;get aileron channel value
000b06 d0f8      	rcall GetChannelValue
000b07 d101      	rcall AdjustSBusValue
000b08 940e 458e 	call DeadZone
000b0a 93b0 054c
000b0c 93a0 054d
000b0e 93d0 054e 	b16store RxRoll
000b10 940e 45a0 	call IsChannelCentered
000b12 93c0 0774 	sts flagAileronCentered, yl
                 
                 
                 	;--- Pitch ---
                 
000b14 9000 07c3 	lds r0, MappedChannel2		;get elevator channel value
000b16 d0e8      	rcall GetChannelValue
000b17 d0f1      	rcall AdjustSBusValue
000b18 940e 458e 	call DeadZone
000b1a 93b0 054f
000b1c 93a0 0550
000b1e 93d0 0551 	b16store RxPitch
000b20 940e 45a0 	call IsChannelCentered
000b22 93c0 0775 	sts flagElevatorCentered, yl
                 
                 
                 	;--- Throttle ---
                 
000b24 9000 07c4 	lds r0, MappedChannel3		;get throttle channel value
000b26 d0d8      	rcall GetChannelValue
                 
000b27 2700
000b28 9300 0773 	rvsetflagfalse flagThrottleZero
                 
000b2a e9e0
000b2b e0f1      	ldz 400				;X = X - 400
000b2c 1bae      	sub xl, zl
000b2d 0bbf      	sbc xh, zh
000b2e d0de      	rcall Add50Percent		;X = X * 1.5
                 
000b2f e0e0
000b30 e0f0      	ldz 0				;X < 0 ?
000b31 17ae      	cp  xl, zl
000b32 07bf      	cpc xh, zh
000b33 f42c      	brge gsc30
                 
000b34 e0a0
000b35 e0b0      	ldx 0				;yes, set to zero
000b36 ef0f
000b37 9300 0773 	rvsetflagtrue flagThrottleZero
                 
000b39 93b0 0552
000b3b 93a0 0553
000b3d 93d0 0554 gsc30:	b16store RxThrottle
                 
                 
                 	;--- Yaw ---
                 
000b3f 9000 07c5 	lds r0, MappedChannel4		;get rudder channel value
000b41 d0bd      	rcall GetChannelValue
000b42 d0c6      	rcall AdjustSBusValue
000b43 940e 458e 	call DeadZone
000b45 93b0 0555
000b47 93a0 0556
000b49 93d0 0557 	b16store RxYaw
                 
                 
                 	;--- AUX ---
                 
000b4b 9000 07c6 	lds r0, MappedChannel5		;get aux channel value
000b4d d0b1      	rcall GetChannelValue
000b4e d0ba      	rcall AdjustSBusValue
000b4f 93b0 0558
000b51 93a0 0559
000b53 93d0 055a 	b16store RxAux
                 
000b55 27cc      	clr yl				;AUX switch position #1
000b56 eae8
000b57 effd      	ldz -600
000b58 17ae      	cp  xl, zl
000b59 07bf      	cpc xh, zh
000b5a f09c      	brlt gsc35
                 
000b5b 95c3      	inc yl				;AUX switch position #2
000b5c e3e8
000b5d efff      	ldz -200
000b5e 17ae      	cp  xl, zl
000b5f 07bf      	cpc xh, zh
000b60 f06c      	brlt gsc35
                 
000b61 95c3      	inc yl				;AUX switch position #3
000b62 ece8
000b63 e0f0      	ldz 200
000b64 17ae      	cp  xl, zl
000b65 07bf      	cpc xh, zh
000b66 f03c      	brlt gsc35
                 
000b67 95c3      	inc yl				;AUX switch position #4
000b68 e5e8
000b69 e0f2      	ldz 600
000b6a 17ae      	cp  xl, zl
000b6b 07bf      	cpc xh, zh
000b6c f00c      	brlt gsc35
                 
000b6d 95c3      	inc yl				;AUX switch position #5
                 
000b6e 93c0 0781 gsc35:	sts AuxSwitchPosition, yl
                 
                 
                 	;--- AUX2 ---
                 
000b70 9000 07c7 	lds r0, MappedChannel6		;get aux2 channel value
000b72 d08c      	rcall GetChannelValue
000b73 d095      	rcall AdjustSBusValue
000b74 93b0 055b
000b76 93a0 055c
000b78 93d0 055d 	b16store RxAux2
                 
                 
                 	;--- AUX3 ---
                 
000b7a 9000 07c8 	lds r0, MappedChannel7		;get aux3 channel value
000b7c d082      	rcall GetChannelValue
000b7d d08b      	rcall AdjustSBusValue
000b7e 93b0 055e
000b80 93a0 055f
000b82 93d0 0560 	b16store RxAux3
                 
                 
                 	;--- AUX4 ---
                 
000b84 9000 07c9 	lds r0, MappedChannel8		;get aux4 channel value
000b86 d078      	rcall GetChannelValue
000b87 d081      	rcall AdjustSBusValue
000b88 93b0 0561
000b8a 93a0 0562
000b8c 93d0 0563 	b16store RxAux4
                 
000b8e 27cc      	clr yl				;AUX4 switch position #1
000b8f e7e0
000b90 effe      	ldz -400
000b91 17ae      	cp  xl, zl
000b92 07bf      	cpc xh, zh
000b93 f03c      	brlt gsc38
                 
000b94 95c3      	inc yl				;AUX4 switch position #2
000b95 e9e0
000b96 e0f1      	ldz 400
000b97 17ae      	cp  xl, zl
000b98 07bf      	cpc xh, zh
000b99 f00c      	brlt gsc38
                 
000b9a 95c3      	inc yl				;AUX4 switch position #3
                 
000b9b 93c0 078e gsc38:	sts Aux4SwitchPosition, yl
                 
                 
                 	;--- Check RX ---
                 
000b9d 9100 07db
000b9f 2300
000ba0 f4aa      	rvbrflagfalse RxFrameValid, ClearInputChannels
000ba1 c003      	rjmp gsc22
                 
000ba2 9300 07a8 gsc23:	sts TimeoutCounter, t
000ba4 9508      	ret
                 
000ba5 9100 07a8 gsc22:	lds t, TimeoutCounter		;timeout?
000ba7 9503      	inc t
000ba8 3f0a      	cpi t, TimeoutLimit
000ba9 f3c0      	brlo gsc23
                 
000baa 9100 0770
000bac 2300
000bad f442      	rvbrflagfalse flagArmed, ClearInputChannels	;yes
                 
000bae 9100 079d
000bb0 6003
000bb1 9300 079d 	setstatusbit RxSignalLost	;set status bit for "Signal Lost" and activate the Lost Model alarm only when armed
000bb3 ef0f
000bb4 9300 077e 	rvsetflagtrue flagAlarmOverride
                 
                 
                 
                 	;---- Clear all input values ---
                 
                 ClearInputChannels:
                 
000bb6 2700
000bb7 9300 07db 	rvsetflagfalse RxFrameValid	;set flag to false and all RX input values to zero
000bb9 e000
000bba 9300 054c
000bbc 9300 054d
000bbe 9300 054e 	b16clr RxRoll
000bc0 9300 054f
000bc2 9300 0550
000bc4 9300 0551 	b16set RxPitch
000bc6 9300 0552
000bc8 9300 0553
000bca 9300 0554 	b16set RxThrottle
000bcc 9300 0555
000bce 9300 0556
000bd0 9300 0557 	b16set RxYaw
000bd2 9300 0558
000bd4 9300 0559
000bd6 9300 055a 	b16set RxAux
000bd8 9300 055b
000bda 9300 055c
000bdc 9300 055d 	b16set RxAux2
000bde 9300 055e
000be0 9300 055f
000be2 9300 0560 	b16set RxAux3
000be4 9300 0561
000be6 9300 0562
000be8 9300 0563 	b16set RxAux4
000bea ef0f
000beb 9300 0773 	rvsetflagtrue flagThrottleZero
                 
000bed 9100 0781 	lds t, AuxSwitchPosition	;select AUX function #3 if not set already
000bef 3002      	cpi t, 2
000bf0 f031      	breq cic1
                 
000bf1 e002      	ldi t, 2
000bf2 9300 0781 	sts AuxSwitchPosition, t
000bf4 ef0f      	ser t				;make sure the AUX switch function will be updated
000bf5 9300 0782 	sts AuxSwitchPositionOld, t
                 
000bf7 9100 0770
000bf9 2300
000bfa f41a      cic1:	rvbrflagfalse flagArmed, cic2	;log error when armed
                 
000bfb e0a1      	ldi xl, ErrorSignalLost
000bfc 940e 1573 	call LogError
                 
000bfe 9508      cic2:	ret
                 
                 
                 
                 	;--- Get channel value ---
                 
                 GetChannelValue:
                 
000bff ebe0
000c00 e0f7
000c01 e002
000c02 9d00
000c03 0de0
000c04 1df1      	ldzarray Channel1L, 2, r0	;register R0 (input parameter) holds the mapped channel ID
000c05 91a1      	ld xl, z+
000c06 81b0      	ld xh, z
000c07 27dd      	clr yh
000c08 9508      	ret
                 
                 
                 
                 	;---- Adapt S.Bus value to KK value ---
                 
                 AdjustSBusValue:	;Subtract Futaba S.Bus offset (1024) and multiply by 1.5
                 
000c09 e0e0
000c0a e0f4      	ldz 1024	;X = X - 1024
000c0b 1bae      	sub xl, zl
000c0c 0bbf      	sbc xh, zh
                 
                 Add50Percent:
                 
000c0d 2fea      	mov zl, xl	;Z = X / 2
000c0e 2ffb      	mov zh, xh
000c0f 95f5      	asr zh
000c10 95e7      	ror zl
                 
000c11 0fae      	add xl, zl	;X = X + Z
000c12 1fbf      	adc xh, zh
000c13 9508      	ret
                 
                 
                 .include "sat_main.asm"
                 
                 	;--- Specialized setup and main routine for Spektrum Satellite units ---
                 
                 SatelliteMain:
                 
000c14 2700
000c15 9300 0796 	rvsetflagfalse Mode		;the Satelite bind process may set this flag to 'true' (i.e. to skip ESC calibration)
000c17 940e 0d39 	call SetupHardwareForSatellite
                 
                 
                 	;--- Initialize LCD ---
                 
                 	;call LoadLcdContrast; Not needed, called in main.c
000c19 940e 4d2c 	call LcdUpdate
000c1b 940e 4d70 	call LcdClear
000c1d 940e 4d2c 	call LcdUpdate
                 
                 
                 	;--- Variables init ---
                 
000c1f 940e 255c 	call EeInit
                 
000c21 e000
000c22 9300 0745 	lrv MainMenuCursorYposSave, 0
000c24 e000
000c25 9300 0746 	lrv MainMenuListYposSave, 0
                 
000c27 e000
000c28 9300 0747 	lrv LoadMenuCursorYposSave, 0
000c2a e000
000c2b 9300 0748 	lrv LoadMenuListYposSave, 0
                 
000c2d e003
000c2e 9300 0597
000c30 ef0f
000c31 9300 0598
000c33 e000
000c34 9300 0599 	b16ldi BatteryVoltageLogged, 1023
                 
000c36 e001
000c37 9300 069c
000c39 e80e
000c3a 9300 069d
000c3c e000
000c3d 9300 069e 	b16ldi FlightTimer, 398		;tuned for better accuracy (1 second)
                 
000c3f 2700      	clr t
000c40 9300 07a4 	sts Timer1sec, t
000c42 9300 07a5 	sts Timer1min, t
                 
000c44 9300 07a6 	sts TuningMode, t
                 
000c46 9300 076e 	sts flagPwmGen, t
                 
000c48 9300 0779 	sts flagErrorLogSetup, t
                 
000c4a 9300 0776 	sts FlashingLEDCounter, t
                 
000c4c eaaf      	ldi xl, AuxCounterInit
000c4d 93a0 0780 	sts AuxCounter, xl
000c4f e0a2      	ldi xl, 2
000c50 93a0 0781 	sts AuxSwitchPosition, xl
000c52 e0a1      	ldi xl, 1
000c53 93a0 078e 	sts Aux4SwitchPosition, xl
000c55 93a0 0783 	sts AuxFunctionOld, xl
                 
000c57 9300 0774 	sts flagAileronCentered, t	;set to false
000c59 9300 0775 	sts flagElevatorCentered, t
                 
000c5b e1a0      	ldi xl, 16
000c5c 93a0 07dc 	sts RxFrameLength, xl
                 
000c5e 9300 07db 	sts RxFrameValid, t
000c60 9300 07a8 	sts TimeoutCounter, t
                 
000c62 9300 07f8 	sts RxBufferIndex, t
000c64 9300 07f9 	sts RxBufferIndexOld, t
000c66 9300 07fa 	sts RxBufferState, t
000c68 eded
000c69 e0f7      	ldz RxBuffer0
000c6a 93e0 07f6 	sts RxBufferAddressL, zl
000c6c 93f0 07f7 	sts RxBufferAddressH, zh
                 
000c6e 9300 07b0 	sts Channel1L, t
000c70 9300 07b1 	sts Channel1H, t
000c72 9300 07b2 	sts Channel2L, t
000c74 9300 07b3 	sts Channel2H, t
000c76 9300 07b4 	sts Channel3L, t
000c78 9300 07b5 	sts Channel3H, t
000c7a 9300 07b6 	sts Channel4L, t
000c7c 9300 07b7 	sts Channel4H, t
000c7e 9300 07b8 	sts Channel5L, t
000c80 9300 07b9 	sts Channel5H, t
000c82 9300 07ba 	sts Channel6L, t
000c84 9300 07bb 	sts Channel6H, t
000c86 9300 07bc 	sts Channel7L, t
000c88 9300 07bd 	sts Channel7H, t
                 
000c8a e100      	ldi t, NoSatelliteInput
000c8b 9300 079d 	sts StatusBits, t
                 
000c8d 940e 4ac1 	call setup_mpu6050
                 
000c8f 940e 2856 	call GyroCal
                 
000c91 940e 0d83 	call SatUsartInit
                 
                 
                 #ifdef STANDALONE_GIMBAL_CONTROLLER
                 #endif
                 
                 
                 am10:	;--- ESC calibration ----
                 
000c93 9478      	sei				;global interrupts must be enabled here for PWM output in EscThrottleCalibration
                 
000c94 e7e4
000c95 e0f0      	ldz eeEscCalibration		;check ESC calibration setting
000c96 940e 4f15 	call ReadEeprom
000c98 2300      	tst t
000c99 f071      	breq am5			;jump if ESC calibration is disabled
                 
000c9a 940e 2527 	call DisableEscCalibration
                 
000c9c 9100 0796
000c9e 2300
000c9f f0b2      	rvbrflagtrue Mode, am2		;skip ESC calibration if arriving here after Satellite binding
                 
000ca0 b103      	load t, pinb			;read buttons. Will not use 'GetButtons' here because of delay
000ca1 9500      	com t
000ca2 9502      	swap t
000ca3 700f      	andi t, 0x0F			;any button pressed?
000ca4 f089      	breq am2
                 
000ca5 940e 2431 	call EscThrottleCalibration	;yes, do calibration
000ca7 c00e      	rjmp am2
                 
                 
                 	;--- Misc. ---
                 
000ca8 ef0f
000ca9 9300 0796 am5:	rvsetflagtrue Mode		;will prevent buttons held down during start-up from opening the menu or changing user profile
                 
                 
                 	;--- Reset LCD contrast when button #1 is held down ---
                 
000cab 940e 4eaf 	call GetButtons
000cad 3008      	cpi t, 0x08
000cae f411      	brne am15
                 
000caf 940e 5719 	call SetDefaultLcdContrast
                 
                 
                 	;--- Display the Error Log setup screen when button #4 is held down ---
                 
000cb1 3001      am15:	cpi t, 0x01
000cb2 f419      	brne am2
                 
000cb3 ef0f
000cb4 9300 0779 	rvsetflagtrue flagErrorLogSetup
                 
                 
                 	;--- Flight loop init ---
                 
000cb6 940e 2d19 am2:	call FlightInit
                 
000cb8 9100 079d 	lds t, StatusBits		;clear the SatProtocolError flag
000cba 7d0f      	cbr t, SatProtocolError
000cbb 9300 079d 	sts StatusBits, t
                 
                 	;       76543210		;clear pending OCR1A and B interrupt
000cbd e006      	ldi t,0b00000110
000cbe bb06      	store tifr1, t
                 
                 
                 	;--- Flight loop ---
                 
000cbf 940e 3ed5 am1:	call PwmStart			;runtime between PwmStart and B interrupt (in PwmEnd) must not exeed 1.5ms
000cc1 940e 0e88 	call GetSatChannels
000cc3 940e 102a 	call CheckSatRx
000cc5 940e 2c29 	call Arming
000cc7 940e 1f8a 	call Logic
000cc9 940e 2171 	call AddAuxStickScaling
                 #ifdef IN_FLIGHT_TUNING
                 #endif
000ccb 940e 36df 	call Imu
000ccd 940e 35ab 	call Mixer
000ccf 940e 116c 	call GimbalStab
000cd1 940e 1cb4 	call Beeper
000cd3 940e 1e7e 	call Lva
000cd5 940e 3f3b 	call PwmEnd
                 
000cd7 9000 0770
000cd9 9010 0771
000cdb 2401
000cdc 9200 0793 	rvflageor flagA, flagArmed, flagArmedOldState	;flagA == true if flagArmed changes state
000cde 9100 0793
000ce0 2300
000ce1 f432      	rvbrflagfalse flagA, am11
                 
000ce2 940e 1f57 	call CheckLvaSetting
                 
000ce4 9100 0770 	lds t, flagArmed
000ce6 9300 0771 	sts flagArmedOldState, t
                 
000ce8 9100 0778
000cea 2300
000ceb f42a      am11:	rvbrflagfalse flagLcdUpdate, am3;update LCD once if flagLcdUpdate is true
                 
000cec 2700
000ced 9300 0778 	rvsetflagfalse flagLcdUpdate
000cef 940e 294a 	call UpdateFlightDisplay
                 
000cf1 9100 0770
000cf3 2300
000cf4 f40a      am3:	rvbrflagfalse flagArmed, am7	;skip buttonreading if armed
000cf5 cfc9      	rjmp am1
                 
000cf6 b103      am7:	load t, pinb			;read buttons
000cf7 9500      	com t
000cf8 9502      	swap t
000cf9 700f      	andi t, 0x0F			;any button pushed?
000cfa f439      	brne am4
                 
000cfb 2700
000cfc 9300 0796 	rvsetflagfalse Mode		;no, reset Mode and ButtonDelay, and then go to start of the loop
                 
000cfe e000
000cff 9300 0790 am8:	lrv ButtonDelay, 0
000d01 cfbd      	rjmp am1	
                 
000d02 9100 0790
000d04 9503
000d05 9300 0790 am4:	rvinc ButtonDelay		;yes, ButtonDelay++
000d07 9100 0790
000d09 3302      	rvcpi ButtonDelay, 50		;ButtonDelay == 50?
000d0a f009      	breq am6			;yes, re-check button
000d0b cfb3      	rjmp am1			;no, go to start of the loop	
                 
000d0c 9100 0796
000d0e 2300
000d0f f372      am6:	rvbrflagtrue Mode, am8		;abort if the button hasn't been released since start-up
                 
                 ;	         76543210		;disable OCR1A and B interrupt
000d10 e000      	ldi t, 0b00000000
000d11 9300 006f 	store timsk1, t
                 
000d13 940e 4eaf 	call GetButtons			;re-check the button and abort if it was released too soon
000d15 700f      	andi t, 0x0F
000d16 f339      	breq am8
                 
000d17 3001      	cpi t, 0x01
000d18 f029      	breq am9
                 
000d19 3008      	cpi t, 0x08
000d1a f061      	breq am13
                 
                 
                 	;--- User profile ---
                 
000d1b 940e 181d 	call ChangeUserProfile
000d1d cf98      	rjmp am2
                 
                 
                 am9:	;--- Error log ---
                 
000d1e 940e 1dd3 	call Beep
000d20 940e 158a 	call ClearLoggedError		;clear logged error when the ERROR LOG screen is displayed
000d22 f448      	brcc am12
                 
000d23 ef0f
000d24 9300 0796 am14:	rvsetflagtrue Mode		;will wait for the button to be released
000d26 cf8f      	rjmp am2
                 
000d27 940e 1dd3 am13:	call Beep
000d29 940e 15a1 	call ToggleErrorLogState	;toggle error logging state when the setup screen is displayed
000d2b cff7      	rjmp am14
                 
                 
                 am12:	;--- Menu ---
                 
000d2c 9829      	BuzzerOff			;will prevent constant beeping in menu when 'Button Beep' is disabled
000d2d 982a      	cbi LvaOutputPin		;will avoid constant high level on external LVA output pin
000d2e 940e 1831 	call StartLedSeq		;the LED flashing sequence will indicate current user profile selection
000d30 940e 4112 	call StartPwmQuiet
000d32 940e 0d92 	call SatMainMenu
000d34 940e 4126 	call StopPwmQuiet
000d36 940e 1847 	call StopLedSeq
000d38 cf7d      	rjmp am2
                 
                 .include "sat_hwsetup.asm"
                 
                 SetupHardwareForSatellite:
                 
                 	;       76543210	;set port directions
000d39 e302      	ldi t,0b00110010	;output5, output6
000d3a b901      	out ddra,t
                 
                 	;       76543210
000d3b e00e      	ldi t,0b00001110
                 //	ldi t,0b00001111	// DEBUGGING
000d3c b904      	out ddrb,t
                 
                 	;       76543210
000d3d ef0c      	ldi t,0b11111100	;scl, sda, output 1-8
000d3e b907      	out ddrc,t
                 
                 	;       76543210
000d3f ef02      	ldi t,0b11110010
000d40 b90a      	out ddrd,t
                 
                 	;       76543210
000d41 ef0f      	ldi t,0b11111111	;turn off digital inputs on port A
000d42 9300 007e 	store didr0,t
                 
                 	;       76543210
000d44 ef01      	ldi t,0b11110001	;turn on pull ups on button inputs and aux pin
000d45 b905      	out portb,t
                 
                 	;       76543210
000d46 e003      	ldi t,0b00000011	;turn on pull ups SPI pin
000d47 b908      	out portc,t
                 
                 	;       76543210
000d48 e00d      	ldi t,0b00001101	;turn on pull ups on thr, ele and ail
000d49 b90b      	out portd ,t
                 
                 
                 	//*****************************************************************
                 	// Spektrum receiver binding - Code from David Thompson and Steveis
                 	//*****************************************************************
                 
                 	// Wait 70 msec (GetButtons has 10 msec debounce)
                 
000d4a e3ac
000d4b e0b0      	ldx 60
000d4c 940e 4e9c 	call WaitXms
                 
                 	// Bind as master if button 2&3 are pressed
                 
000d4e 940e 4eaf 	call GetButtons
000d50 3006      	cpi t, 0x06		;button 2&3 pressed for Satellite binding
000d51 f479      	brne skipbinding
                 
000d52 e0a3      	ldi xl, 3		;3 bind pulses to force DSM2 1024 single frame
                 
000d53 9100 074d 	lds t, RxMode
000d55 3004      	cpi t, RxModeSatDSMX
000d56 f409      	brne srb1
                 
000d57 e0a7      	ldi xl, 7		;7 bind pulses to force DSMX 2048 single frame
                 
                 srb1:	// Make port d,0 (throttle) output for binding
                 	;       76543210
000d58 ef03      	ldi t,0b11110011
000d59 b90a      	out ddrd, t
                 
000d5a 940e 0e71 	call bind_master
                 
                 	// set port D direction back (throttle input)
                 	;       76543210
000d5c ef02      	ldi t,0b11110010
000d5d b90a      	out ddrd, t
                 
000d5e ef0f
000d5f 9300 0796 	rvsetflagtrue Mode	;set flag to skip ESC calibration
                 
                 skipbinding:
                 
                 	;       76543210
000d61 e000      	ldi t,0b00000000	;set timer 1 to run at 2.5MHz
000d62 9300 0080 	store tccr1a, t
                 
                 	;       76543210
000d64 e002      	ldi t,0b00000010	
000d65 9300 0081 	store tccr1b, t
                 
                 	;       76543210
000d67 e000      	ldi t,0b00000000	
000d68 9300 0082 	store tccr1c, t
                 
                 
                 
                 	;--- Init_TWI ---
                 
000d6a 9100 00b9 	lds t, TWSR
000d6c 7f0c      	andi t, 0b11111100	;initialize twi prescaler set to 4^0 = 1
000d6d 9300 00b9 	sts TWSR, t
                 
000d6f e101      	ldi t, 17 
000d70 9300 00b8 	sts TWBR, t		;TWBR = ((20000000L / 400000L) - 16) / 2 = 17 for 400kHz clk rate
                 
                 
                 
                 	;--- Setup LCD --- 
                 
000d72 9a5d      	sbi lcd_cs1		;LCD signals
000d73 9a5c      	sbi lcd_scl
000d74 985e      	cbi lcd_res
                 
000d75 9a2b      	LedOn			;I'm alive
000d76 9a29      	BuzzerOn
000d77 efa4
000d78 e0b1      	ldx 500
000d79 940e 4e9c 	call WaitXms
000d7b 982b      	LedOff
000d7c 9829      	BuzzerOff
                 
000d7d 9a5e      	sbi lcd_res
                 
000d7e e6a4
000d7f e0b0      	ldx 100
000d80 940e 4e9c 	call WaitXms
                 
                 	
                 
                 	;---
                 
000d82 9508      	ret
                 
                 
                 
                 	;--- Spektrum 8N1 (8 data bits / No parity / 1 stop bit / 115.2Kbps) ---
                 	
                 SatUsartInit:
                 
                 	; Set baud rate
000d83 2700      	clr t
000d84 9300 00c0 	sts ucsr0a, t		; Clear the 2x flag
000d86 9300 00c5 	sts ubrr0h, t		; Baud High Byte = 0
000d88 e00a      	ldi t, 0x0A
000d89 9300 00c4 	sts ubrr0l, t		; Baud Low Byte = 10
                 
                 	; Enable receiver and Enable Receive Data Complete Interupt, 8 data
                 	;       76543210
000d8b e900      	ldi t,0b10010000
000d8c 9300 00c1 	sts ucsr0b,t
                 
                 	; Set frame format: Async, No Parity, 1 stop bit, 8 data
                 	;       76543210
000d8e e006      	ldi t,0b00000110
000d8f 9300 00c2 	sts ucsr0c,t
                 
000d91 9508      	ret
                 
                 .include "sat_mainmenu.asm"
                 
                 
                 SatMainMenu:
                 
000d92 e6cc
000d93 e1db      sam23:	ldy sam1 * 2
                 
000d94 91a0 0746 	lds xl, MainMenuListYposSave
000d96 91b0 0745 	lds xh, MainMenuCursorYposSave
                 
000d98 e102      	ldi t, 18		;number of menu items
                 #ifndef IN_FLIGHT_TUNING
000d99 950a        dec t
                 #endif
                 
000d9a 940e 1de9 	call Menu
                 
000d9c 93c0 0746 	sts MainMenuListYposSave, yl
000d9e 93d0 0745 	sts MainMenuCursorYposSave, yh
                 
000da0 f008      	brcs sam22		;BACK pressed?
000da1 9508      	ret			;Yes, return
                 	
000da2 0faa      sam22:	lsl xl			;No, calculate index    Z = *sam18 * 2 + xl * 2
000da3 ece0
000da4 e1fc      	ldz sam18 * 2
000da5 0fea      	add zl, xl
000da6 2700      	clr t
000da7 1ff0      	adc zh, t
                 
000da8 91a5      	lpm xl, z+		;x = (Z)
000da9 91b4      	lpm xh, z
                 	
000daa 01fd      	movw z, x		;z = x
                 	
000dab 9509      	icall			;go to choosen menu item code  (sound like an apple product!  lawlz)
                 
000dac 940e 1dd3 	call Beep
                 
000dae 940e 4d70 	call LcdClear		;blank screen
000db0 940e 4d2c 	call LcdUpdate	
                 
000db2 940e 4ecd 	call ReleaseButtons
                 	
000db4 940c 0d92 	jmp sam23
                 
                 
                 
                 
                 sam1:	
                 #ifdef IN_FLIGHT_TUNING
                 #endif
000db6 4950
000db7 4520
000db8 6964
000db9 6f74
000dba 2072
000dbb 2020
000dbc 2020
000dbd 2020
000dbe 2020
000dbf 2020      	.db "PI Editor           "
000dc0 6553
000dc1 666c
000dc2 6c2d
000dc3 7665
000dc4 6c65
000dc5 5320
000dc6 7465
000dc7 6974
000dc8 676e
000dc9 2073      	.db "Self-level Settings "
000dca 7453
000dcb 6369
000dcc 206b
000dcd 6353
000dce 6c61
000dcf 6e69
000dd0 2067
000dd1 2020
000dd2 2020
000dd3 2020      	.db "Stick Scaling       "
000dd4 6f4d
000dd5 6564
000dd6 5320
000dd7 7465
000dd8 6974
000dd9 676e
000dda 2073
000ddb 2020
000ddc 2020
000ddd 2020      	.db "Mode Settings       "
000dde 694d
000ddf 6373
000de0 202e
000de1 6553
000de2 7474
000de3 6e69
000de4 7367
000de5 2020
000de6 2020
000de7 2020      	.db "Misc. Settings      "
000de8 6947
000de9 626d
000dea 6c61
000deb 5320
000dec 7465
000ded 6974
000dee 676e
000def 2073
000df0 2020
000df1 2020      	.db "Gimbal Settings     "
000df2 6441
000df3 6176
000df4 636e
000df5 6465
000df6 5320
000df7 7465
000df8 6974
000df9 676e
000dfa 2073
000dfb 2020      	.db "Advanced Settings   "
000dfc 5541
000dfd 2058
000dfe 7753
000dff 7469
000e00 6863
000e01 5320
000e02 7465
000e03 7075
000e04 2020
000e05 2020      	.db "AUX Switch Setup    "
000e06 6e49
000e07 7469
000e08 6169
000e09 206c
000e0a 6553
000e0b 7574
000e0c 2070
000e0d 2020
000e0e 2020
000e0f 2020      	.db "Initial Setup       "
000e10 6552
000e11 6563
000e12 7669
000e13 7265
000e14 5420
000e15 7365
000e16 2074
000e17 2020
000e18 2020
000e19 2020      	.db "Receiver Test       "
000e1a 6553
000e1b 736e
000e1c 726f
000e1d 5420
000e1e 7365
000e1f 2074
000e20 2020
000e21 2020
000e22 2020
000e23 2020      	.db "Sensor Test         "
000e24 6853
000e25 776f
000e26 4d20
000e27 746f
000e28 726f
000e29 4c20
000e2a 7961
000e2b 756f
000e2c 2074
000e2d 2020      	.db "Show Motor Layout   "
000e2e 7355
000e2f 7265
000e30 5020
000e31 6f72
000e32 6966
000e33 656c
000e34 2020
000e35 2020
000e36 2020
000e37 2020      	.db "User Profile        "
000e38 7845
000e39 7274
000e3a 2061
000e3b 6546
000e3c 7461
000e3d 7275
000e3e 7365
000e3f 2020
000e40 2020
000e41 2020      	.db "Extra Features      "
000e42 5345
000e43 2043
000e44 6143
000e45 696c
000e46 7262
000e47 7461
000e48 6f69
000e49 206e
000e4a 2020
000e4b 2020      	.db "ESC Calibration     "
000e4c 6556
000e4d 7372
000e4e 6f69
000e4f 206e
000e50 6e49
000e51 6f66
000e52 6d72
000e53 7461
000e54 6f69
000e55 206e      	.db "Version Information "
000e56 434c
000e57 2044
000e58 6f43
000e59 746e
000e5a 6172
000e5b 7473
000e5c 2020
000e5d 2020
000e5e 2020
000e5f 2020      	.db "LCD Contrast        "
                 
                 
                 sam18:	
                 #ifdef IN_FLIGHT_TUNING
                 #endif
000e60 32fc      	.dw PiEditor
000e61 58f3      	.dw SelflevelSettings
000e62 5938      	.dw StickScaling
000e63 5869      	.dw ModeSettings
000e64 597d      	.dw MiscSettings
000e65 1035      	.dw GimbalSettings
000e66 5784      	.dw AdvancedSettings
000e67 2048      	.dw AuxSwitchSetup
000e68 5ae6      	.dw InitialSetup
000e69 020b      	.dw SerialRxTest
000e6a 468d      	.dw SensorTest
000e6b 5a07      	.dw MotorLayout
000e6c 16da      	.dw UserProfileSetup
000e6d 5824      	.dw ExtraFeatures
000e6e 5692      	.dw EscCalWarning
000e6f 571b      	.dw ShowVersion
000e70 57c9      	.dw Contrast
                 
                 
                 .include "sat_misc.asm"
                 
                  * misc_asm.S
                  *
                  * Created: 04/04/2013
                  * Author: David Thompson
                  *
                 
                 
                 #include <avr/io.h>
                 
                 // Servo output pin assignments
                 #define UART_OUT	_SFR_IO_ADDR(PORTD)
                 
                 #define BIND UART_OUT,0	// PORTD,0
                 #ifndef __tmp_reg__
                 #define __tmp_reg__ 0
                 #endif
                 
                 	.section .text
                 
                 ;*************************************************************************	
                 ; void glcd_delay(void) 250ns delay for glcd clock
                 ;*************************************************************************
                 
                 	.global glcd_delay
                 	.func   glcd_delay
                 glcd_delay:
                 	nop					// 1 5 * 50ns = 250ns = 4MHz
                 	ret					// 4 (5 cycles)
                 	.endfunc
                 
                 ;*************************************************************************	
                 ; Do slave binding timing
                 ;*************************************************************************
                 
                 //	.global bind_slave
                 //	.func   bind_slave 
                 bind_slave:
                 	push	YL			//	1
                 	push	XL			//	1
                 
                 	ldi		XL,0x06		// 	1 Slave is 6 pulses
                 slave_loop:
                 	cbi 	portd,0		//	2
                 	ldi		YL,0x78		// 	1 		120us
                 	call	VarDelay	//	4
                 	sbi		portd,0		//	2
                 	ldi		YL,0x78		// 	1 		120us
                 	call	VarDelay	//	4
                 	dec		XL			//	1
                 	brne	slave_loop	//  2 1
                 
                 	pop		XL			//	  1
                 	pop		YL			//	  1
                 	ret					//	  4 
                 //	.endfunc
                 
                 */
                 ;*************************************************************************	
                 ; Do master binding timing
                 ;*************************************************************************
                 
                 //	.global bind_master
                 //	.func   bind_master
                 bind_master:
                 ;	push	YL			//	1
                 ;	push	XL			//	1
                 
                 ;	ldi		XL,0x03		// 	1 Master is 3 pulses for 1024/DSM2 (passed from Setuphardware)
                 master_loop:
000e71 9858      	cbi 	portd,0			//	2
000e72 e7c6      	ldi		YL,0x76		// 	1 		118us
000e73 940e 0e7c 	call	VarDelay	//	4
000e75 9a58      	sbi		portd,0			//	2
000e76 e7ca      	ldi		YL,0x7A		// 	1 		122us
000e77 940e 0e7c 	call	VarDelay	//	4
000e79 95aa      	dec		XL			//	1
000e7a f7b1      	brne	master_loop	//  2 1
                 
                 ;	pop		XL			//	  1
                 ;	pop		YL			//	  1
000e7b 9508      	ret					//	  4 
                 //	.endfunc
                 
                 ;*************************************************************************	
                 ; VarDelay: Loops YL units of us. Destroys YL
                 ; 5 cycles to configure and call, 4 to return and 2 to change bit afterwards = 11
                 ; 20 cycles makes 1.0us
                 ;*************************************************************************
                 
                 VarDelay:
000e7c c000      	rjmp V1		// 2
000e7d c000      V1:	rjmp V2		// 2
000e7e c000      V2:	rjmp V3		// 2
000e7f c000      V3:	rjmp V4		// 2
000e80 c000      V4:	rjmp V5		// 2
000e81 c000      V5:	rjmp V6		// 2
000e82 c000      V6:	rjmp V7		// 2
000e83 c000      V7:	rjmp V8		// 2
000e84 0000      V8:	nop					// 1
000e85 95ca      	dec 	YL			// 1
000e86 f7a9      	brne	VarDelay	// 2 1
                 .include "sat_readrx.asm"
000e87 9508      
                 	//************************************************************
                 	//* Spektrum Satellite format (8-N-1/115Kbps) MSB sent first
                 	//* DX7/DX6i: One data-frame at 115200 baud every 22ms.
                 	//*           Every frame is 16 byte long and consists of a 'frame loss' counter value
                 	//*           plus 7 channels.
                 	//*
                 	//*    byte1:  frame loss counter
                 	//*    byte2:  [0 0 0 R 0 0 N1 N0]
                 	//*    byte3:  channel data (MSB)
                 	//*    byte4:  channel data (LSB)
                 	//*    ...
                 	//*    byte15: channel data (MSB)
                 	//*    byte16: channel data (LSB)
                 	//* 
                 	//* Channel data (16 bit):
                 	//*
                 	//*   MSB:     [F 0 C3 C2 C1 C0 D9 D8]
                 	//*   LSB:     [D7 D6 D5 D4 D3 D2 D1 D0]
                 	//* 
                 	//* R: 0 for 10 bit resolution 1 for 11 bit resolution channel data
                 	//* N1 to N0 is the number of frames required to receive all channel data. 
                 	//* F: 1 = indicates beginning of 2nd frame for CH8-9 (DS9 only). Otherwise zero.
                 	//* C3 to C0 is the channel ID. 0 to 9 (4 bit, as assigned in the transmitter).
                 	//* D9 to D0 is the channel data (10 bit).
                 	//*
                 	//* Channel IDs:
                 	//*
                 	//*   0: Throttle, 1: Aileron, 2: Elevator, 3: Rudder, 4: Gear, 5: Aux1, 6: Aux2.
                 	//*
                 	//* The data values can range from 0 to 1023/2047 to define a servo pulse width 
                 	//* from approximately 0.75ms to 2.25ms (1.50ms difference). 1.465us per digit.
                 	//* A value of 171/342 is 1.0 ms
                 	//* A value of 512/1024 is 1.5 ms
                 	//* A value of 853/1706 is 2.0 ms
                 	//* 0 = 750us, 1023/2047 = 2250us
                 	//*
                 	//************************************************************
                 	
                 
                 	// This code supports DSM2 (10 bit, single frame) and DSMX (11 bit, single frame).
                 	// CH0 = Throttle, CH1 = Aileron, CH2 = Elevator, CH3 = Rudder, CH4 = Gear, etc....
                 
                 
                 	;--- Read all input channel values ---
                 
                 GetSatChannels:
                 
000e88 2744      	clr r20				;used for protocol detection
                 
000e89 9100 074d 	lds t, RxMode			;set registers and variables based on selected RX mode
000e8b 3004      	cpi t, RxModeSatDSMX
000e8c f0f1      	breq sat8
                 
000e8d e12c      	ldi r18, 0x1C			;DSM2
000e8e e033      	ldi r19, 0x03			;mask for 10 bit data (DSM2)
000e8f e002
000e90 9300 0549
000e92 e000
000e93 9300 054a
000e95 e000
000e96 9300 054b 	b16ldi RxOffset, 512
000e98 e000
000e99 9300 0540
000e9b e002
000e9c 9300 0541
000e9e ee0e
000e9f 9300 0542 	b16ldi Temp, 2.93		;will convert range [-341, 341] to [-1000, 1000] (throttle = [0, 1880])
000ea1 e000
000ea2 9300 0543
000ea4 ec0d
000ea5 9300 0544
000ea7 e000
000ea8 9300 0545 	b16ldi Temp2, 205		;throttle value adjustment
000eaa c01d      	rjmp sat9
                 
000eab e328      sat8:	ldi r18, 0x38			;DSMX
000eac e037      	ldi r19, 0x07			;mask for 11 bit data (DSMX)
000ead e004
000eae 9300 0549
000eb0 e000
000eb1 9300 054a
000eb3 e000
000eb4 9300 054b 	b16ldi RxOffset, 1024
000eb6 e000
000eb7 9300 0540
000eb9 e001
000eba 9300 0541
000ebc e707
000ebd 9300 0542 	b16ldi Temp, 1.466		;will convert range [-682, 682] to [-1000, 1000] (throttle = [0, 1880])
000ebf e001
000ec0 9300 0543
000ec2 e90a
000ec3 9300 0544
000ec5 e000
000ec6 9300 0545 	b16ldi Temp2, 410		;throttle value adjustment
                 
000ec8 9330 07da sat9:	sts SatDataMask, r19		;data mask (MSB)
                 
000eca 91a0 07f8 	lds xl, RxBufferIndex		;data received since last iteration?
000ecc 91b0 07f9 	lds xh, RxBufferIndexOld
000ece 17ab      	cp xl, xh
000ecf f059      	breq sat12
                 
000ed0 93a0 07f9 	sts RxBufferIndexOld, xl	;yes. Will use old input values, but only if valid
000ed2 e001      	ldi t, 1
000ed3 9300 07fa 	sts RxBufferState, t
000ed5 9100 07db
000ed7 2300
000ed8 f40a      	rvbrflagfalse RxFrameValid, sat11
                 
000ed9 c05d      	rjmp sat31			;use old input values
                 
000eda c115      sat11:	rjmp sat24			;clear all input channels before leaving
                 
000edb 9100 07fa sat12:	lds t, RxBufferState		;no additional data received. Frame sync?
000edd 3002      	cpi t, 2
000ede f069      	breq sat13
                 
000edf 2300      	tst t				;no, update status (if non-zero). 0 = No data received since start-up or re-sync
000ee0 f3c9      	breq sat11
                 
000ee1 9503      	inc t
000ee2 3604      	cpi t, 100
000ee3 f008      	brlo sat15
                 
000ee4 950a      	dec t				;prevent wrap-around
                 
000ee5 9300 07fa sat15:	sts RxBufferState, t
000ee7 9100 07db
000ee9 2300
000eea f77a      	rvbrflagfalse RxFrameValid, sat11
                 
000eeb c04b      	rjmp sat31			;use old input values
                 
000eec 91a0 07f8 sat13:	lds xl, RxBufferIndex		;is the communication synchronized?
000eee 23aa      	tst xl
000eef f081      	breq sat14
                 
000ef0 2700      	clr t				;no, try to recover...
000ef1 9300 07fa 	sts RxBufferState, t
000ef3 9300 07f9 	sts RxBufferIndexOld, t
000ef5 94f8      	cli
000ef6 9300 07f8 	sts RxBufferIndex, t
000ef8 eded
000ef9 e0f7      	ldz RxBuffer0
000efa 93e0 07f6 	sts RxBufferAddressL, zl
000efc 93f0 07f7 	sts RxBufferAddressH, zh
000efe 9478      	sei
000eff c0f0      	rjmp sat24			;clear all input channels before leaving
                 
000f00 ef0f      sat14:	ser t				;the data frame appears to be valid
000f01 9300 07db 	sts RxFrameValid, t
                 
000f03 edaf
000f04 e0b7      	ldx RxBuffer2			;skip first 2 bytes
000f05 e012      	ldi r17, 2			;using register R17 as Byte Index
                 
000f06 ebe0
000f07 e0f7      sat3:	ldz Channel1L			;set Channel Array to 1st location
000f08 91dd      	ld yh, x+			;get MSB from the satelite array
000f09 91cd      	ld yl, x+			;get LSB from the satelite array
                 
000f0a 3fdf      	cpi yh, 0xFF			;ignore non-existent channel
000f0b f079      	breq sat6
                 
000f0c 2b4d      	or r20, yh			;protocol detection
                 
000f0d 2f0d      	mov t, yh			;the channel ID is used to store the channel value at the correct index in the Channel array
000f0e 9506      	lsr t
                 
000f0f 3328      	cpi r18, 0x38			;11 data bits?
000f10 f409      	brne sat4
                 
000f11 9506      	lsr t				;yes, shift the channel ID one more time
                 
000f12 700e      sat4:	andi t, 0x0E			;mask Channel ID (multiplied by two and limited to 7 channels)
000f13 9503      	inc t				;add one so we end up at ChannelXH
                 	
000f14 0fe0      	add zl, t			;adjust the Channel array pointer to match the satelite channel ID
000f15 f408      	brcc sat2
                 
000f16 95f3      	inc zh
                 
000f17 23d3      sat2:	and yh, r19			;data mask for MSB
000f18 83d0      	st z, yh			;store and decrement pointer to reach ChannelXL
000f19 9731      	sbiw z, 1
000f1a 83c0      	st z, yl			;store D0 to D7
                 
000f1b 9513      sat6:	inc r17				;continue the loop until all 7 channel values have been copied
000f1c 9513      	inc r17
000f1d 3110      	cpi r17, 16
000f1e f33c      	brlt sat3
                 
                 	;Protocol detection
000f1f 2f03      	mov t, r19			;register R19 holds the MSB data mask for the selected mode
000f20 9500      	com t
000f21 2340      	and r20, t
000f22 1742      	cp r20, r18
000f23 f069      	breq sat1
                 
000f24 9100 079d
000f26 6200
000f27 9300 079d 	setstatusbit SatProtocolError	;protocol error detected, clear all input channels before leaving
000f29 9100 0770
000f2b 2300
000f2c f41a      	rvbrflagfalse flagArmed, sat5
                 
000f2d e0a3      	ldi xl, ErrorSatProtocolFail
000f2e 940e 1573 	call LogError
                 
000f30 c0bf      sat5:	rjmp sat24
                 
                 
                 sat1:	;Set signal for "New frame"
000f31 e003      	ldi t, 3
000f32 9300 07fa 	sts RxBufferState, t
                 
000f34 2700      	clr t				;reset timeout counter
000f35 9300 07a8 	sts TimeoutCounter, t
                 
                 
                 sat31:	;--- Virtual channels ---
                 
000f37 2700      	clr t
000f38 9300 07be 	sts Channel8L, t
000f3a 9300 07bf 	sts Channel8H, t
                 
                 
                 	;--- Roll ---
                 
000f3c 9000 07c2 	lds r0, MappedChannel1		;get aileron channel value
000f3e d0b3      	rcall GetSatChannelValue
000f3f d0bf      	rcall AdjustSatValue
000f40 940e 458e 	call DeadZone
000f42 93b0 054c
000f44 93a0 054d
000f46 93d0 054e 	b16store RxRoll
000f48 940e 45a0 	call IsChannelCentered
000f4a 93c0 0774 	sts flagAileronCentered, yl
                 
                 	
                 	;--- Pitch ---
                 
000f4c 9000 07c3 	lds r0, MappedChannel2		;get elevator channel value
000f4e d0a3      	rcall GetSatChannelValue
000f4f d0af      	rcall AdjustSatValue
000f50 940e 458e 	call DeadZone
000f52 93b0 054f
000f54 93a0 0550
000f56 93d0 0551 	b16store RxPitch
000f58 940e 45a0 	call IsChannelCentered
000f5a 93c0 0775 	sts flagElevatorCentered, yl
                 
                 
                 	;--- Throttle ---
                 
000f5c 9000 07c4 	lds r0, MappedChannel3		;get throttle channel value
000f5e d093      	rcall GetSatChannelValue
                 
000f5f 2700
000f60 9300 0773 	rvsetflagfalse flagThrottleZero
                 
000f62 91f0 0543
000f64 91e0 0544 	b16loadz Temp2			;throttle value adjustment
000f66 1bae      	sub xl, zl
000f67 0bbf      	sbc xh, zh
000f68 d0a0      	rcall AdjustSatValue2
                 
000f69 e0e0
000f6a e0f0      	ldz 0				;X < 0 ?
000f6b 17ae      	cp  xl, zl
000f6c 07bf      	cpc xh, zh
000f6d f42c      	brge sat30
                 
000f6e e0a0
000f6f e0b0      	ldx 0				;yes, set to zero
000f70 ef0f
000f71 9300 0773 	rvsetflagtrue flagThrottleZero
                 
000f73 93b0 0552
000f75 93a0 0553
000f77 93d0 0554 sat30:	b16store RxThrottle
                 
                 
                 	;--- Yaw ---
                 
000f79 9000 07c5 	lds r0, MappedChannel4		;get rudder channel value
000f7b d076      	rcall GetSatChannelValue
000f7c d082      	rcall AdjustSatValue
000f7d 940e 458e 	call DeadZone
000f7f 93b0 0555
000f81 93a0 0556
000f83 93d0 0557 	b16store RxYaw
                 
                 	
                 	;--- AUX ---
                 
000f85 9000 07c6 	lds r0, MappedChannel5		;get aux channel value
000f87 d06a      	rcall GetSatChannelValue
000f88 d076      	rcall AdjustSatValue
000f89 93b0 0558
000f8b 93a0 0559
000f8d 93d0 055a 	b16store RxAux
                 
000f8f 27cc      	clr yl				;AUX switch position #1
000f90 eae8
000f91 effd      	ldz -600
000f92 17ae      	cp  xl, zl
000f93 07bf      	cpc xh, zh
000f94 f09c      	brlt sat35
                 
000f95 95c3      	inc yl				;AUX switch position #2
000f96 e3e8
000f97 efff      	ldz -200
000f98 17ae      	cp  xl, zl
000f99 07bf      	cpc xh, zh
000f9a f06c      	brlt sat35
                 
000f9b 95c3      	inc yl				;AUX switch position #3
000f9c ece8
000f9d e0f0      	ldz 200
000f9e 17ae      	cp  xl, zl
000f9f 07bf      	cpc xh, zh
000fa0 f03c      	brlt sat35
                 
000fa1 95c3      	inc yl				;AUX switch position #4
000fa2 e5e8
000fa3 e0f2      	ldz 600
000fa4 17ae      	cp  xl, zl
000fa5 07bf      	cpc xh, zh
000fa6 f00c      	brlt sat35
                 
000fa7 95c3      	inc yl				;AUX switch position #5
                 
000fa8 93c0 0781 sat35:	sts AuxSwitchPosition, yl
                 
                 
                 	;--- AUX2 ---
                 
000faa 9000 07c7 	lds r0, MappedChannel6		;get aux2 channel value
000fac d045      	rcall GetSatChannelValue
000fad d051      	rcall AdjustSatValue
000fae 93b0 055b
000fb0 93a0 055c
000fb2 93d0 055d 	b16store RxAux2
                 
                 
                 	;--- AUX3 ---
                 
000fb4 9000 07c8 	lds r0, MappedChannel7		;get aux3 channel value
000fb6 d03b      	rcall GetSatChannelValue
000fb7 d047      	rcall AdjustSatValue
000fb8 93b0 055e
000fba 93a0 055f
000fbc 93d0 0560 	b16store RxAux3
                 
                 
                 	;--- AUX4 ---
                 
000fbe 9000 07c9 	lds r0, MappedChannel8		;get aux4 channel value
000fc0 d031      	rcall GetSatChannelValue
000fc1 d03d      	rcall AdjustSatValue
000fc2 93b0 0561
000fc4 93a0 0562
000fc6 93d0 0563 	b16store RxAux4
                 
000fc8 27cc      	clr yl				;AUX4 switch position #1
000fc9 e7e0
000fca effe      	ldz -400
000fcb 17ae      	cp  xl, zl
000fcc 07bf      	cpc xh, zh
000fcd f03c      	brlt sat38
                 
000fce 95c3      	inc yl				;AUX4 switch position #2
000fcf e9e0
000fd0 e0f1      	ldz 400
000fd1 17ae      	cp  xl, zl
000fd2 07bf      	cpc xh, zh
000fd3 f00c      	brlt sat38
                 
000fd4 95c3      	inc yl				;AUX4 switch position #3
                 
000fd5 93c0 078e sat38:	sts Aux4SwitchPosition, yl
                 
                 
                 	;--- Check RX ---
                 
000fd7 9100 07db
000fd9 2300
000fda f4aa      	rvbrflagfalse RxFrameValid, sat24
000fdb c003      	rjmp sat22
                 
000fdc 9300 07a8 sat23:	sts TimeoutCounter, t
000fde 9508      	ret
                 
000fdf 9100 07a8 sat22:	lds t, TimeoutCounter		;timeout?
000fe1 9503      	inc t
000fe2 3f0a      	cpi t, TimeoutLimit
000fe3 f3c0      	brlo sat23
                 
000fe4 9100 0770
000fe6 2300
000fe7 f442      	rvbrflagfalse flagArmed, sat24	;yes
                 
000fe8 9100 079d
000fea 6003
000feb 9300 079d 	setstatusbit RxSignalLost	;set status bit for "Signal Lost" and activate the Lost Model alarm only when armed
000fed ef0f
000fee 9300 077e 	rvsetflagtrue flagAlarmOverride
                 
000ff0 940c 0bb6 sat24:	jmp ClearInputChannels		;will tag the received frame as invalid and clear all input channels
                 
                 
                 
                 	;--- Get channel value ---
                 
                 GetSatChannelValue:
                 
000ff2 ebe0
000ff3 e0f7
000ff4 e002
000ff5 9d00
000ff6 0de0
000ff7 1df1      	ldzarray Channel1L, 2, r0	;register R0 (input parameter) holds the mapped channel ID
000ff8 91a1      	ld xl, z+
000ff9 81b0      	ld xh, z
000ffa 27dd      	clr yh
                 
000ffb 9100 07da 	lds t, SatDataMask		;limit value to 1023 or 2047
000ffd 23b0      	and xh, t
000ffe 9508      	ret
                 
                 
                 
                 	;--- Adjust satellite value ---
                 
                 AdjustSatValue:				;subtract Spektrum Satelite channel value offset and adjust the input range
                 
000fff 17ad      	cp xl, yh			;unused channel (value == zero)?
001000 07bd      	cpc xh, yh
001001 f409      	brne asv1
                 
001002 9508      	ret				;yes, return zero
                 
001003 91f0 0549
001005 91e0 054a asv1:	b16loadz RxOffset
001007 1bae      	sub xl, zl
001008 0bbf      	sbc xh, zh
                 
                 AdjustSatValue2:
                 
001009 93b0 0546
00100b 93a0 0547
00100d 93d0 0548 	b16store Temper
00100f 9110 0546
001011 9120 0547
001013 9130 0548
001015 9140 0540
001017 9150 0541
001019 9160 0542
00101b 940e 4f3a
00101d 9370 0546
00101f 9380 0547
001021 9220 0548 	b16mul Temper, Temper, Temp
001023 91b0 0546
001025 91a0 0547
001027 91d0 0548 	b16load Temper
001029 9508      	ret
                 
                 
                 
                 	;--- Set or clear RX error ---
                 
                 CheckSatRx:
                 
00102a 9100 07db 	lds t, RxFrameValid
00102c 9500      	com t
00102d 7100      	andi t, NoSatelliteInput
00102e 91a0 079d 	lds xl, StatusBits
001030 7eaf      	cbr xl, NoSatelliteInput
001031 2b0a      	or t, xl
001032 9300 079d 	sts StatusBits, t
001034 9508      	ret
                 
                 
                 .include "gimbal.asm"
                 
                 .def Item = r17
                 .def Xoffset = r18
                 
                 GimbalSettings:
                 
001035 940e 30b6 	call LoadMixerTable		;display a warning if output type on M7/M8 is set to 'ESC'
001037 940e 32da 	call UpdateOutputTypeAndRate
001039 9100 0769 	lds t, OutputTypeBitmask
00103b 7c00      	andi t, 0xC0
00103c f009      	breq gbs11
                 
00103d d11e      	rcall ShowEscWarning
                 
00103e 940e 4d81 gbs11:	call LcdClear6x8
                 
                 	;labels
001040 e005      	ldi t, 5
001041 eee6
001042 e2f1      	ldz cam6*2
001043 940e 4c18 	call PrintStringArray
                 
                 	;values
001045 e001
001046 9300 0740 	lrv Y1, 1
001048 e428      	ldi Xoffset, 72
001049 ebe1
00104a e0f0      	ldz eeCamRollGain
00104b d107      	rcall PrintGimbalValue		;roll gain
00104c d106      	rcall PrintGimbalValue		;roll offset
00104d d105      	rcall PrintGimbalValue		;pitch gain
00104e d104      	rcall PrintGimbalValue		;pitch offset
                 
00104f 9320 073f 	sts X1, Xoffset			;mixing (none or differential)
001051 940e 4ba7 	call PrintColonAndSpace
001053 ebe9
001054 e0f0      	ldz eeCamServoMixing
001055 940e 4eef 	call GetEePVariable8
001057 9300 07a2 	sts CamServoMixing, t
001059 7001      	andi t, 0x01
00105a efec
00105b e2f1      	ldz mix*2
00105c 940e 4c0f 	call PrintFromStringArray
                 
                 	;footer
00105e e000
00105f 9300 073f 	lrv X1, 0
001061 e309
001062 9300 0740 	lrv Y1, 57
001064 eaec
001065 e9fb      	ldz bckmore*2
001066 940e 4c2e 	call PrintString
001068 ebe6
001069 e9fb      	ldz nxtchng*2
00106a 940e 4c2e 	call PrintString
                 
                 	;print selector
00106c e2e2
00106d e2f2
00106e e004
00106f 9f01
001070 0de0
001071 1df1      	ldzarray gbs7*2, 4, Item
001072 940e 4b0f 	call PrintSelector
                 
001074 940e 4d2c 	call LcdUpdate
                 
001076 940e 4ed1 	call GetButtonsBlocking
                 
001078 3008      	cpi t, 0x08			;BACK?
001079 f409      	brne gbs10
00107a 9508      	ret	
                 
00107b 3004      gbs10:	cpi t, 0x04			;MORE?
00107c f411      	brne gbs9
                 
00107d d022      	rcall Gimbal2			;go to the second screen
00107e cfbf      	rjmp gbs11	
                 
00107f 3002      gbs9:	cpi t, 0x02			;NEXT?
001080 f429      	brne gbs12
                 
001081 9513      	inc Item
001082 3015      	cpi Item, 5
001083 f00c      	brlt gbs13
                 
001084 2711      	clr Item
                 
001085 cfb8      gbs13:	rjmp gbs11	
                 
001086 3001      gbs12:	cpi t, 0x01			;CHANGE?
001087 f7e9      	brne gbs13
                 
001088 3014      	cpi Item, 4
001089 f451      	brne gbs30
                 
00108a 91a0 07a2 	lds xl, CamServoMixing		;toggle mixing mode
00108c 95a0      	com xl
00108d 93a0 07a2 	sts CamServoMixing, xl
00108f ebe9
001090 e0f0      	ldz eeCamServoMixing
001091 940e 4ef5 	call StoreEePVariable8
001093 cfaa      	rjmp gbs11
                 
001094 ebe1
001095 e0f0
001096 e002
001097 9f01
001098 0de0
001099 1df1      gbs30:	ldzarray eeCamRollGain, 2, Item	;edit gain or offset value
00109a edc8
00109b eddc      	ldy -9000			;lower limit
00109c e2a8
00109d e2b3      	ldx 9000			;upper limit
00109e d0a3      	rcall EditGimbalValue
00109f cf9e      	rjmp gbs11
                 
                 
                 
                 	;--- Second screen ---
                 
                 Gimbal2:
                 
0010a0 2711      	clr Item
0010a1 e524      	ldi Xoffset, 84
                 
0010a2 940e 4d81 gbs201:	call LcdClear6x8
                 
0010a4 e002      	ldi t, 2			;print all text labels first
0010a5 e1ee
0010a6 e2f2      	ldz gbs6*2
0010a7 940e 4c18 	call PrintStringArray
                 
0010a9 e001
0010aa 9300 0740 	lrv Y1, 1			;print values
0010ac ebea
0010ad e0f0      	ldz eeCamRollHomePos
0010ae d0a4      	rcall PrintGimbalValue		;roll home position
0010af d0a3      	rcall PrintGimbalValue		;pitch home position
                 
                 	;footer
0010b0 940e 4bca 	call PrintStdFooter
                 
                 	;print selector
0010b2 e3e6
0010b3 e2f2
0010b4 e004
0010b5 9f01
0010b6 0de0
0010b7 1df1      	ldzarray gbs8*2, 4, Item
0010b8 940e 4b0f 	call PrintSelector
                 
0010ba 940e 4d2c 	call LcdUpdate
                 
0010bc 940e 4ed1 	call GetButtonsBlocking
                 
0010be 3008      	cpi t, 0x08			;BACK?
0010bf f411      	brne gbs220
                 
0010c0 2711      	clr Item			;return to the first screen
0010c1 9508      	ret
                 
0010c2 3004      gbs220:	cpi t, 0x04			;PREV?
0010c3 f419      	brne gbs223
                 
0010c4 951a      gbs221:	dec Item
0010c5 7011      	andi Item, 0x01
                 
0010c6 cfdb      gbs222:	rjmp gbs201
                 
0010c7 3002      gbs223:	cpi t, 0x02			;NEXT?
0010c8 f3d9      	breq gbs221
                 
0010c9 3001      	cpi t, 0x01			;CHANGE?
0010ca f7d9      	brne gbs222
                 
0010cb ebea
0010cc e0f0
0010cd e002
0010ce 9f01
0010cf 0de0
0010d0 1df1      	ldzarray eeCamRollHomePos, 2, Item
0010d1 e1c8
0010d2 efdc      	ldy -1000			;lower limit
0010d3 eea8
0010d4 e0b3      	ldx 1000			;upper limit
0010d5 d06c      	rcall EditGimbalValue
0010d6 cfcb      	rjmp gbs201
                 
                 
                 
0010d7 6f52
0010d8 6c6c
0010d9 4720
0010da 6961
0010db 006e      cam1:	.db "Roll Gain", 0
0010dc 6f52
0010dd 6c6c
0010de 4f20
0010df 6666
0010e0 6573
0010e1 0074      cam2:	.db "Roll Offset", 0
0010e2 6950
0010e3 6374
0010e4 2068
0010e5 6147
0010e6 6e69
0010e7 0000      cam3:	.db "Pitch Gain", 0, 0
0010e8 6950
0010e9 6374
0010ea 2068
0010eb 664f
0010ec 7366
0010ed 7465
0010ee 0000      cam4:	.db "Pitch Offset", 0, 0
0010ef 694d
0010f0 6978
0010f1 676e
0010f2 0000      cam5:	.db "Mixing", 0, 0
                 
0010f3 21ae
0010f4 21b8
0010f5 21c4
0010f6 21d0
0010f7 21de      cam6:	.dw cam1*2, cam2*2, cam3*2, cam4*2, cam5*2
                 
0010f8 6f4e
0010f9 656e
0010fa 0000      none:	.db "None", 0, 0
0010fb 6944
0010fc 6666
0010fd 0000      diff:	.db "Diff", 0, 0
                 
0010fe 21f0
0010ff 21f6      mix:	.dw none*2, diff*2
                 
001100 6f48
001101 656d
001102 5020
001103 736f
001104 5220
001105 6c6f
001106 006c      gbs1:	.db "Home Pos Roll", 0
001107 6f48
001108 656d
001109 5020
00110a 736f
00110b 5020
00110c 7469
00110d 6863
00110e 0000      gbs2:	.db "Home Pos Pitch", 0, 0
                 
00110f 2200
001110 220e      gbs6:	.dw gbs1*2, gbs2*2
                 
                 
001111 0053
001112 0973      gbs7:	.db 83, 0, 115, 9
001113 0953
001114 1273      	.db 83, 9, 115, 18
001115 1253
001116 1b73      	.db 83, 18, 115, 27
001117 1b53
001118 2473      	.db 83, 27, 115, 36
001119 2453
00111a 2d73      	.db 83, 36, 115, 45
                 
00111b 005f
00111c 097f      gbs8:	.db 95, 0, 127, 9
00111d 095f
00111e 127f      	.db 95, 9, 127, 18
                 
                 
00111f 754f
001120 7074
001121 7475
001122 7420
001123 7079
001124 2065
001125 7369
001126 7320
001127 7465
001128 7420
001129 006f      sew1:	.db "Output type is set to", 0
00112a 5345
00112b 2043
00112c 6f66
00112d 2072
00112e 374d
00112f 6120
001130 646e
001131 6f2f
001132 2072
001133 384d
001134 002e      sew2:	.db "ESC for M7 and/or M8.", 0
001135 6843
001136 6365
001137 206b
001138 694d
001139 6578
00113a 2072
00113b 6445
00113c 7469
00113d 726f
00113e 002e      sew3:	.db "Check Mixer Editor.", 0
                 
00113f 223e
001140 2254
001141 226a      sew10:	.dw sew1*2, sew2*2, sew3*2
                 
                 
                 
                 	;--- Edit gimbal value ---
                 
                 EditGimbalValue:			;input parameters: X=upper limit, Y=lower limit, Z=EEPROM variable
                 
001142 93ef
001143 93ff      	pushz
001144 93af
001145 93bf      	pushx
001146 940e 4edd 	call GetEePVariable16
001148 91ff
001149 91ef      	popz
00114a 940e 33a4 	call NumberEdit
00114c 2da0      	mov xl, r0
00114d 2db1      	mov xh, r1
00114e 91ff
00114f 91ef      	popz
001150 940e 4ee6 	call StoreEePVariable16
001152 9508      	ret
                 
                 
                 
                 	;--- Print 16bit value and set cursor position ---
                 
                 PrintGimbalValue:
                 
001153 9320 073f 	sts X1, Xoffset
001155 940e 4ba7 	call PrintColonAndSpace
001157 940e 4edd 	call GetEePVariable16
001159 940e 4b88 	call PrintNumberLF
00115b 9508      	ret
                 
                 
                 
                 	;--- ESC warning dialogue ---
                 
                 ShowEscWarning:
                 
00115c 940e 4d8f 	call LcdClear12x16
                 
00115e 940e 4b98 	call PrintWarningHeader
                 
001160 e003      	ldi t, 3			;print warning text
001161 e7ee
001162 e2f2      	ldz sew10*2
001163 940e 4c18 	call PrintStringArray
                 
                 	;footer
001165 940e 4bf3 	call PrintOkFooter
                 
001167 940e 4d2c 	call LcdUpdate
                 
001169 940e 4ed8 	call WaitForOkButton
00116b 9508      	ret
                 
                 
                 
                 .undef Item
                 .undef Xoffset
                 
                 
                 
                 	;--- Gimbal stabilization ---
                 
                 GimbalStab:
                 
00116c e000
00116d 9300 0540
00116f 9300 0541
001171 9300 0542 	b16clr Temp					;gimbal will be deactivated if both gains are zero. This allows OCTOs to be used
001173 9130 06b1
001175 9140 06b2
001177 9150 06b3
001179 9160 0540
00117b 9170 0541
00117d 9180 0542
00117f 1758
001180 0747
001181 0736      	b16cmp CamRollGain, Temp
001182 f009      	breq gbs26
001183 c011      	rjmp gbs22
                 
001184 9130 06b7
001186 9140 06b8
001188 9150 06b9
00118a 9160 0540
00118c 9170 0541
00118e 9180 0542
001190 1758
001191 0747
001192 0736      gbs26:	b16cmp CamPitchGain, Temp
001193 f409      	brne gbs22
001194 9508      	ret
                 
001195 9100 07a6 gbs22:	lds t, TuningMode				;use center offset position when tuning mode is active
001197 2300      	tst t
001198 f069      	breq gbs21
                 
001199 e000
00119a 9300 055b
00119c 9300 055c
00119e 9300 055d 	b16clr RxAux2
0011a0 9300 055e
0011a2 9300 055f
0011a4 9300 0560 	b16set RxAux3
                 
0011a6 9100 078e gbs21:	lds t, Aux4SwitchPosition			;go to home position if the AUX4 switch is in position #3
0011a8 3002      	cpi t, 2
0011a9 f529      	brne gbs27
                 
0011aa 9100 06c6
0011ac 9300 055b
0011ae 9100 06c7
0011b0 9300 055c
0011b2 9100 06c8
0011b4 9300 055d 	b16mov RxAux2, CamPitchHomePos
0011b6 9100 06c3
0011b8 9300 055e
0011ba 9100 06c4
0011bc 9300 055f
0011be 9100 06c5
0011c0 9300 0560 	b16mov RxAux3, CamRollHomePos
0011c2 e000
0011c3 9300 06c0
0011c5 9300 06c1
0011c7 9300 06c2 	b16clr CamPitch
0011c9 9300 06bd
0011cb 9300 06be
0011cd 9300 06bf 	b16set CamRoll
                 
0011cf 9130 055b
0011d1 9140 055c
0011d3 9150 055d
0011d5 9160 06ba
0011d7 9170 06bb
0011d9 9180 06bc
0011db 0f58
0011dc 1f47
0011dd 1f36
0011de 9330 055b
0011e0 9340 055c
0011e2 9350 055d gbs27:	b16add RxAux2, RxAux2, CamPitchOffset		;add gimbal parameter offsets
0011e4 9130 055e
0011e6 9140 055f
0011e8 9150 0560
0011ea 9160 06b4
0011ec 9170 06b5
0011ee 9180 06b6
0011f0 0f58
0011f1 1f47
0011f2 1f36
0011f3 9330 055e
0011f5 9340 055f
0011f7 9350 0560 	b16add RxAux3, RxAux3, CamRollOffset
                 
0011f9 e003
0011fa 9300 0540
0011fc ee08
0011fd 9300 0541
0011ff e000
001200 9300 0542 	b16ldi Temp, 1000.0				;utilize the full input range.by adding 1000 and dividing by 2
001202 9130 055b
001204 9140 055c
001206 9150 055d
001208 9160 0540
00120a 9170 0541
00120c 9180 0542
00120e 0f58
00120f 1f47
001210 1f36
001211 9330 055b
001213 9340 055c
001215 9350 055d 	b16add RxAux2, RxAux2, Temp
001217 9130 055e
001219 9140 055f
00121b 9150 0560
00121d 9160 0540
00121f 9170 0541
001221 9180 0542
001223 0f58
001224 1f47
001225 1f36
001226 9330 055e
001228 9340 055f
00122a 9350 0560 	b16add RxAux3, RxAux3, Temp
                 
00122c e000
00122d 9300 0540
00122f e002
001230 9300 0541
001232 e800
001233 9300 0542 	b16ldi Temp, 2.5				; = 5 / 2  (modified to utilize the full input range)
001235 9110 055b
001237 9120 055c
001239 9130 055d
00123b 9140 0540
00123d 9150 0541
00123f 9160 0542
001241 940e 4f3a
001243 9370 06cc
001245 9380 06cd
001247 9220 06ce 	b16mul NewCamPitchOffset, RxAux2, Temp
001249 9110 055e
00124b 9120 055f
00124d 9130 0560
00124f 9140 0540
001251 9150 0541
001253 9160 0542
001255 940e 4f3a
001257 9370 06c9
001259 9380 06ca
00125b 9220 06cb 	b16mul NewCamRollOffset, RxAux3, Temp
                 
00125d 9100 078e 	lds t, Aux4SwitchPosition			;update gimbal roll and pitch values only if the gimbal is unlocked (i.e. AUX4 switch position #2)
00125f 3001      	cpi t, 1
001260 f541      	brne gbs25
                 
001261 9110 069f
001263 9120 06a0
001265 9130 06a1
001267 9140 06b1
001269 9150 06b2
00126b 9160 06b3
00126d 940e 4f3a
00126f 9370 06bd
001271 9380 06be
001273 9220 06bf 	b16mul CamRoll, EulerAngleRoll, CamRollGain	;calculate camera angles
001275 9110 06a2
001277 9120 06a3
001279 9130 06a4
00127b 9140 06b7
00127d 9150 06b8
00127f 9160 06b9
001281 940e 4f3a
001283 9370 06c0
001285 9380 06c1
001287 9220 06c2 	b16mul CamPitch, EulerAnglePitch, CamPitchGain
                 
001289 9100 07a2
00128b 2300
00128c f00a      gbs25:	rvbrflagtrue CamServoMixing, gbs20
00128d c09f      	rjmp gbs24					;jump for regular output
                 
00128e 9100 06bd
001290 9300 0540
001292 9100 06be
001294 9300 0541
001296 9100 06bf
001298 9300 0542 gbs20:	b16mov Temp, CamRoll				;differential mixing
00129a 9130 06bd
00129c 9140 06be
00129e 9150 06bf
0012a0 9160 06c0
0012a2 9170 06c1
0012a4 9180 06c2
0012a6 1b58
0012a7 0b47
0012a8 0b36
0012a9 9330 06bd
0012ab 9340 06be
0012ad 9350 06bf 	b16sub CamRoll, CamRoll, CamPitch
0012af 9130 06c0
0012b1 9140 06c1
0012b3 9150 06c2
0012b5 9160 0540
0012b7 9170 0541
0012b9 9180 0542
0012bb 0f58
0012bc 1f47
0012bd 1f36
0012be 9330 06c0
0012c0 9340 06c1
0012c2 9350 06c2 	b16add CamPitch, CamPitch, Temp
                 
0012c4 9100 06c9
0012c6 9300 0540
0012c8 9100 06ca
0012ca 9300 0541
0012cc 9100 06cb
0012ce 9300 0542 	b16mov Temp, NewCamRollOffset
0012d0 9130 06c9
0012d2 9140 06ca
0012d4 9150 06cb
0012d6 9160 06cc
0012d8 9170 06cd
0012da 9180 06ce
0012dc 1b58
0012dd 0b47
0012de 0b36
0012df 9330 06c9
0012e1 9340 06ca
0012e3 9350 06cb 	b16sub NewCamRollOffset, NewCamRollOffset, NewCamPitchOffset
0012e5 9130 06cc
0012e7 9140 06cd
0012e9 9150 06ce
0012eb 9160 0540
0012ed 9170 0541
0012ef 9180 0542
0012f1 0f58
0012f2 1f47
0012f3 1f36
0012f4 9330 06cc
0012f6 9340 06cd
0012f8 9350 06ce 	b16add NewCamPitchOffset, NewCamPitchOffset, Temp
                 
0012fa e009
0012fb 9300 0540
0012fd ec04
0012fe 9300 0541
001300 e000
001301 9300 0542 	b16ldi Temp, 2500.0				; = 1000 * 2.5 (compensate for differential offset)
001303 9130 06c9
001305 9140 06ca
001307 9150 06cb
001309 9160 0540
00130b 9170 0541
00130d 9180 0542
00130f 0f58
001310 1f47
001311 1f36
001312 9330 06c9
001314 9340 06ca
001316 9350 06cb 	b16add NewCamRollOffset, NewCamRollOffset, Temp
001318 9130 06cc
00131a 9140 06cd
00131c 9150 06ce
00131e 9160 0540
001320 9170 0541
001322 9180 0542
001324 1b58
001325 0b47
001326 0b36
001327 9330 06cc
001329 9340 06cd
00132b 9350 06ce 	b16sub NewCamPitchOffset, NewCamPitchOffset, Temp
                 
00132d 9130 06bd
00132f 9140 06be
001331 9150 06bf
001333 9160 06c9
001335 9170 06ca
001337 9180 06cb
001339 0f58
00133a 1f47
00133b 1f36
00133c 9330 0621
00133e 9340 0622
001340 9350 0623 gbs24:	b16add Out7, CamRoll, NewCamRollOffset		;outputs will be set only when FC is armed and throttle is applied
001342 9130 06c0
001344 9140 06c1
001346 9150 06c2
001348 9160 06cc
00134a 9170 06cd
00134c 9180 06ce
00134e 0f58
00134f 1f47
001350 1f36
001351 9330 0624
001353 9340 0625
001355 9350 0626 	b16add Out8, CamPitch, NewCamPitchOffset
                 
001357 9100 0621
001359 9300 0651
00135b 9100 0622
00135d 9300 0652
00135f 9100 0623
001361 9300 0653 	b16mov Offset7, Out7				;makes it possible to adjust the gimbal in 'SAFE' mode also
001363 9100 0624
001365 9300 0654
001367 9100 0625
001369 9300 0655
00136b 9100 0626
00136d 9300 0656 	b16mov Offset8, Out8				;(offset is used in 'SAFE' mode and in 'ARMED' mode until throttle is applied)
00136f 9508      	ret
                 #ifdef STANDALONE_GIMBAL_CONTROLLER
                 #endif
                 
                 .include "motorcheck.asm"
                 
                 
                 .def Motor = r17
                 .def Output = r18
                 .def OutputType = r21
                 
                 
                 MotorCheck:
                 
001370 ebef
001371 e0f0      	ldz eeMotorLayoutOK			;refuse access if no motor layout is loaded
001372 940e 4f15 	call ReadEeprom				;read from user profile #1
001374 2300
001375 f02a      	brflagtrue t, mch10
                 
001376 eeec
001377 e6fa      	ldz nadtxt1*2
001378 940e 357a 	call ShowNoAccessDlg
00137a 9508      	ret
                 
00137b d14a      mch10:	rcall DisplayPropWarning
00137c f408      	brcc mch11
                 
00137d 9508      	ret					;the BACK button was pushed
                 
00137e 940e 32a9 mch11:	call LoadEscLowLimit			;initialize variables that might have been modified without returning to the SAFE screen
001380 940e 30b6 	call LoadMixerTable
001382 940e 32da 	call UpdateOutputTypeAndRate
                 
001384 9150 0769 	lds OutputType, OutputTypeBitmask
001386 2722      	clr Output
001387 e011      	ldi Motor, 0x01
                 
001388 940e 2932 	call Countdown				;5 second countdown
                 
00138a 940e 4ecd 	call ReleaseButtons			;make sure buttons are released
00138c 940e 4126 	call StopPwmQuiet			;disable Quiet PWM output
                 
00138e e000
00138f 9300 0768 	lrv OutputRateBitmask, 0x00		;low rate on all channels
001391 e000
001392 9300 0769 	lrv OutputTypeBitmask, 0x00		;set servo type on all channels to bypass the "minimum throttle" setting
001394 e001
001395 9300 076b 	lrv OutputRateDividerCounter, 1
001397 e008
001398 9300 076a 	lrv OutputRateDivider, 8		;slow rate divider. f = 400 / OutputRateDivider
00139a ef0f
00139b 9300 0770 	rvsetflagtrue flagArmed
00139d 2700
00139e 9300 0773 	rvsetflagfalse flagThrottleZero
0013a0 e000
0013a1 9300 067b
0013a3 e001
0013a4 9300 067c
0013a6 e000
0013a7 9300 067d 	b16ldi ServoFilter, 1
                 
                 	;       76543210			;clear pending OCR1A and B interrupt
0013a9 e006      	ldi t,0b00000110
0013aa bb06      	store tifr1, t
                 
                 mch12:	;M1 - M8 sequence loop
0013ab e001
0013ac 9300 0543
0013ae e900
0013af 9300 0544
0013b1 e000
0013b2 9300 0545 	b16ldi Temp2, 400
                 
0013b4 2f05      mch13:	mov t, OutputType			;servo or ESC?
0013b5 2301      	and t, Motor
0013b6 f421      	brne mch14
                 
0013b7 9523      	inc Output				;servo will be skipped
0013b8 0f11      	lsl Motor
0013b9 f7d0      	brcc mch13
                 
0013ba c05d      	rjmp mch16				;no more motors. Exit
                 
                 mch14:	;update LCD
0013bb 940e 4d8f 	call LcdClear12x16
                 
0013bd e304
0013be 9300 073f 	lrv X1, 52				;M1 - M8
0013c0 e106
0013c1 9300 0740 	lrv Y1, 22
0013c3 e40d      	ldi t, 'M'
0013c4 940e 4c35 	call PrintChar
0013c6 e300      	ldi t, '0'
0013c7 9523      	inc Output
0013c8 0f02      	add t, Output
0013c9 940e 4c35 	call PrintChar
                 
0013cb e0ec
0013cc e5f6      	ldz udp7*2				;banner
0013cd 940e 4b0f 	call PrintSelector
                 
0013cf 940e 4d2c 	call LcdUpdate
                 
0013d1 931f      	push Motor
0013d2 935f      	push OutputType
                 
                 mch15:	;PWM loop (run)
0013d3 932f      	push Output
0013d4 940e 3ed5 	call PwmStart
0013d6 9100 05ee
0013d8 9300 0540
0013da 9100 05ef
0013dc 9300 0541
0013de 9100 05f0
0013e0 9300 0542 	b16mov Temp, EscLowLimit
0013e2 d041      	rcall SetMotorOutput
0013e3 940e 3f3b 	call PwmEnd
0013e5 912f      	pop Output
                 
0013e6 9130 0543
0013e8 9140 0544
0013ea 5041
0013eb 4030
0013ec 9330 0543
0013ee 9340 0544 	b16dec Temp2
0013f0 f711      	brne mch15
                 
0013f1 e000
0013f2 9300 0543
0013f4 ec08
0013f5 9300 0544
0013f7 e000
0013f8 9300 0545 	b16ldi Temp2, 200			;pause for 0.5 seconds
                 
                 mch17:	;PWM loop (stop)
0013fa 932f      	push Output
0013fb 940e 3ed5 	call PwmStart
0013fd e000
0013fe 9300 0540
001400 9300 0541
001402 9300 0542 	b16clr Temp
001404 d01f      	rcall SetMotorOutput
001405 940e 3f3b 	call PwmEnd
001407 912f      	pop Output
                 
001408 9130 0543
00140a 9140 0544
00140c 5041
00140d 4030
00140e 9330 0543
001410 9340 0544 	b16dec Temp2
001412 f739      	brne mch17
                 
001413 915f      	pop OutputType
001414 911f      	pop Motor
                 
001415 0f11      	lsl Motor				;select next output or leave
001416 f008      	brcs mch16
                 
001417 cf93      	rjmp mch12				;next 
                 
                 mch16:	;done
001418 2700
001419 9300 0770 	rvsetflagfalse flagArmed
00141b ef0f
00141c 9300 0773 	rvsetflagtrue flagThrottleZero
                 
                 	;        76543210			;disable OCR1A and B interrupt
00141e e090      	ldi tt,0b00000000
00141f 9390 006f 	store timsk1, tt
                 
001421 940e 4112 	call StartPwmQuiet			;enable Quiet PWM output again
001423 9508      	ret
                 
                 
                 
                 	;--- Set motor output ---
                 
                 SetMotorOutput:
                 
001424 3021      	cpi Output, 1
001425 f469      	brne smo10
                 
001426 9100 0540
001428 9300 060f
00142a 9100 0541
00142c 9300 0610
00142e 9100 0542
001430 9300 0611 	b16mov Out1, Temp
001432 9508      	ret
                 
001433 3022      smo10:	cpi Output, 2
001434 f469      	brne smo11
                 
001435 9100 0540
001437 9300 0612
001439 9100 0541
00143b 9300 0613
00143d 9100 0542
00143f 9300 0614 	b16mov Out2, Temp
001441 9508      	ret
                 
001442 3023      smo11:	cpi Output, 3
001443 f469      	brne smo12
                 
001444 9100 0540
001446 9300 0615
001448 9100 0541
00144a 9300 0616
00144c 9100 0542
00144e 9300 0617 	b16mov Out3, Temp
001450 9508      	ret
                 
001451 3024      smo12:	cpi Output, 4
001452 f469      	brne smo13
                 
001453 9100 0540
001455 9300 0618
001457 9100 0541
001459 9300 0619
00145b 9100 0542
00145d 9300 061a 	b16mov Out4, Temp
00145f 9508      	ret
                 
001460 3025      smo13:	cpi Output, 5
001461 f469      	brne smo14
                 
001462 9100 0540
001464 9300 061b
001466 9100 0541
001468 9300 061c
00146a 9100 0542
00146c 9300 061d 	b16mov Out5, Temp
00146e 9508      	ret
                 
00146f 3026      smo14:	cpi Output, 6
001470 f469      	brne smo15
                 
001471 9100 0540
001473 9300 061e
001475 9100 0541
001477 9300 061f
001479 9100 0542
00147b 9300 0620 	b16mov Out6, Temp
00147d 9508      	ret
                 
00147e 3027      smo15:	cpi Output, 7
00147f f469      	brne smo16
                 
001480 9100 0540
001482 9300 0621
001484 9100 0541
001486 9300 0622
001488 9100 0542
00148a 9300 0623 	b16mov Out7, Temp
00148c 9508      	ret
                 
00148d 9100 0540
00148f 9300 0624
001491 9100 0541
001493 9300 0625
001495 9100 0542
001497 9300 0626 smo16:	b16mov Out8, Temp
001499 9508      	ret
                 
                 
                 
                 .undef OutputType
                 .undef Output
                 .undef Motor
                 
                 
00149a 6f4d
00149b 6f74
00149c 7372
00149d 7720
00149e 6c69
00149f 206c
0014a0 7073
0014a1 6e69
0014a2 6920
0014a3 006e      dpw1:	.db "Motors will spin in", 0
0014a4 6573
0014a5 7571
0014a6 6e65
0014a7 6563
0014a8 4d20
0014a9 2031
0014aa 202d
0014ab 384d
0014ac 0000      dpw2:	.db "sequence M1 - M8", 0, 0
0014ad 6661
0014ae 6574
0014af 2072
0014b0 6874
0014b1 2065
0014b2 6f63
0014b3 6e75
0014b4 6474
0014b5 776f
0014b6 2e6e
0014b7 0000      dpw3:	.db "after the countdown.", 0, 0
0014b8 4c50
0014b9 4145
0014ba 4553
0014bb 4220
0014bc 2045
0014bd 4143
0014be 4552
0014bf 5546
0014c0 214c
0014c1 0000      dpw4:	.db "PLEASE BE CAREFUL!", 0, 0
                 
0014c2 2934
0014c3 2948
0014c4 295a
0014c5 2970      dpw10:	.dw dpw1*2, dpw2*2, dpw3*2, dpw4*2
                 
                 
                 
                 	;--- Safety warning regarding spinning motors ---
                 
                 DisplayPropWarning:
                 
0014c6 940e 4d8f 	call LcdClear12x16
                 
                 	;header
0014c8 940e 4b98 	call PrintWarningHeader
                 
                 	;text
0014ca e000
0014cb 9300 073f 	lrv X1, 0
0014cd e004      	ldi t, 4
0014ce e8e4
0014cf e2f9      	ldz dpw10*2
0014d0 940e 4c18 	call PrintStringArray
                 
                 	;footer
0014d2 940e 4bdb 	call PrintBackFooter
0014d4 940e 4bf3 	call PrintOkFooter
                 
0014d6 940e 4d2c 	call LcdUpdate
                 
0014d8 940e 4ed1 dpw11:	call GetButtonsBlocking
                 
0014da 3008      	cpi t, 0x08				;BACK?
0014db f411      	brne dpw12
                 
0014dc 9408      	sec
0014dd 9508      	ret
                 
0014de 3001      dpw12:	cpi t, 0x01				;OK?
0014df f7c1      	brne dpw11
                 
0014e0 9488      	clc
0014e1 9508      	ret
                 
                 
                 .include "errorlog.asm"
                 
                 
                 .def ErrCode = r17
                 
                 
                 ErrorLog:
                 
0014e2 e7eb
0014e3 e0f0      	ldz eeErrorCode
0014e4 940e 4f15 	call ReadEeprom
0014e6 2300      	tst t
0014e7 f439      	brne el11
                 
0014e8 9100 0779
0014ea 2300
0014eb f40a      	rvbrflagfalse flagErrorLogSetup, el10
                 
0014ec c032      	rjmp ErrorLogSetup			;display setup screen
                 
0014ed 9488      el10:	clc					;no error logged
0014ee 9508      	ret
                 
0014ef 9a1b      el11:	LedToggle
0014f0 2f10      	mov ErrCode, t
0014f1 7013      	andi ErrCode, 0x03
                 
                 	;header
0014f2 e00a
0014f3 9300 073f 	lrv X1, 10
0014f5 e9e2
0014f6 e2fa      	ldz errlog*2
0014f7 940e 4b90 	call PrintHeader
                 
                 	;logged data
0014f9 e000
0014fa 9300 073f 	lrv X1, 0
0014fc 2f01      	mov t, ErrCode
0014fd edee
0014fe e2fa      	ldz ecode*2
0014ff 940e 4c0f 	call PrintFromStringArray
                 
001501 940e 4b89 	call LineFeed
001503 e000
001504 9300 073f 	lrv X1, 0
001506 eae2
001507 e2fa      	ldz time*2
001508 940e 4c2e 	call PrintString
00150a e7ec
00150b e0f0      	ldz eeErrorTimeSec
00150c 940e 4ef1 	call GetEeVariable8
00150e 2fca      	mov yl, xl
00150f 940e 4ef1 	call GetEeVariable8
001511 940e 2ab1 	call PrintTimer
                 
                 	;footer
001513 e600
001514 9300 073f 	lrv X1, 96
001516 e309
001517 9300 0740 	lrv Y1, 57
001519 e9e6
00151a e9fb      	ldz clear*2
00151b 940e 4c2e 	call PrintString
                 
00151d 9408      	sec
00151e 9508      	ret
                 
                 
                 
                 	;--- Error log setup screen ---
                 
                 ErrorLogSetup:
                 
                 	;header
00151f e00a
001520 9300 073f 	lrv X1, 10
001522 e9e2
001523 e2fa      	ldz errlog*2
001524 940e 4b90 	call PrintHeader
                 
                 	;status
001526 e000
001527 9300 073f 	lrv X1, 0
001529 eaea
00152a e2fa      	ldz status*2
00152b 940e 4c2e 	call PrintString
00152d e7ea
00152e e0f0      	ldz eeErrorLogState
00152f 940e 4f15 	call ReadEeprom
001531 7001      	andi t, 0x01
001532 ece6
001533 e2fa      	ldz estate*2
001534 940e 4c0f 	call PrintFromStringArray
                 
                 	;footer
001536 e000
001537 9300 073f 	lrv X1, 0
001539 e309
00153a 9300 0740 	lrv Y1, 57
00153c ede2
00153d e9fb      	ldz change*2
00153e 940e 4c2e 	call PrintString
001540 e600
001541 9300 073f 	lrv X1, 96
001543 e9ec
001544 e2fa      	ldz abort*2
001545 940e 4c2e 	call PrintString
                 
001547 9408      	sec
001548 9508      	ret
                 
                 
                 
001549 5245
00154a 4f52
00154b 2052
00154c 4f4c
00154d 0047      errlog:	.db "ERROR LOG", 0
00154e 4241
00154f 524f
001550 0054      abort:	.db "ABORT", 0
                 
001551 6954
001552 656d
001553 203a
001554 0000      time:	.db "Time: ", 0, 0
001555 7453
001556 7461
001557 7375
001558 203a
001559 0000      status:	.db "Status: ", 0, 0
                 
00155a 4e45
00155b 4241
00155c 454c
00155d 0044      elon:	.db "ENABLED", 0
00155e 4944
00155f 4153
001560 4c42
001561 4445
001562 0000      eloff:	.db "DISABLED", 0, 0
                 
001563 2abc
001564 2ab4      estate:	.dw eloff*2, elon*2
                 
001565 5043
001566 4d50
001567 7320
001568 6e79
001569 2063
00156a 6177
00156b 2073
00156c 6f6c
00156d 7473
00156e 0021      csl1:	.db "CPPM sync was lost!", 0
                 ;sta9:	.db "RX signal was lost!", 0
                 ;sta32:	.db "FAILSAFE!", 0
                 ;sta45:	.db "Sat protocol error!", 0
00156f 2aca
001570 56ca
001571 572a
001572 5748      ecode:	.dw csl1*2, sta9*2, sta32*2, sta45*2
                 
                 
                 
                 	;--- Log error to EEPROM ---
                 
                 LogError:
                 
001573 e7ea
001574 e0f0      	ldz eeErrorLogState			;skip logging if disabled
001575 940e 4f15 	call ReadEeprom
001577 2300
001578 f482      	brflagfalse t, le1
                 
001579 e7eb
00157a e0f0      	ldz eeErrorCode				;will save the error code only if no error has been logged earlier
00157b 940e 4f15 	call ReadEeprom
00157d 2300      	tst t
00157e f451      	brne le1
                 
00157f 940e 4ef7 	call StoreEeVariable8			;register XL (input parameter) holds the error code
                 
001581 91a0 07a4 	lds xl, Timer1sec			;save flight timer
001583 940e 4ef7 	call StoreEeVariable8
001585 91a0 07a5 	lds xl, Timer1min
001587 940e 4ef7 	call StoreEeVariable8
                 
001589 9508      le1:	ret
                 
                 
                 
                 	;--- Clear error log ---
                 
                 ClearLoggedError:
                 
00158a e7eb
00158b e0f0      	ldz eeErrorCode				;check for existing error
00158c 940e 4f15 	call ReadEeprom
00158e 2300      	tst t
00158f f431      	brne cle1
                 
001590 9100 0779
001592 2300
001593 f03a      	rvbrflagtrue flagErrorLogSetup, cle2	;jump when setup screen is active
                 
001594 9488      	clc					;no error
001595 9508      	ret
                 
001596 2700      cle1:	clr t					;clear error
001597 e7eb
001598 e0f0      	ldz eeErrorCode
001599 940e 4f1f 	call WriteEeprom
                 
00159b 2700
00159c 9300 0779 cle2:	rvsetflagfalse flagErrorLogSetup
00159e 982b      	LedOff
00159f 9408      	sec
0015a0 9508      	ret
                 
                 
                 
                 	;--- Toggle error logging state ---
                 
                 ToggleErrorLogState:
                 
0015a1 9100 0779
0015a3 2300
0015a4 f452      	rvbrflagfalse flagErrorLogSetup, tel10
                 
0015a5 e7ea
0015a6 e0f0      	ldz eeErrorLogState			;setup screen is active so we'll toggle the EEPROM setting
0015a7 940e 4f15 	call ReadEeprom
0015a9 9500      	com t
0015aa 940e 4f1f 	call WriteEeprom
                 
0015ac 2700
0015ad 9300 0779 	rvsetflagfalse flagErrorLogSetup	;this will "close" the setup window
                 
0015af 9508      tel10:	ret
                 
                 
                 
                 	;--- Reset settings for error logging ---
                 
                 ResetErrorLogging:
                 
0015b0 ef0f      	ser t					;set the EEPROM setting to ENABLED
0015b1 e7ea
0015b2 e0f0      	ldz eeErrorLogState
0015b3 940e 4f1f 	call WriteEeprom
0015b5 dfd4      	rcall ClearLoggedError
0015b6 9508      	ret
                 
                 
                 
                 .undef ErrCode
                 
                 .include "main.asm"
                 
                 	;--- Specialized setup and main routine for standard receivers ---
                 
                 Main:
                 
0015b7 e6a4
0015b8 e0b0      	ldx 100
0015b9 940e 4e9c 	call WaitXms
                 
0015bb 940e 1c73 	call SetupHardware
                 
                 
                 	;--- Initialize LCD ---
                 
                 	;call LoadLcdContrast ; Not needed, called in main.c
0015bd 940e 4d2c 	call LcdUpdate
0015bf 940e 4d70 	call LcdClear
0015c1 940e 4d2c 	call LcdUpdate
                 
                 
                 	;--- Variables init ---
                 
0015c3 940e 255c 	call EeInit
                 
0015c5 e000
0015c6 9300 0745 	lrv MainMenuCursorYposSave, 0
0015c8 e000
0015c9 9300 0746 	lrv MainMenuListYposSave, 0
                 
0015cb e000
0015cc 9300 0747 	lrv LoadMenuCursorYposSave, 0
0015ce e000
0015cf 9300 0748 	lrv LoadMenuListYposSave, 0
                 
0015d1 e003
0015d2 9300 0597
0015d4 ef0f
0015d5 9300 0598
0015d7 e000
0015d8 9300 0599 	b16ldi BatteryVoltageLogged, 1023
                 
0015da e001
0015db 9300 069c
0015dd e80e
0015de 9300 069d
0015e0 e000
0015e1 9300 069e 	b16ldi FlightTimer, 398		;tuned for better accuracy (1 second)
                 
0015e3 2700      	clr t
0015e4 9300 07a4 	sts Timer1sec, t
0015e6 9300 07a5 	sts Timer1min, t
                 
0015e8 9300 07a6 	sts TuningMode, t
0015ea 9300 0797 	sts QTuningIndex, t
                 
0015ec 9300 076e 	sts flagPwmGen, t
                 
0015ee 9300 0779 	sts flagErrorLogSetup, t
                 
0015f0 9300 0776 	sts FlashingLEDCounter, t
                 
0015f2 eaaf      	ldi xl, AuxCounterInit
0015f3 93a0 0780 	sts AuxCounter, xl
0015f5 e0a2      	ldi xl, 2
0015f6 93a0 0781 	sts AuxSwitchPosition, xl
0015f8 e0a1      	ldi xl, 1
0015f9 93a0 078e 	sts Aux4SwitchPosition, xl
0015fb 93a0 0783 	sts AuxFunctionOld, xl
                 
0015fd 9300 0774 	sts flagAileronCentered, t	;set to false
0015ff 9300 0775 	sts flagElevatorCentered, t
                 
001601 9300 07b0 	sts Channel1L, t
001603 9300 07b1 	sts Channel1H, t
001605 9300 07b2 	sts Channel2L, t
001607 9300 07b3 	sts Channel2H, t
001609 9300 07b4 	sts Channel3L, t
00160b 9300 07b5 	sts Channel3H, t
00160d 9300 07b6 	sts Channel4L, t
00160f 9300 07b7 	sts Channel4H, t
001611 9300 07b8 	sts Channel5L, t
001613 9300 07b9 	sts Channel5H, t
001615 9300 07ba 	sts Channel6L, t
001617 9300 07bb 	sts Channel6H, t
001619 9300 07bc 	sts Channel7L, t
00161b 9300 07bd 	sts Channel7H, t
00161d 9300 07be 	sts Channel8L, t
00161f 9300 07bf 	sts Channel8H, t
                 
001621 9300 0758 	sts RudderRxPinState, t
001623 9300 0759 	sts AuxRxPinState, t
                 
001625 efaa      	ldi xl, TimeoutLimit		;start with all RX channels timed out
001626 93a0 075a 	sts RollDcnt, xl
001628 93a0 075b 	sts PitchDcnt, xl
00162a 93a0 075c 	sts ThrottleDcnt, xl
00162c 93a0 075d 	sts YawDcnt, xl
00162e 93a0 075e 	sts AuxDcnt, xl
001630 93a0 075f 	sts Aux2Dcnt, xl
001632 93a0 0760 	sts Aux3Dcnt, xl
001634 93a0 0761 	sts Aux4Dcnt, xl
                 
001636 e0a3      	ldi xl, 3			;RxBufferState must be set to 3 (i.e. "New data") to make the AUX Settings screen work properly
001637 93a0 07fa 	sts RxBufferState, xl
                 
001639 efa0      	ldi xl, NoAileronInput | NoElevatorInput | NoThrottleInput | NoRudderInput
00163a 93a0 079d 	sts StatusBits, xl
                 
00163c 940e 4ac1 	call setup_mpu6050
                 
00163e 940e 2856 	call GyroCal
                 
                 #ifdef STANDALONE_GIMBAL_CONTROLLER
                 #endif
                 
                 
                 ma10:	;--- ESC calibration ----
                 
001640 9478      	sei				;global interrupts must be enabled here for PWM output in EscThrottleCalibration
                 
001641 e7e4
001642 e0f0      	ldz eeEscCalibration		;check ESC calibration setting
001643 940e 4f15 	call ReadEeprom
001645 2300      	tst t
001646 f051      	breq ma5			;jump if ESC calibration is disabled
                 
001647 940e 2527 	call DisableEscCalibration
                 
001649 b103      	load t, pinb			;read buttons. Will not use 'GetButtons' here because of delay
00164a 9500      	com t
00164b 9502      	swap t
00164c 700f      	andi t, 0x0F			;any button pressed?
00164d f089      	breq ma2
                 
00164e 940e 2431 	call EscThrottleCalibration	;yes, do calibration
001650 c00e      	rjmp ma2
                 
                 
                 	;--- Misc. ---
                 
001651 ef0f
001652 9300 0796 ma5:	rvsetflagtrue Mode		;will prevent buttons held down during start-up from opening the menu or changing user profile
                 
                 
                 	;--- Reset LCD contrast when button #1 is held down ---
                 
001654 940e 4eaf 	call GetButtons
001656 3008      	cpi t, 0x08
001657 f411      	brne ma15
                 
001658 940e 5719 	call SetDefaultLcdContrast
                 
                 
                 	;--- Display the Error Log setup screen when button #4 is held down ---
                 
00165a 3001      ma15:	cpi t, 0x01
00165b f419      	brne ma2
                 
00165c ef0f
00165d 9300 0779 	rvsetflagtrue flagErrorLogSetup
                 
                 
                 	;--- Flight loop init ---
                 
00165f 940e 2d19 ma2:	call FlightInit
                 
                 	;       76543210		;clear pending OCR1A and B interrupt
001661 e006      	ldi t,0b00000110
001662 bb06      	store tifr1, t
                 
                 
                 	;--- Flight loop ---
                 
001663 940e 3ed5 ma1:	call PwmStart			;runtime between PwmStart and B interrupt (in PwmEnd) must not exeed 1.5ms
001665 940e 4443 	call GetStdRxChannels
001667 940e 2c29 	call Arming
001669 940e 1f8a 	call Logic
00166b 940e 2171 	call AddAuxStickScaling
00166d 940e 36df 	call Imu
00166f 940e 35ab 	call Mixer
001671 940e 116c 	call GimbalStab
001673 940e 1cb4 	call Beeper
001675 940e 1e7e 	call Lva
001677 940e 3f3b 	call PwmEnd
                 
001679 9000 0770
00167b 9010 0771
00167d 2401
00167e 9200 0793 	rvflageor flagA, flagArmed, flagArmedOldState	;flagA == true if flagArmed changes state
001680 9100 0793
001682 2300
001683 f432      	rvbrflagfalse flagA, ma11
                 
001684 940e 1f57 	call CheckLvaSetting
                 
001686 9100 0770 	lds t, flagArmed
001688 9300 0771 	sts flagArmedOldState, t
                 
00168a 9100 0778
00168c 2300
00168d f42a      ma11:	rvbrflagfalse flagLcdUpdate, ma3;update LCD once if flagLcdUpdate is true
                 
00168e 2700
00168f 9300 0778 	rvsetflagfalse flagLcdUpdate
001691 940e 294a 	call UpdateFlightDisplay
                 
001693 9100 0770
001695 2300
001696 f40a      ma3:	rvbrflagfalse flagArmed, ma7	;skip buttonreading if armed
001697 cfcb      	rjmp ma1
                 
001698 b103      ma7:	load t, pinb			;read buttons
001699 9500      	com t
00169a 9502      	swap t
00169b 700f      	andi t, 0x0F			;any button pushed?
00169c f439      	brne ma4
                 
00169d 2700
00169e 9300 0796 	rvsetflagfalse Mode		;no, reset Mode and ButtonDelay, and then go to start of the loop
                 
0016a0 e000
0016a1 9300 0790 ma8:	lrv ButtonDelay, 0
0016a3 cfbf      	rjmp ma1	
                 
0016a4 9100 0790
0016a6 9503
0016a7 9300 0790 ma4:	rvinc ButtonDelay		;yes, ButtonDelay++
0016a9 9100 0790
0016ab 3302      	rvcpi ButtonDelay, 50		;ButtonDelay == 50?
0016ac f009      	breq ma6			;yes, re-check button
0016ad cfb5      	rjmp ma1			;no, go to start of the loop	
                 
0016ae 9100 0796
0016b0 2300
0016b1 f372      ma6:	rvbrflagtrue Mode, ma8		;abort if the button hasn't been released since start-up
                 
                 ;	         76543210		;disable OCR1A and B interrupt
0016b2 e000      	ldi t, 0b00000000
0016b3 9300 006f 	store timsk1, t
                 
0016b5 940e 4eaf 	call GetButtons			;re-check the button and abort if it was released too soon
0016b7 700f      	andi t, 0x0F
0016b8 f339      	breq ma8
                 
0016b9 3001      	cpi t, 0x01
0016ba f029      	breq ma9
                 
0016bb 3008      	cpi t, 0x08
0016bc f061      	breq ma13
                 
                 
                 	;--- User profile ---
                 
0016bd 940e 181d 	call ChangeUserProfile
0016bf cf9f      	rjmp ma2
                 
                 
                 ma9:	;--- Error log ---
                 
0016c0 940e 1dd3 	call Beep
0016c2 940e 158a 	call ClearLoggedError		;clear logged error when the ERROR LOG screen is displayed
0016c4 f448      	brcc ma12
                 
0016c5 ef0f
0016c6 9300 0796 ma14:	rvsetflagtrue Mode		;will wait for the button to be released
0016c8 cf96      	rjmp ma2
                 
0016c9 940e 1dd3 ma13:	call Beep
0016cb 940e 15a1 	call ToggleErrorLogState	;toggle error logging state when the setup screen is displayed
0016cd cff7      	rjmp ma14
                 
                 
                 ma12:	;--- Menu ---
                 
0016ce 9829      	BuzzerOff			;will prevent constant beeping in menu when 'Button Beep' is disabled
0016cf 940e 1831 	call StartLedSeq		;the LED flashing sequence will indicate current user profile selection
0016d1 940e 4112 	call StartPwmQuiet
0016d3 940e 45ae 	call MainMenu
0016d5 940e 4126 	call StopPwmQuiet
0016d7 940e 1847 	call StopLedSeq
0016d9 cf85      	rjmp ma2
                 
                 #ifdef IN_FLIGHT_TUNING
                 #endif
                 .include "userprofile.asm"
                 
                 .def DefaultUserProfile = r17
                 .def Item = r18
                 
                 UserProfileSetup:
                 
0016da 2722      	clr Item
                 
0016db e7e3
0016dc e0f0      ups10:	ldz eeUserProfile		;get default user profile value (from user profile #1)
0016dd 940e 4f15 	call ReadEeprom
0016df 2f10      	mov DefaultUserProfile, t
                 
0016e0 940e 4d81 	call LcdClear6x8
                 
0016e2 e005      	ldi t, 5			;print all text labels first
0016e3 e4e4
0016e4 e2ff      	ldz ups8*2
0016e5 940e 4c18 	call PrintStringArray
                 
0016e7 e606
0016e8 9300 073f 	lrv X1, 102			;default user profile
0016ea e001
0016eb 9300 0740 	lrv Y1, 1
0016ed 27bb      	clr xh
0016ee 2fa1      	mov xl, DefaultUserProfile
0016ef 95a3      	inc xl
0016f0 27dd      	clr yh
0016f1 940e 4b47 	call Print16Signed
                 
                 	;footer
0016f3 2322      	tst Item
0016f4 f419      	brne ups12
                 
0016f5 940e 4bca 	call PrintStdFooter
0016f7 c002      	rjmp ups13
                 
0016f8 940e 4bbd ups12:	call PrintSelectFooter
                 
                 ups13:	;print selector
0016fa e3e8
0016fb e2ff
0016fc e004
0016fd 9f02
0016fe 0de0
0016ff 1df1      	ldzarray ups7*2, 4, Item
001700 940e 4b0f 	call PrintSelector
                 
001702 940e 4d2c 	call LcdUpdate
                 
001704 940e 4ed1 	call GetButtonsBlocking
                 
001706 3008      	cpi t, 0x08			;BACK?
001707 f409      	brne ups15
                 
001708 9508      	ret
                 
001709 3004      ups15:	cpi t, 0x04			;PREV?
00170a f421      	brne ups16
                 
00170b 952a      	dec Item
00170c f442      	brpl ups19
                 
00170d e022      	ldi Item, 2
00170e cfcc      	rjmp ups10
                 
00170f 3002      ups16:	cpi t, 0x02			;NEXT?
001710 f429      	brne ups17
                 
001711 9523      	inc Item
001712 3023      	cpi Item, 3
001713 f00c      	brlt ups19
                 
001714 2722      	clr Item
                 
001715 cfc5      ups19:	rjmp ups10
                 
001716 3001      ups17:	cpi t, 0x01			;CHANGE/SELECT?
001717 f7e9      	brne ups19
                 
001718 3020      	cpi Item, 0
001719 f491      	brne ups20
                 
00171a 2fa1      	mov xl, DefaultUserProfile	;set default user profile
00171b 95a3      	inc xl
00171c 27bb      	clr xh
00171d e0c1
00171e e0d0      	ldy 1				;lower limit
00171f e0e4
001720 e0f0      	ldz 4				;upper limit
001721 940e 33a4 	call NumberEdit
001723 2da0      	mov xl, r0
001724 95aa      	dec xl
001725 2f1a      	mov DefaultUserProfile, xl
001726 e7e3
001727 e0f0      	ldz eeUserProfile
001728 940e 4ef7 	call StoreEeVariable8		;save in profile #1 only
00172a 2722      	clr Item
00172b cfaf      	rjmp ups10
                 
00172c 3021      ups20:	cpi Item, 1
00172d f429      	brne ups21
                 
00172e d0c0      	rcall CopyUserProfile		;import user profile
00172f 940e 4ac1 	call setup_mpu6050		;update the MPU
001731 e021      	ldi Item, 1
001732 cfa8      	rjmp ups10
                 
001733 e2e2
001734 e2ff      ups21:	ldz ups5*2			;reset the active user profile
001735 940e 56d7 	call ShowConfirmationDlg
001737 3001      	cpi t, 0x01
001738 f011      	breq ups18
                 
001739 e022      	ldi Item, 2			;CANCEL was pressed
00173a cfa0      	rjmp ups10
                 
00173b 940e 25a3 ups18:	call InitUserProfile		;YES was pressed. Resetting parameters
00173d 940e 4ac1 	call setup_mpu6050		;update the MPU
00173f 940e 5ae6 	call InitialSetup		;display initial setup menu
001741 9508      	ret
                 
                 
                 
                 	;--- Show status after copying EEPROM data ---
                 
                 ShowCopyStatus:
                 
001742 940e 4d8f 	call LcdClear12x16
                 
001744 23aa      	tst xl					;input parameter (0=Success)
001745 f441      	brne scs12
                 
001746 e208
001747 9300 073f 	lrv X1, 40				;print "DONE"
001749 e4ee
00174a e2ff      	ldz scs1*2
00174b 940e 4c2e 	call PrintString
00174d c007      	rjmp scs13
                 
00174e e202
00174f 9300 073f scs12:	lrv X1, 34				;print "ERROR"
001751 e3ee
001752 e9fb      	ldz cerror*2
001753 940e 4c2e 	call PrintString
                 
001755 e001
001756 9300 0744 scs13:	lrv FontSelector, f6x8
                 
001758 e0b2      	ldi xh, 2				;print two lines of text selected by the input parameter (XL)
001759 e000
00175a 9300 073f 	lrv X1, 0				;- XL=0 will print "All data copied from the selected profile."
00175c e101
00175d 9300 0740 	lrv Y1, 17				;- XL=2 will print "The selected profiles must be different."
00175f 2f0a      	mov t, xl				;- XL=4 will print "Profile #1 can only be edited manually."
                 
001760 93bf      scs14:	push xh
001761 930f      	push t
001762 ede2
001763 e2ff      	ldz scs10*2
001764 940e 4c0f 	call PrintFromStringArray
001766 e000
001767 9300 073f 	lrv X1, 0
001769 940e 4b89 	call LineFeed
00176b 910f      	pop t
00176c 9503      	inc t
00176d 91bf      	pop xh
00176e 95ba      	dec xh
00176f f781      	brne scs14
                 
                 	;footer
001770 940e 4bf3 	call PrintOkFooter
                 
001772 940e 4d2c 	call LcdUpdate
                 
001774 940e 4ed8 	call WaitForOkButton
001776 9508      	ret
                 
                 
                 
                 
001777 6544
001778 6166
001779 6c75
00177a 2074
00177b 7250
00177c 666f
00177d 6c69
00177e 3a65
00177f 0020      ups1:	.db "Default Profile: ", 0
001780 7546
001781 636e
001782 6974
001783 6e6f
001784 3a73
001785 0000      ups3:	.db "Functions:", 0, 0
001786 6d49
001787 6f70
001788 7472
001789 7520
00178a 6573
00178b 2072
00178c 7270
00178d 666f
00178e 6c69
00178f 2e65
001790 0000      ups4:	.db "Import user profile.", 0, 0
001791 6552
001792 6573
001793 2074
001794 6361
001795 6974
001796 6576
001797 7020
001798 6f72
001799 6966
00179a 656c
00179b 002e      ups5:	.db "Reset active profile.", 0
                 
00179c 0065
00179d 096d      ups7:	.db 101, 0, 109, 9
00179e 1b00
00179f 247f      	.db 0, 27, 127, 36
0017a0 2400
0017a1 2d7f      	.db 0, 36, 127, 45
                 
0017a2 2eee
0017a3 84fa
0017a4 2f00
0017a5 2f0c
0017a6 2f22      ups8:	.dw ups1*2, null*2, ups3*2, ups4*2, ups5*2
                 
0017a7 4f44
0017a8 454e
0017a9 0000      scs1:	.db "DONE", 0, 0
                 
0017aa 6c41
0017ab 206c
0017ac 6164
0017ad 6174
0017ae 6320
0017af 706f
0017b0 6569
0017b1 2064
0017b2 7266
0017b3 6d6f
0017b4 0000      scs3:	.db "All data copied from", 0, 0
0017b5 6874
0017b6 2065
0017b7 6573
0017b8 656c
0017b9 7463
0017ba 6465
0017bb 7020
0017bc 6f72
0017bd 6966
0017be 656c
0017bf 002e      scs4:	.db "the selected profile.", 0
                 
0017c0 6854
0017c1 2065
0017c2 6573
0017c3 656c
0017c4 7463
0017c5 6465
0017c6 7020
0017c7 6f72
0017c8 6966
0017c9 656c
0017ca 0073      scs5:	.db "The selected profiles", 0
0017cb 756d
0017cc 7473
0017cd 6220
0017ce 2065
0017cf 6964
0017d0 6666
0017d1 7265
0017d2 6e65
0017d3 2e74
0017d4 0000      scs6:	.db "must be different.", 0, 0
                 
0017d5 7250
0017d6 666f
0017d7 6c69
0017d8 2065
0017d9 3123
0017da 6320
0017db 6e61
0017dc 6f20
0017dd 6c6e
0017de 0079      scs7:	.db "Profile #1 can only", 0
0017df 6562
0017e0 6520
0017e1 6964
0017e2 6574
0017e3 2064
0017e4 616d
0017e5 756e
0017e6 6c61
0017e7 796c
0017e8 002e      scs8:	.db "be edited manually.", 0
                 
0017e9 2f54
0017ea 2f6a
0017eb 2f80
0017ec 2f96
0017ed 2faa
0017ee 2fbe      scs10:	.dw scs3*2, scs4*2, scs5*2, scs6*2, scs7*2, scs8*2
                 
                 
                 .undef DefaultUserProfile
                 .undef Item
                 
                 
                 
                 	;--- Copy EEPROM data from a different profile ---
                 
                 CopyUserProfile:
                 
0017ef 9100 0803 	lds t, UserProfile		;will not overwrite user profile #1
0017f1 2300      	tst t
0017f2 f411      	brne cup7
                 
0017f3 e0a4      	ldi xl, 4			;XL=4 means that profile #1 was selected as target
0017f4 c00f      	rjmp cup8
                 
0017f5 e0a1      cup7:	ldi xl, 1			;select user profile to copy EEPROM data from
0017f6 27bb      	clr xh
0017f7 e0c1
0017f8 e0d0      	ldy 1				;lower limit
0017f9 e0e4
0017fa e0f0      	ldz 4				;upper limit
0017fb 940e 33a4 	call NumberEdit
0017fd 2da0      	mov xl, r0
0017fe 95aa      	dec xl
                 
0017ff 9100 0803 	lds t, UserProfile		;source==target?
001801 170a      	cp t, xl
001802 f419      	brne cup9
                 
001803 e0a2      	ldi xl, 2			;yes, display error message and exit
                 
001804 df3d      cup8:	rcall ShowCopyStatus
001805 9508      	ret
                 
001806 93af      cup9:	push xl				;no, ask for confirmation
001807 e0ec
001808 e2ff      	ldz ups4*2
001809 940e 56d7 	call ShowConfirmationDlg
00180b 3001      	cpi t, 0x01
00180c f011      	breq cup10
                 
00180d 91af      	pop xl				;CANCEL was pressed
00180e 9508      	ret
                 
00180f 27ee      cup10:	clr zl				;YES was pressed
001810 91cf      	pop yl				;selected profile
001811 9a29      	BuzzerOn
                 
001812 2ffc      cup11:	mov zh, yl
001813 940e 4f15 	call ReadEeprom			;read from selected profile
001815 2fa0      	mov xl, t
001816 940e 4ef5 	call StoreEePVariable8		;write to current profile
001818 23ee      	tst zl				;256 bytes written?
001819 f7c1      	brne cup11
                 
00181a 9829      	BuzzerOff			;yes
00181b 27aa      	clr xl				;show status dialogue (XL=0 means Success)
00181c cfe7      	rjmp cup8
                 
                 
                 
                 	;--- Change user profile ---
                 
                 ChangeUserProfile:
                 
00181d 3002      	cpi t, 0x02			;register T holds button input
00181e f019      	breq cup2
                 
00181f 3004      	cpi t, 0x04
001820 f009      	breq cup2
                 
001821 9508      	ret				;incorrect button input
                 
001822 9506      cup2:	lsr t
001823 7001      	andi t, 0x01
001824 f409      	brne cup1
                 
001825 ef0f      	ser t				;will decrease the user profile value
                 
001826 91a0 0803 cup1:	lds xl, UserProfile
001828 0f0a      	add t, xl
001829 7003      	andi t, 0x03
00182a 9300 0803 	sts UserProfile, t
00182c 940e 255c 	call EeInit			;initialize profile data when selected for the first time
00182e 940e 4ac1 	call setup_mpu6050		;update the MPU
001830 9508      	ret
                 
                 
                 
                 	;--- Start the LED flashing sequence ---
                 
                 StartLedSeq:
                 
001831 9100 0803 	lds t, UserProfile	;LED will flash twice for profile #2, three times for profile #3 and four times for profile #4
001833 2300      	tst t
001834 f409      	brne sls1
                 
001835 9508      	ret			;will not flash when user profile #1 is selected
                 
001836 9503      sls1:	inc t
001837 9300 0805 	sts LedSequence, t
                 
001839 e604      	ldi t, 100		;set initial LED flashing delay
00183a 9300 0804 	sts LedCounter, t
                 
00183c 2700      	clr t			;start with LED in 'off' state
00183d 9300 0806 	sts LedState, t
                 
                 	;       76543210
00183f e000      	ldi t,0b00000000	;set timer0 to normal mode
001840 bd04      	store tccr0a, t
                 
                 	;       76543210
001841 e005      	ldi t,0b00000101	;clk/1024 prescaler
001842 bd05      	store tccr0b, t
                 
                 	;       76543210
001843 e001      	ldi t,0b00000001	;enable timer0 overflow interrupt
001844 9300 006e 	store timsk0, t
001846 9508      	ret
                 
                 
                 
                 	;--- End the LED flashing sequence --- 
                 
                 StopLedSeq:
                 
                 	;       76543210
001847 e000      	ldi t,0b00000000	;disable timer0 overflow interrupt
001848 9300 006e 	store timsk0, t
                 
00184a 982b      	LedOff
00184b 9508      	ret
                 
                 
                 
                 	;--- Interrupt routine making the LED flash while navigating the KK2's menu screens ---
                 
                 IsrLed:
                 
00184c 939f        push tt
00184d b6ff      	in SregSaver, sreg		;check delay counter
00184e 9190 0804 	lds tt, LedCounter
001850 959a      	dec tt
001851 f4c9      	brne isr10
                 
001852 90e0 0806 	lds treg, LedState		;check LED state
001854 20ee      	tst treg
001855 f419      	brne isr11
                 
001856 9a2b      	LedOn
001857 e09f      	ldi tt, 15
001858 c00f      	rjmp isr12
                 
001859 982b      isr11:	LedOff
                 
00185a 9190 0805 	lds tt, LedSequence		;check LED sequence
00185c 959a      	dec tt
00185d f021      	breq isr13
                 
00185e 9390 0805 	sts LedSequence, tt		;update the LED sequence
001860 e09f      	ldi tt, 15
001861 c006      	rjmp isr12
                 
001862 9190 0803 isr13:	lds tt, UserProfile		;reset the LED sequence
001864 9593      	inc tt
001865 9390 0805 	sts LedSequence, tt
001867 ec98      	ldi tt, 200
                 
001868 94e0      isr12:	com treg			;toggle the LED state
001869 92e0 0806 	sts LedState, treg
                 
                 isr10:	
00186b 9390 0804   sts LedCounter, tt
00186d 919f        pop tt
00186e beff      	out sreg, SregSaver		;exit	
00186f 9518      	reti
                 .include "trigonometry.asm"
                 
                 
001870 9100 06ed
001872 9300 06f2
001874 9100 06ee
001876 9300 06f3
001878 9100 06ef
00187a 9300 06f4
00187c 9100 06f0
00187e 9300 06f5
001880 9100 06f1
001882 9300 06f6 sin:	b832mov Sine, Theta		;Small-angle approximation of Sine
001884 9508      	ret
                 
001885 9030 06ed
001887 9040 06ee
001889 9050 06ef
00188b 9060 06f0
00188d 9070 06f1
00188f 9120 06ed
001891 9130 06ee
001893 9140 06ef
001895 9150 06f0
001897 9160 06f1
001899 940e 4fab
00189b 93b0 071a
00189d 93c0 071b
00189f 93d0 071c
0018a1 93e0 071d
0018a3 93f0 071e cos:	b832mul TempA, Theta, Theta	;Small-angle approximation of Cosine
0018a5 9030 071a
0018a7 9040 071b
0018a9 9050 071c
0018ab 9060 071d
0018ad 9070 071e
0018af e001
0018b0 940e 5044
0018b2 9230 071a
0018b4 9240 071b
0018b6 9250 071c
0018b8 9260 071d
0018ba 9270 071e 	b832fdiv TempA, 1
0018bc e001
0018bd 9300 071f
0018bf e000
0018c0 9300 0720
0018c2 e000
0018c3 9300 0721
0018c5 e000
0018c6 9300 0722
0018c8 e000
0018c9 9300 0723 	b832ldi TempB, 1
0018cb 9030 071f
0018cd 9040 0720
0018cf 9050 0721
0018d1 9060 0722
0018d3 9070 0723
0018d5 9120 071a
0018d7 9130 071b
0018d9 9140 071c
0018db 9150 071d
0018dd 9160 071e
0018df 1a76
0018e0 0a65
0018e1 0a54
0018e2 0a43
0018e3 0a32
0018e4 9230 06f7
0018e6 9240 06f8
0018e8 9250 06f9
0018ea 9260 06fa
0018ec 9270 06fb 	b832sub Cosine, TempB, TempA
0018ee 9508      	ret
                 
                 
                 	;---
                 
                 thetascale:
0018ef 93b0 06ed
0018f1 93a0 06ee
0018f3 93d0 06ef
0018f5 93c0 06f0
0018f7 93f0 06f1 	b832store Theta			;store in 8.32
                 
                 ;	b832ldi TempA, 3.03		;scale with magic number to match integrated gyro angle with real world angle
0018f9 9030 06ed
0018fb 9040 06ee
0018fd 9050 06ef
0018ff 9060 06f0
001901 9070 06f1
001903 9120 06de
001905 9130 06df
001907 9140 06e0
001909 9150 06e1
00190b 9160 06e2
00190d 940e 4fab
00190f 93b0 06ed
001911 93c0 06ee
001913 93d0 06ef
001915 93e0 06f0
001917 93f0 06f1 	b832mul Theta, Theta, MagicNumber
001919 9508      	ret
                 
                 
                 	;--- transfer between 16.8 <--> 8.24 , right align, sign extend  ---
                 
                 transfer168832:
00191a 27ff      	clr zh
                 transfer168824:
                 transfer824168:
                 transfer832168:
                 
00191b 2fcd      	mov yl, yh			;right align
00191c 2fda      	mov yh, xl
00191d 2fab      	mov xl, xh
                 
00191e 23bb      	tst xh				;sign extend
00191f f412      	brpl tra1
001920 efbf      	ser xh
001921 9508      	ret
                 
001922 27bb      tra1:	clr xh
001923 9508      	ret
                 	
                 
                 	;--- Rotate vector[VectorA ,VectorB] with angle Theta
                 
                 RotateVector:
001924 df4b      	rcall sin
001925 df5f      	rcall cos
                 
001926 9030 0710
001928 9040 0711
00192a 9050 0712
00192c 9060 0713
00192e 9070 0714
001930 9120 06f7
001932 9130 06f8
001934 9140 06f9
001936 9150 06fa
001938 9160 06fb
00193a 940e 4fab
00193c 93b0 072e
00193e 93c0 072f
001940 93d0 0730
001942 93e0 0731
001944 93f0 0732 	b832mul VectorNewA, VectorA, Cosine	;VectorNewA = VectorA * cos(Theta) - VectorB * sin(Theta)
001946 9030 0715
001948 9040 0716
00194a 9050 0717
00194c 9060 0718
00194e 9070 0719
001950 9120 06f2
001952 9130 06f3
001954 9140 06f4
001956 9150 06f5
001958 9160 06f6
00195a 940e 4fab
00195c 93b0 071a
00195e 93c0 071b
001960 93d0 071c
001962 93e0 071d
001964 93f0 071e 	b832mul TempA, VectorB, Sine
001966 9030 072e
001968 9040 072f
00196a 9050 0730
00196c 9060 0731
00196e 9070 0732
001970 9120 071a
001972 9130 071b
001974 9140 071c
001976 9150 071d
001978 9160 071e
00197a 1a76
00197b 0a65
00197c 0a54
00197d 0a43
00197e 0a32
00197f 9230 072e
001981 9240 072f
001983 9250 0730
001985 9260 0731
001987 9270 0732 	b832sub VectorNewA, VectorNewA, TempA
                 
001989 9030 0710
00198b 9040 0711
00198d 9050 0712
00198f 9060 0713
001991 9070 0714
001993 9120 06f2
001995 9130 06f3
001997 9140 06f4
001999 9150 06f5
00199b 9160 06f6
00199d 940e 4fab
00199f 93b0 0733
0019a1 93c0 0734
0019a3 93d0 0735
0019a5 93e0 0736
0019a7 93f0 0737 	b832mul VectorNewB, VectorA, Sine	;VectorNewB = VectorA * sin(Theta) + VectorB * cos(Theta)
0019a9 9030 0715
0019ab 9040 0716
0019ad 9050 0717
0019af 9060 0718
0019b1 9070 0719
0019b3 9120 06f7
0019b5 9130 06f8
0019b7 9140 06f9
0019b9 9150 06fa
0019bb 9160 06fb
0019bd 940e 4fab
0019bf 93b0 071a
0019c1 93c0 071b
0019c3 93d0 071c
0019c5 93e0 071d
0019c7 93f0 071e 	b832mul TempA, VectorB, Cosine
0019c9 9030 0733
0019cb 9040 0734
0019cd 9050 0735
0019cf 9060 0736
0019d1 9070 0737
0019d3 9120 071a
0019d5 9130 071b
0019d7 9140 071c
0019d9 9150 071d
0019db 9160 071e
0019dd 0e76
0019de 1e65
0019df 1e54
0019e0 1e43
0019e1 1e32
0019e2 9230 0733
0019e4 9240 0734
0019e6 9250 0735
0019e8 9260 0736
0019ea 9270 0737 	b832add VectorNewB, VectorNewB, TempA
                 
0019ec 9508      	ret
                 
                 
                 
                 	;--- Rotate 3D vector vector[VectorX, VectorY, VectorZ]
                 
                 Rotate3dVector:
                 
                 	; Get the time since we were last here.  X = 6250 for 1/400sec = 2.5msecs
0019ed 94f8      	cli
0019ee 91a0 0084 	lds xl, tcnt1l			;X = TCNT1 - TrigTimer, TrigTimer = TCNT1
0019f0 91b0 0085 	lds xh, tcnt1h
0019f2 9478      	sei
0019f3 91e0 074a 	lds zl, TrigTimerL
0019f5 91f0 074b 	lds zh, TrigTimerH
0019f7 93a0 074a 	sts TrigTimerL, xl
0019f9 93b0 074b 	sts TrigTimerH, xh
0019fb 1bae      	sub xl, zl
0019fc 0bbf      	sbc xh, zh
0019fd f42a      	brpl trig1
                 
0019fe e0e0
0019ff e0f0      	ldz 0				;X = ABS(X)
001a00 1bea      	sub zl, xl
001a01 0bfb      	sbc zh, xh
001a02 01df      	movw x, z
                 
001a03 27dd      trig1:	clr yh				;X = X / 16        
001a04 95b6      	lsr xh
001a05 95a7      	ror xl
001a06 95d7      	ror yh
001a07 95b6      	lsr xh
001a08 95a7      	ror xl
001a09 95d7      	ror yh
001a0a 95b6      	lsr xh
001a0b 95a7      	ror xl
001a0c 95d7      	ror yh
001a0d 95b6      	lsr xh
001a0e 95a7      	ror xl
001a0f 95d7      	ror yh
001a10 27cc      	clr yl
001a11 27ff      	clr zh				;now we have the delta time in an 8.32 format (Original Timer Value X/4096)
                 
001a12 93b0 06e8
001a14 93a0 06e9
001a16 93d0 06ea
001a18 93c0 06eb
001a1a 93f0 06ec 	b832store MagicNumberTime
001a1c 9030 06e8
001a1e 9040 06e9
001a20 9050 06ea
001a22 9060 06eb
001a24 9070 06ec
001a26 9120 06e3
001a28 9130 06e4
001a2a 9140 06e5
001a2c 9150 06e6
001a2e 9160 06e7
001a30 940e 4fab
001a32 93b0 06de
001a34 93c0 06df
001a36 93d0 06e0
001a38 93e0 06e1
001a3a 93f0 06e2 	b832mul MagicNumber, MagicNumberTime, MagicNumberMult	;calculate the Magic Number based on the delta time
                 
                 
001a3c 91b0 0579
001a3e 91a0 057a
001a40 91d0 057b 	b16load GyroPitchVC		;rotate around X axis (pitch)	
001a42 ded7      	rcall transfer168832
001a43 deab      	rcall thetascale
                 
001a44 9100 0701
001a46 9300 0710
001a48 9100 0702
001a4a 9300 0711
001a4c 9100 0703
001a4e 9300 0712
001a50 9100 0704
001a52 9300 0713
001a54 9100 0705
001a56 9300 0714 	b832mov VectorA, VectorY
001a58 9100 0706
001a5a 9300 0715
001a5c 9100 0707
001a5e 9300 0716
001a60 9100 0708
001a62 9300 0717
001a64 9100 0709
001a66 9300 0718
001a68 9100 070a
001a6a 9300 0719 	b832mov VectorB, VectorZ
001a6c deb7      	rcall RotateVector
001a6d 9100 072e
001a6f 9300 0701
001a71 9100 072f
001a73 9300 0702
001a75 9100 0730
001a77 9300 0703
001a79 9100 0731
001a7b 9300 0704
001a7d 9100 0732
001a7f 9300 0705 	b832mov VectorY, VectorNewA
001a81 9100 0733
001a83 9300 0706
001a85 9100 0734
001a87 9300 0707
001a89 9100 0735
001a8b 9300 0708
001a8d 9100 0736
001a8f 9300 0709
001a91 9100 0737
001a93 9300 070a 	b832mov VectorZ, VectorNewB
                 
                 
001a95 91b0 0576
001a97 91a0 0577
001a99 91d0 0578 	b16load GyroRollVC		;rotate around Y axis (roll)
001a9b de7e      	rcall transfer168832
001a9c de52      	rcall thetascale
                 
001a9d 9100 06fc
001a9f 9300 0710
001aa1 9100 06fd
001aa3 9300 0711
001aa5 9100 06fe
001aa7 9300 0712
001aa9 9100 06ff
001aab 9300 0713
001aad 9100 0700
001aaf 9300 0714 	b832mov VectorA, VectorX
001ab1 9100 0706
001ab3 9300 0715
001ab5 9100 0707
001ab7 9300 0716
001ab9 9100 0708
001abb 9300 0717
001abd 9100 0709
001abf 9300 0718
001ac1 9100 070a
001ac3 9300 0719 	b832mov VectorB, VectorZ
001ac5 de5e      	rcall RotateVector
001ac6 9100 072e
001ac8 9300 06fc
001aca 9100 072f
001acc 9300 06fd
001ace 9100 0730
001ad0 9300 06fe
001ad2 9100 0731
001ad4 9300 06ff
001ad6 9100 0732
001ad8 9300 0700 	b832mov VectorX, VectorNewA
001ada 9100 0733
001adc 9300 0706
001ade 9100 0734
001ae0 9300 0707
001ae2 9100 0735
001ae4 9300 0708
001ae6 9100 0736
001ae8 9300 0709
001aea 9100 0737
001aec 9300 070a 	b832mov VectorZ, VectorNewB
                 
                 
001aee 91b0 056a
001af0 91a0 056b
001af2 91d0 056c 	b16load GyroYaw			;rotate around Z axis (yaw)
001af4 de25      	rcall transfer168832
001af5 ddf9      	rcall thetascale
                 
001af6 9100 06fc
001af8 9300 0710
001afa 9100 06fd
001afc 9300 0711
001afe 9100 06fe
001b00 9300 0712
001b02 9100 06ff
001b04 9300 0713
001b06 9100 0700
001b08 9300 0714 	b832mov VectorA, VectorX
001b0a 9100 0701
001b0c 9300 0715
001b0e 9100 0702
001b10 9300 0716
001b12 9100 0703
001b14 9300 0717
001b16 9100 0704
001b18 9300 0718
001b1a 9100 0705
001b1c 9300 0719 	b832mov VectorB, VectorY
001b1e de05      	rcall RotateVector
001b1f 9100 072e
001b21 9300 06fc
001b23 9100 072f
001b25 9300 06fd
001b27 9100 0730
001b29 9300 06fe
001b2b 9100 0731
001b2d 9300 06ff
001b2f 9100 0732
001b31 9300 0700 	b832mov VectorX, VectorNewA
001b33 9100 0733
001b35 9300 0701
001b37 9100 0734
001b39 9300 0702
001b3b 9100 0735
001b3d 9300 0703
001b3f 9100 0736
001b41 9300 0704
001b43 9100 0737
001b45 9300 0705 	b832mov VectorY, VectorNewB
                 
001b47 9508      	ret
                 
                 
                 	;--- Get length of 3D vector vector[VectorX, VectorY, VectorZ] ---
                 
                 Lenght3dVector:
                 	
001b48 9030 06fc
001b4a 9040 06fd
001b4c 9050 06fe
001b4e 9060 06ff
001b50 9070 0700
001b52 9120 06fc
001b54 9130 06fd
001b56 9140 06fe
001b58 9150 06ff
001b5a 9160 0700
001b5c 940e 4fab
001b5e 93b0 071a
001b60 93c0 071b
001b62 93d0 071c
001b64 93e0 071d
001b66 93f0 071e 	b832mul TempA, VectorX, VectorX
001b68 9030 0701
001b6a 9040 0702
001b6c 9050 0703
001b6e 9060 0704
001b70 9070 0705
001b72 9120 0701
001b74 9130 0702
001b76 9140 0703
001b78 9150 0704
001b7a 9160 0705
001b7c 940e 4fab
001b7e 93b0 071f
001b80 93c0 0720
001b82 93d0 0721
001b84 93e0 0722
001b86 93f0 0723 	b832mul TempB, VectorY, VectorY
001b88 9030 071a
001b8a 9040 071b
001b8c 9050 071c
001b8e 9060 071d
001b90 9070 071e
001b92 9120 071f
001b94 9130 0720
001b96 9140 0721
001b98 9150 0722
001b9a 9160 0723
001b9c 0e76
001b9d 1e65
001b9e 1e54
001b9f 1e43
001ba0 1e32
001ba1 9230 071a
001ba3 9240 071b
001ba5 9250 071c
001ba7 9260 071d
001ba9 9270 071e 	b832add TempA, TempA, TempB
001bab 9030 0706
001bad 9040 0707
001baf 9050 0708
001bb1 9060 0709
001bb3 9070 070a
001bb5 9120 0706
001bb7 9130 0707
001bb9 9140 0708
001bbb 9150 0709
001bbd 9160 070a
001bbf 940e 4fab
001bc1 93b0 071f
001bc3 93c0 0720
001bc5 93d0 0721
001bc7 93e0 0722
001bc9 93f0 0723 	b832mul TempB, VectorZ, VectorZ
001bcb 9030 071a
001bcd 9040 071b
001bcf 9050 071c
001bd1 9060 071d
001bd3 9070 071e
001bd5 9120 071f
001bd7 9130 0720
001bd9 9140 0721
001bdb 9150 0722
001bdd 9160 0723
001bdf 0e76
001be0 1e65
001be1 1e54
001be2 1e43
001be3 1e32
001be4 9230 070b
001be6 9240 070c
001be8 9250 070d
001bea 9260 070e
001bec 9270 070f 	b832add LengthVector, TempA, TempB
                 
001bee 9508      	ret
                 
                 
                 	;--- extraxt Euler angles roll/pitch from 3D vector vector[VectorX, VectorY, VectorZ] ---
                 
                 ExtractEulerAngles:
                 
001bef 9100 06fc
001bf1 9300 0729
001bf3 9100 06fd
001bf5 9300 072a
001bf7 9100 06fe
001bf9 9300 072b
001bfb 9100 06ff
001bfd 9300 072c
001bff 9100 0700
001c01 9300 072d 	b832mov TempD, VectorX
001c03 d02e      	rcall ext2
001c04 9100 06a5
001c06 9300 069f
001c08 9100 06a6
001c0a 9300 06a0
001c0c 9100 06a7
001c0e 9300 06a1 	b16mov EulerAngleRoll, Angle
                 
001c10 9100 0701
001c12 9300 0729
001c14 9100 0702
001c16 9300 072a
001c18 9100 0703
001c1a 9300 072b
001c1c 9100 0704
001c1e 9300 072c
001c20 9100 0705
001c22 9300 072d 	b832mov TempD, VectorY
001c24 d00d      	rcall ext2
001c25 9100 06a5
001c27 9300 06a2
001c29 9100 06a6
001c2b 9300 06a3
001c2d 9100 06a7
001c2f 9300 06a4 	b16mov EulerAnglePitch, Angle
                 
001c31 9508      	ret
                 
                 
                 ext2:	;b824mul TempA, TempD, TempD		;approximation of a quarter circle (lol :-)
                 
001c32 e50a
001c33 9300 071f
001c35 e000
001c36 9300 0720
001c38 e000
001c39 9300 0721
001c3b e000
001c3c 9300 0722
001c3e e000
001c3f 9300 0723 	b832ldi TempB, 90			;convert to degrees (0 to 90)
001c41 9030 0729
001c43 9040 072a
001c45 9050 072b
001c47 9060 072c
001c49 9070 072d
001c4b 9120 071f
001c4d 9130 0720
001c4f 9140 0721
001c51 9150 0722
001c53 9160 0723
001c55 940e 4fab
001c57 93b0 071a
001c59 93c0 071b
001c5b 93d0 071c
001c5d 93e0 071d
001c5f 93f0 071e 	b832mul TempA, TempD, TempB
                 
001c61 91b0 071a
001c63 91a0 071b
001c65 91d0 071c
001c67 91c0 071d
001c69 91f0 071e 	b832load TempA
001c6b dcaf      	rcall transfer832168
001c6c 93b0 06a5
001c6e 93a0 06a6
001c70 93d0 06a7 	b16store Angle
                 
                 ;	b824load VectorZ			;mirror on X/Y plane (90 to 180)
                 ;	tst xh
                 ;	brpl ext3
                 
                 ;	b16ldi Temp, 180
                 ;	b16sub Angle, Temp, Angle
                 ;ext3:
                 
                 ;	b824load TempD				;mirror on the Z axis (0 to -180)
                 ;	tst xh
                 ;	brpl ext1
                 ;	b16ldi Temp, -1
                 ;	b16mul Angle, Angle, Temp
                 ;ext1:
                 
001c72 9508      	ret
                 
                 
                 
                 
                 
                 .include "setuphw.asm"
                 
                 SetupHardware:
                 
                 	;       76543210	;set port directions
                 //	ldi t,0b00000000
001c73 e302      	ldi t,0b00110010	// output5, output6
001c74 b901      	out ddra,t
                 
                 	;       76543210
001c75 e00a      	ldi t,0b00001010
                 //	ldi t,0b00001011	// DEBUGGING
001c76 b904      	out ddrb,t
                 
                 	;       76543210
                 //	ldi t,0b11111111
001c77 ef0c      	ldi t,0b11111100	// scl, sda, output 1-8
001c78 b907      	out ddrc,t
                 
                 	;       76543210
001c79 ef02      	ldi t,0b11110010
001c7a b90a      	out ddrd,t
                 
                 	;       76543210
001c7b ef0f      	ldi t,0b11111111	;turn off digital inputs on port A
001c7c 9300 007e 	store didr0,t
                 
                 	;       76543210
001c7e ef05      	ldi t,0b11110101	;turn on pull ups on button inputs and aux, rud
001c7f b905      	out portb,t
                 
                 	;       76543210
001c80 e003      	ldi t,0b00000011	;turn on pull ups SPI pin
001c81 b908      	out portc,t
                 
                 	;       76543210
001c82 e00d      	ldi t,0b00001101	;turn on pull ups on thr, ele and ail
001c83 b90b      	out portd ,t
                 
                 	;       76543210
001c84 e000      	ldi t,0b00000000	;set timer 1 to run at 2.5MHz
001c85 9300 0080 	store tccr1a, t
                 
                 	;       76543210
001c87 e002      	ldi t,0b00000010
001c88 9300 0081 	store tccr1b, t
                 
                 	;       76543210
001c8a e000      	ldi t,0b00000000
001c8b 9300 0082 	store tccr1c, t
                 
                 	;       76543210
001c8d e105      	ldi t,0b00010101	;setup external interrupts.
001c8e 9300 0069 	store eicra, t
                 
                 	;       76543210
001c90 e003      	ldi t,0b00000011	;aileron and elevator
001c91 bb0d      	store eimsk, t
                 
                 	;       76543210
001c92 e00a      	ldi t,0b00001010
001c93 9300 0068 	store pcicr, t
                 
                 	;       76543210
001c95 e001      	ldi t,0b00000001	;throttle
001c96 9300 0073 	store pcmsk3, t
                 
                 	;       76543210
001c98 e005      	ldi t,0b00000101	;rudder and aux
001c99 9300 006c 	store pcmsk1, t
                 
                 
                 
                 	;--- Init_TWI ---
                 
001c9b 9100 00b9 	lds t, TWSR
001c9d 7f0c      	andi t, 0b11111100	;initialize twi prescaler set to 4^0 = 1
001c9e 9300 00b9 	sts TWSR, t
                 
001ca0 e101      	ldi t, 17 
001ca1 9300 00b8 	sts TWBR, t		;TWBR = ((20000000L / 400000L) - 16) / 2 = 17 for 400kHz clk rate
                 	
                 
                 
                 	;--- Setup LCD --- 
                 
001ca3 9a5d      	sbi lcd_cs1		;LCD signals
001ca4 9a5c      	sbi lcd_scl
001ca5 985e      	cbi lcd_res
                 
001ca6 9a2b      	LedOn			;I'm alive
001ca7 9a29      	BuzzerOn
001ca8 efa4
001ca9 e0b1      	ldx 500
001caa 940e 4e9c 	call WaitXms
001cac 982b      	LedOff
001cad 9829      	BuzzerOff
                 
001cae 9a5e      	sbi lcd_res
                 
001caf e6a4
001cb0 e0b0      	ldx 100
001cb1 940e 4e9c 	call WaitXms
                 
                 	
                 
                 	;---
                 
001cb3 9508      	ret
                 
                 .include "beeper.asm"
                 
                 	;--- Turn off buzzer when BeeperDelay runs out ----
                 
                 Beeper:
                 
001cb4 e000
001cb5 9300 0540
001cb7 9300 0541
001cb9 9300 0542 	b16clr Temp					;is BeeperDelay == 0 ?
001cbb 9130 0681
001cbd 9140 0682
001cbf 9150 0683
001cc1 9160 0540
001cc3 9170 0541
001cc5 9180 0542
001cc7 1758
001cc8 0747
001cc9 0736      	b16cmp BeeperDelay, Temp
001cca f059      	breq bee1
                 
001ccb 9130 0681
001ccd 9140 0682
001ccf 5041
001cd0 4030
001cd1 9330 0681
001cd3 9340 0682 	b16dec BeeperDelay				;No, subtract one and exit
001cd5 c003      	rjmp bee2
                 
                 
001cd6 2700
001cd7 9300 079c bee1:	rvsetflagfalse flagGeneralBuzzerOn		;yes, turn off buzzer and exit
                 
                 
                 bee2:	;--- Turn off buzzer previously activated by an AUX switch position change ---
                 
001cd9 9100 07a1
001cdb 2300
001cdc f46a      	rvbrflagfalse flagDebugBuzzerOn, bee11
                 
001cdd 9100 0780 	lds t, AuxCounter
001cdf 950a      	dec t
001ce0 9300 0780 	sts AuxCounter, t
001ce2 2300      	tst t
001ce3 f431      	brne bee11
                 
001ce4 2700
001ce5 9300 07a1 	rvsetflagfalse flagDebugBuzzerOn
001ce7 eaaf      	ldi xl, AuxCounterInit
001ce8 93a0 0780 	sts AuxCounter, xl
                 
                 
                 bee11:	;--- Make a short beep regulary when armed and throttle at idle ---
                 
001cea 9000 0770
001cec 9010 0773
001cee 2001
001cef 9200 0793 	rvflagand flagA, flagArmed, flagThrottleZero
001cf1 9100 0793
001cf3 2300
001cf4 f522      	rvbrflagfalse FlagA, bee4
                 
001cf5 9100 077e
001cf7 2300
001cf8 f102      	rvbrflagtrue flagAlarmOverride, bee4			;skip this section if failsafe was trigged
                 
001cf9 9130 067e
001cfb 9140 067f
001cfd 5041
001cfe 4030
001cff 9330 067e
001d01 9340 067f 	b16dec ArmedBeepDds
001d03 f4ac      	brge bee4
                 
001d04 e003
001d05 9300 067e
001d07 e200
001d08 9300 067f
001d0a e000
001d0b 9300 0680 	b16ldi ArmedBeepDds, 400*2
                 
001d0d ef0f
001d0e 9300 079c 	rvsetflagtrue flagGeneralBuzzerOn
001d10 e000
001d11 9300 0681
001d13 e104
001d14 9300 0682
001d16 e000
001d17 9300 0683 	b16ldi BeeperDelay, 20
                 
                 
                 bee4:	;--- No activity alarm ---
                 
001d19 9000 0770
001d1b 9010 0771
001d1d 2401
001d1e 9200 0793 	rvflageor flagA, flagArmed, flagArmedOldState		;flagA == true if flagArmed changes state
                 
001d20 9100 0793
001d22 2300
001d23 f43a      	rvbrflagfalse flagA, bee5				;activity?
                 
001d24 e000
001d25 9300 0693
001d27 9300 0694
001d29 9300 0695 	b16clr NoActivityTimer					;yes, reset timer
                 
001d2b e000
001d2c 9300 0540
001d2e e000
001d2f 9300 0541
001d31 e001
001d32 9300 0542 bee5:	b16ldi Temp, 0.004					;add 3.90625ms to timer
001d34 9130 0693
001d36 9140 0694
001d38 9150 0695
001d3a 9160 0540
001d3c 9170 0541
001d3e 9180 0542
001d40 0f58
001d41 1f47
001d42 1f36
001d43 9330 0693
001d45 9340 0694
001d47 9350 0695 	b16add NoActivityTimer, NoActivityTimer, Temp
                 
001d49 e70d
001d4a 9300 0540
001d4c e000
001d4d 9300 0541
001d4f e000
001d50 9300 0542 	b16ldi Temp, 32000					;avoid wrap-around
001d52 9130 0693
001d54 9140 0694
001d56 9150 0695
001d58 9160 0540
001d5a 9170 0541
001d5c 9180 0542
001d5e 1758
001d5f 0747
001d60 0736      	b16cmp NoActivityTimer, Temp
001d61 f064      	brlt bee8
                 
001d62 9100 0540
001d64 9300 0693
001d66 9100 0541
001d68 9300 0694
001d6a 9100 0542
001d6c 9300 0695 	b16mov NoActivityTimer, Temp
                 
001d6e 9100 077e
001d70 2300
001d71 f022      bee8:	rvbrflagtrue flagAlarmOverride, bee10
001d72 9100 077d
001d74 2300
001d75 f472      	rvbrflagfalse flagAlarmOn, bee9				;is alarm activated by AUX switch?
                 
001d76 9100 077f bee10:	lds t, AuxBeepDelay					;short delay
001d78 2300      	tst t
001d79 f119      	breq bee7
                 
001d7a 950a      	dec t
001d7b 9300 077f 	sts AuxBeepDelay, t
001d7d e000
001d7e 9300 0696
001d80 9300 0697
001d82 9300 0698 	b16clr NoActivityDds
                 
001d84 e00a
001d85 9300 0540
001d87 ef0c
001d88 9300 0541
001d8a e800
001d8b 9300 0542 bee9:	b16ldi Temp, 937.5 * 3					;30 minutes without activity? (arming or disarming)
001d8d 9130 0693
001d8f 9140 0694
001d91 9150 0695
001d93 9160 0540
001d95 9170 0541
001d97 9180 0542
001d99 1758
001d9a 0747
001d9b 0736      	b16cmp NoActivityTimer, Temp
001d9c f104      	brlt bee6
                 
001d9d 9130 0696
001d9f 9140 0697
001da1 5041
001da2 4030
001da3 9330 0696
001da5 9340 0697 bee7:	b16dec NoActivityDds					;yes, beep once every 5s
001da7 f4ac      	brge bee6
                 
001da8 e007
001da9 9300 0696
001dab ed00
001dac 9300 0697
001dae e000
001daf 9300 0698 	b16ldi NoActivityDds, 400*5
001db1 ef0f
001db2 9300 079c 	rvsetflagtrue flagGeneralBuzzerOn
001db4 e001
001db5 9300 0681
001db7 e900
001db8 9300 0682
001dba e000
001dbb 9300 0683 	b16ldi BeeperDelay, 400
                 
                 
                 bee6:	;--- Turn buzzer on/off depending on flags ---
                 
001dbd 9000 079c
001dbf 9010 079b
001dc1 2801
001dc2 9200 0793 	rvflagor flagA, flagGeneralBuzzerOn, flagLvaBuzzerOn
001dc4 9000 0793
001dc6 9010 07a1
001dc8 2801
001dc9 9200 0793 	rvflagor flagA, flagA, flagDebugBuzzerOn
001dcb 9100 0793
001dcd 2300
001dce f012      	rvbrflagtrue flagA, bee3
                 
001dcf 9829      	BuzzerOff
001dd0 9508      	ret
                 
001dd1 9a29      bee3:	BuzzerOn
001dd2 9508      	ret
                 
                 
                 
                 
                 	;--- A short (button) beep ---
                 
                 Beep:
                 
001dd3 930f      	push t				;check beep setting
001dd4 93ef
001dd5 93ff      	pushz
001dd6 eaee
001dd7 e0f0      	ldz eeButtonBeep
001dd8 940e 4f13 	call ReadEepromP
001dda 91ff
001ddb 91ef      	popz
001ddc 2300
001ddd f012      	brflagtrue t, beep1
                 
001dde 910f      	pop t				;button beep is turned off
001ddf 9508      	ret
                 
001de0 93cf      beep1:	push yl				;beep
                 
001de1 9a29      	BuzzerOn
001de2 e3c2      	ldi yl, 50
001de3 940e 4ea1 	call wms
001de5 9829      	BuzzerOff
                 
001de6 91cf      	pop yl
001de7 910f      	pop t
001de8 9508      	ret
                 .include "menu.asm"
                 
                 .def Counter		= r17
                 .def ListYpos		= r18
                 .def CursorYpos		= r19
                 .def NumberOfItems	= r20
                 
                 
001de9 2f40      Menu:	mov NumberOfItems, t
001dea 2f2a      	mov ListYpos, xl
001deb 2f3b      	mov CursorYpos, xh
                 
001dec 940e 4d70 men2:	call LcdClear
                 
001dee e001
001def 9300 0743 	lrv PixelType, 1
001df1 e004
001df2 9300 0744 	lrv FontSelector, s16x16
                 
001df4 3020      	cpi ListYpos, 0		;print the 'up' symbol if not on the top of the list
001df5 f049      	breq men3
                 
001df6 e30a
001df7 9300 073f 	lrv X1, 58
001df9 e000
001dfa 9300 0740 	lrv Y1, 0
001dfc e000      	ldi t, 0
001dfd 940e 4c35 	call PrintChar
                 
001dff 2f02      men3:	mov t, ListYpos		;print the 'down' symbol if not on the bottom of the list
001e00 5f0b      	subi t, -5
001e01 1704      	cp t, NumberOfItems
001e02 f049      	breq men4
                 
001e03 e30a
001e04 9300 073f 	lrv X1, 58
001e06 e302
001e07 9300 0740 	lrv Y1, 50
001e09 e001      	ldi t, 1
001e0a 940e 4c35 	call PrintChar
                 
001e0c e001
001e0d 9300 0744 men4:	lrv FontSelector, f6x8	;print the menu lines.
                 
001e0f e008
001e10 9300 0740 	lrv Y1, 8
001e12 e015      	ldi counter, 5
                 
001e13 01fe      	movw z, y
001e14 e104      	ldi t, 20
001e15 9f02      	mul t, ListYpos
001e16 0de0      	add zl, r0
001e17 1df1      	adc zh, r1
                 
001e18 e000
001e19 9300 073f men6:	lrv X1, 0 
001e1b e1a4      	ldi xl, 20
                 
001e1c 9105      men5:	lpm t, z+
001e1d 940e 4c35 	call PrintChar
001e1f 95aa      	dec xl
001e20 f7d9      	brne men5
                 	
001e21 9000 0740
001e23 e008
001e24 0e00
001e25 9200 0740 	rvadd Y1, 8
                 
001e27 951a      	dec Counter
001e28 f779      	brne men6
                 
001e29 e008      	ldi t,8			;highligth the choosen line
001e2a 9f03      	mul t, CursorYpos
001e2b 2d00      	mov t, r0
001e2c 5f09      	subi t, -7
001e2d 9300 0740 	sts Y1, t
001e2f 5f07      	subi t, -9
001e30 9300 0742 	sts Y2, t
001e32 e000
001e33 9300 073f 	lrv X1, 0
001e35 e70f
001e36 9300 0741 	lrv X2, 127
001e38 e000
001e39 9300 0743 	lrv PixelType, 0
001e3b 940e 4afd 	call HilightRectangle
                 
                 	;footer
001e3d 940e 4bb3 	call PrintMenuFooter
                 
001e3f 940e 4d2c 	call LcdUpdate
                 
001e41 e1ae      	ldi xl, 30
001e42 940e 4eaf men17:	call GetButtons		;wait until button released or time out
001e44 3000      	cpi t, 0
001e45 f021      	breq men7
                 
001e46 7009      	andi t, 0x09		;wait for BACK and ENTER buttons to be released
001e47 f7d1      	brne men17
                 
001e48 95aa      	dec xl
001e49 f7c1      	brne men17
                 
001e4a 940e 4ed2 men7:	call WaitForKeypress
                 
001e4c 3008      	cpi t, 0x08		;EXIT?
001e4d f419      	brne men8
                 
001e4e 27aa      	clr xl
001e4f 9488      	clc
001e50 c029      	rjmp men33
                 
001e51 3004      men8:	cpi t, 0x04		;UP?
001e52 f461      	brne men9
                 
001e53 3030      	cpi CursorYpos, 0 	;on top of screen?
001e54 f019      	breq men13
                 
001e55 953a      	dec CursorYpos		;no, decrement cursor position
001e56 940c 1e7d 	jmp men11
                 
001e58 3020      men13:	cpi ListYpos, 0		;yes, on top of list?
001e59 f019      	breq men14
                 
001e5a 952a      	dec ListYpos		;no, decrement list index
001e5b 940c 1e7d 	jmp men11
                 
001e5d 940c 1e7d men14:	jmp men11		;yes, do nothing
                 
001e5f 3002      men9:	cpi t, 0x02		;DOWN?
001e60 f471      	brne men10
                 
001e61 3034      	cpi CursorYpos, 4	;on bottom of screen?
001e62 f019      	breq men15
                 
001e63 9533      	inc CursorYpos		;no, increment cursor position
001e64 940c 1e7d 	jmp men11
                 
001e66 2f04      men15:	mov t, NumberOfItems	;yes, on bottom of list?
001e67 5005      	subi t, 5
001e68 1720      	cp ListYpos, t
001e69 f019      	breq men16
                 
001e6a 9523      	inc ListYpos		;no, increment list index
001e6b 940c 1e7d 	jmp men11
                 	
001e6d 940c 1e7d men16:	jmp men11		;yes, do nothing
                 
001e6f 3001      men10:	cpi t, 0x01		;ENTER?
001e70 f461      	brne men11
                 
001e71 940e 4d70 	call LcdClear		;blank screen
001e73 940e 4d2c 	call LcdUpdate	
                 
001e75 940e 4ecd 	call ReleaseButtons
                 
001e77 2fa2      	mov xl, ListYpos
001e78 0fa3      	add xl, CursorYpos
                 
001e79 9408      	sec
                 
001e7a 2fc2      men33:	mov yl, ListYpos
001e7b 2fd3      	mov yh, CursorYpos
001e7c 9508      	ret
                 
001e7d cf6e      men11:	rjmp men2
                 
                 
                 
                 .undef Counter
                 .undef ListYpos
                 .undef CursorYpos
                 .undef NumberOfItems
                 
                 
                 
                 .include "lva.asm"
                 
                 	;--- Low voltage alarm ---
                 
                 Lva:
                 
001e7e 9130 058e
001e80 9140 058f
001e82 9150 0590
001e84 9160 0597
001e86 9170 0598
001e88 9180 0599
001e8a 1758
001e8b 0747
001e8c 0736      	b16cmp BatteryVoltage, BatteryVoltageLogged			;log the lowest battery voltage
001e8d f464      	brge lva4
                 
001e8e 9100 058e
001e90 9300 0597
001e92 9100 058f
001e94 9300 0598
001e96 9100 0590
001e98 9300 0599 	b16mov BatteryVoltageLogged, BatteryVoltage
                 
001e9a 9130 058e
001e9c 9140 058f
001e9e 9150 0590
001ea0 9160 0594
001ea2 9170 0595
001ea4 9180 0596
001ea6 1b58
001ea7 0b47
001ea8 0b36
001ea9 9330 05af
001eab 9340 05b0
001ead 9350 05b1 lva4:	b16sub Error, BatteryVoltage, BatteryVoltageLowpass		;lowpass filter
001eaf 9160 05af
001eb1 9170 05b0
001eb3 9180 05b1
001eb5 e008
001eb6 940e 4f2b
001eb8 9360 05af
001eba 9370 05b0
001ebc 9380 05b1 	b16fdiv Error, 8
001ebe 9130 0594
001ec0 9140 0595
001ec2 9150 0596
001ec4 9160 05af
001ec6 9170 05b0
001ec8 9180 05b1
001eca 0f58
001ecb 1f47
001ecc 1f36
001ecd 9330 0594
001ecf 9340 0595
001ed1 9350 0596 	b16add BatteryVoltageLowpass, BatteryVoltageLowpass, Error
                 
001ed3 9130 0663
001ed5 9140 0664
001ed7 9150 0665
001ed9 9160 0594
001edb 9170 0595
001edd 9180 0596
001edf 1b58
001ee0 0b47
001ee1 0b36
001ee2 9330 05af
001ee4 9340 05b0
001ee6 9350 05b1 	b16sub Error, BattAlarmVoltage, BatteryVoltageLowpass		;calculate error
001ee8 f40a      	brpl lva3
001ee9 c061      	rjmp lva1
                 
001eea 9160 05af
001eec 9170 05b0
001eee 9180 05b1
001ef0 e002
001ef1 940e 4f2b
001ef3 9360 05af
001ef5 9370 05b0
001ef7 9380 05b1 lva3:	b16fdiv Error, 2
                 
001ef9 e000
001efa 9300 0540
001efc e100
001efd 9300 0541
001eff e000
001f00 9300 0542 	b16ldi Temp, 16							;limit error
001f02 9130 05af
001f04 9140 05b0
001f06 9150 05b1
001f08 9160 0540
001f0a 9170 0541
001f0c 9180 0542
001f0e 1758
001f0f 0747
001f10 0736      	b16cmp Error, Temp
001f11 f064      	brlt lva2
                 
001f12 9100 0540
001f14 9300 05af
001f16 9100 0541
001f18 9300 05b0
001f1a 9100 0542
001f1c 9300 05b1 	b16mov Error, Temp
                 
001f1e 9130 0675
001f20 9140 0676
001f22 9150 0677
001f24 9160 05af
001f26 9170 05b0
001f28 9180 05b1
001f2a 0f58
001f2b 1f47
001f2c 1f36
001f2d 9330 0675
001f2f 9340 0676
001f31 9350 0677 lva2:	b16add LvaDdsAcc, LvaDdsAcc, Error				;DDS
001f33 91b0 0675
001f35 91a0 0676
001f37 91d0 0677 	b16load LvaDdsAcc
001f39 23aa      	tst xl
001f3a f082      	brmi lva1
                 
001f3b 9100 079a 	lds t, LvaDdsOn							;limit the buzzer "on" time
001f3d 2300      	tst t
001f3e f079      	breq LvaOutputOff
                 
001f3f 950a      	dec t
001f40 9300 079a 	sts LvaDdsOn, t
                 
001f42 ef0f
001f43 9300 079b 	rvsetflagtrue flagLvaBuzzerOn
                 
001f45 9100 074d 	lds t, RxMode							;set digital output when not in standard RX mode
001f47 3000      	cpi t, RxModeStandard
001f48 f009      	breq lva6
                 
001f49 9a2a      	sbi LvaOutputPin
                 
001f4a 9508      lva6:	ret
                 
001f4b e604      lva1:	ldi t, 100
001f4c 9300 079a 	sts LvaDdsOn, t
                 
                 
                 LvaOutputOff:
                 
001f4e 2700
001f4f 9300 079b 	rvsetflagfalse flagLvaBuzzerOn
                 
001f51 9100 074d 	lds t, RxMode							;clear digital output when not in standard RX mode
001f53 3000      	cpi t, RxModeStandard
001f54 f009      	breq loo1
                 
001f55 982a      	cbi LvaOutputPin
                 
001f56 9508      loo1:	ret
                 
                 
                 
                 	;--- Check the LVA setting ---
                 
                 CheckLvaSetting:
                 
001f57 e000
001f58 9300 0546
001f5a e001
001f5b 9300 0547
001f5d e308
001f5e 9300 0548 	b16ldi Temper, 1.22			;LVA value set too low?
001f60 9110 0663
001f62 9120 0664
001f64 9130 0665
001f66 9140 0546
001f68 9150 0547
001f6a 9160 0548
001f6c 940e 4f3a
001f6e 9370 0540
001f70 9380 0541
001f72 9220 0542 	b16mul Temp, BattAlarmVoltage, Temper
001f74 9130 0540
001f76 9140 0541
001f78 9150 0542
001f7a 9160 058e
001f7c 9170 058f
001f7e 9180 0590
001f80 1758
001f81 0747
001f82 0736      	b16cmp Temp, BatteryVoltage
001f83 f42c      	brge cls1
                 
001f84 9100 079d
001f86 6008
001f87 9300 079d 	setstatusbit LvaWarning			;yes, the LED will flash rapidly for a few seconds after arming
                 
001f89 9508      cls1:	ret
                 
                 .include "logic.asm"
                 
                 Logic:
                 
                 	;--- Live update ---
                 
001f8a 9100 0770
001f8c 2300
001f8d f0ca      	rvbrflagtrue flagArmed, liv1		;skip this section when armed
                 
001f8e 9130 0699
001f90 9140 069a
001f92 5041
001f93 4030
001f94 9330 0699
001f96 9340 069a 	b16dec LiveUpdateTimer			;set flagLcdUpdate every second
001f98 f00c      	brlt liv2
                 
001f99 c054      	rjmp lol10
                 
001f9a ef0f
001f9b 9300 0778 liv2:	rvsetflagtrue flagLcdUpdate
001f9d e001
001f9e 9300 0699
001fa0 e900
001fa1 9300 069a
001fa3 e000
001fa4 9300 069b 	b16ldi LiveUpdateTimer, 400
001fa6 c047      	rjmp lol10
                 
                 liv1:
                 
                 	;--- Flight timer update ---
                 
001fa7 9100 0773
001fa9 2300
001faa f10a      	rvbrflagtrue flagThrottleZero, tim1	;skip this section if throttle is zero
                 
001fab 9130 069c
001fad 9140 069d
001faf 5041
001fb0 4030
001fb1 9330 069c
001fb3 9340 069d 	b16dec FlightTimer
001fb5 f4b1      	brne tim1
                 
001fb6 e001
001fb7 9300 069c
001fb9 e80e
001fba 9300 069d
001fbc e000
001fbd 9300 069e 	b16ldi FlightTimer, 398			;tuned for better accuracy
                 
001fbf 91a0 07a4 	lds xl, Timer1sec			;flight timer (running while motors are spinning)
001fc1 95a3      	inc xl
001fc2 33ac      	cpi xl, 60
001fc3 f431      	brne tim2
                 
001fc4 91b0 07a5 	lds xh, Timer1min
001fc6 95b3      	inc xh
001fc7 93b0 07a5 	sts Timer1min, xh
001fc9 27aa      	clr xl
                 
001fca 93a0 07a4 tim2:	sts Timer1sec, xl
                 
                 tim1:
                 
                 	;--- Flashing LED if status bits are set while armed ---
                 
001fcc 9100 079d 	lds t, StatusBits
001fce 2300      	tst t
001fcf f0f1      	breq lol10
                 
001fd0 9100 0776 	lds t, FlashingLEDCounter
001fd2 2300      	tst t
001fd3 f011      	breq lol1
001fd4 f0aa      	brmi lol6
001fd5 c00e      	rjmp lol3
                 
001fd6 e208      lol1:	ldi t, 40
001fd7 9a2b      	LedOn
                 
001fd8 91e0 0777 	lds zl, FlashingLEDCount		;update counter every time the LED is turned on
001fda 95ea      	dec zl
001fdb 93e0 0777 	sts FlashingLEDCount, zl
001fdd f471      	brne lol5
                 
001fde 91e0 079d 	lds zl, StatusBits			;clear the LVA Warning bit to end flashing
001fe0 7fe7      	cbr zl, LvaWarning
001fe1 93e0 079d 	sts StatusBits, zl
001fe3 c008      	rjmp lol5
                 
001fe4 950a      lol3:	dec t
001fe5 f009      	breq lol4
                 
001fe6 c005      	rjmp lol5
                 
001fe7 ec04      lol4:	ldi t, -60
001fe8 982b      	LedOff
001fe9 c002      	rjmp lol5
                 
001fea 9503      lol6:	inc t
001feb f351      	breq lol1
                 
001fec 9300 0776 lol5:	sts FlashingLEDCounter, t
                 
                 lol10:
                 
                 	;--- Activate functions based on AUX switch position ---
                 
001fee 9100 0781 	lds t, AuxSwitchPosition		;skip this section if the AUX switch position is unchanged
001ff0 91a0 0782 	lds xl, AuxSwitchPositionOld
001ff2 170a      	cp t, xl
001ff3 f409      	brne asp1
                 
001ff4 c043      	rjmp asp20
                 
001ff5 9300 0782 asp1:	sts AuxSwitchPositionOld, t
                 
001ff7 e8a9
001ff8 e0b7      	ldx AuxPos1SS				;calculate the address of the variable holding the stick scaling offset
001ff9 0fa0      	add xl, t
001ffa f408      	brcc asp6
                 
001ffb 95b3      	inc xh
                 
001ffc 91ec      asp6:	ld zl, x				;get the stick scaling offset ID
001ffd 70e3      	andi zl, 0x03
001ffe 93e0 078f 	sts AuxStickScaling, zl
                 
002000 e8a4
002001 e0b7      	ldx AuxPos1Function			;calculate the address of the variable holding the function ID
002002 0fa0      	add xl, t
002003 f408      	brcc asp2
                 
002004 95b3      	inc xh
                 
002005 2700      asp2:	clr t					;reset flags
002006 9300 077b 	sts flagSlOn, t
002008 9300 077c 	sts flagSlStickMixing, t
00200a 9300 077d 	sts flagAlarmOn, t
                 
00200c 910c      	ld t, x					;get the function ID
                 
00200d 91a0 0783 	lds xl, AuxFunctionOld			;produce a short beep when the AUX function (flight mode + alarm + stick scaling) changes
00200f 95e2      	swap zl
002010 2be0      	or zl, t
002011 93e0 0783 	sts AuxFunctionOld, zl
002013 17ea      	cp zl, xl
002014 f019      	breq asp5
                 
002015 efaf      	ser xl
002016 93a0 07a1 	sts flagDebugBuzzerOn, xl
                 
002018 2300      asp5:	tst t					;acro?
002019 f0f1      	breq asp20
                 
00201a 3003      	cpi t, 3				;alarm?
00201b f439      	brne asp4
                 
00201c ef0f
00201d 9300 077d 	rvsetflagtrue flagAlarmOn		;yes, set flag and re-initialize the delay counter
00201f ef0f      	ser t
002020 9300 077f 	sts AuxBeepDelay, t
002022 c012      	rjmp asp3				;activate SL Stick Mixing mode
                 
002023 3002      asp4:	cpi t, 2				;normal SL?
002024 f481      	brne asp3
                 
002025 ef0f
002026 9300 077b 	rvsetflagtrue flagSlOn			;yes
002028 9100 065a
00202a 9300 0657
00202c 9100 065b
00202e 9300 0658
002030 9100 065c
002032 9300 0659 	b16mov SelflevelPgain, SelflevelPgainOrg
002034 c003      	rjmp asp20
                 
002035 efaf      asp3:	ser xl					;SL Stick Mixing is active
002036 93a0 077c 	sts flagSlStickMixing, xl
                 
                 asp20:
                 
                 	;--- LED flashing in sync with the LVA beeps ---
                 
002038 9100 079b
00203a 2300
00203b f022      	rvbrflagtrue flagLvaBuzzerOn, led2
                 
                 
                 
                 	;--- Turn on LED if armed ---
                 
00203c 9100 0770
00203e 2300
00203f f012      	rvbrflagtrue flagArmed, led1
                 
002040 982b      led2:	LedOff
002041 9508      	ret
                 
002042 9100 079d led1:	lds t, StatusBits			;allow the LED to flash when status bits are set
002044 2300      	tst t
002045 f409      	brne led3
                 
002046 9a2b      	LedOn
                 
002047 9508      led3:	ret
                 
                 .include "auxsettings.asm"
                 
                 .def AuxItem = r17
                 .def Changes = r18
                 
                 AuxSwitchSetup:
                 
002048 e002
002049 9300 0767 	lrv RxTimeoutLimit, 2
                 
00204b 2711      	clr AuxItem
00204c 2722      	clr Changes
00204d d0de      	rcall LoadAuxSwitchSetup	;load the AUX switch setup in case the user profile was modified (imported or cleared)
                 
00204e 931f      aux11:	push AuxItem			;get RX input to update the current AUX switch position
00204f 932f      	push Changes
002050 940e 4434 	call GetRxChannels
002052 912f      	pop Changes
002053 911f      	pop AuxItem
                 
002054 9100 07fa 	lds t, RxBufferState		;update the display only when we have new data
002056 3003      	cpi t, 3
002057 f041      	breq aux10
                 
002058 e1c9      	ldi yl, 25			;wait 2.5ms
002059 940e 4ea1 	call wms
                 
00205b 9100 07db
00205d 2300
00205e f40a      	rvbrflagfalse RxFrameValid, aux10	;update the display also when no valid frames are received
                 
00205f c052      	rjmp aux18			;skip update
                 
002060 940e 4d81 aux10:	call LcdClear6x8
                 
002062 2700      	clr t				;print all text labels first
                 
002063 930f      aux15:	push t
002064 91a0 0781 	lds xl, AuxSwitchPosition
002066 170a      	cp t, xl
002067 f411      	brne aux22
                 
002068 e400      	ldi t, '@'			;show indicator for current AUX switch position
002069 c001      	rjmp aux23
                 
00206a e200      aux22:	ldi t, ' '
                 
00206b 940e 4c35 aux23:	call PrintChar
00206d 910f      	pop t
00206e 930f      	push t
00206f e3a1      	ldi xl, '1'
002070 0f0a      	add t, xl
002071 940e 4c35 	call PrintChar
002073 e000
002074 9300 073f 	lrv X1, 0
002076 940e 4b89 	call LineFeed
002078 910f      	pop t
002079 9503      	inc t
00207a 3005      	cpi t, 5
00207b f739      	brne aux15
                 
00207c e001
00207d 9300 0740 	lrv Y1, 1			;aux position 1 function
00207f 9100 0784 	lds t, AuxPos1Function
002081 d090      	rcall PrintAuxFnValue
                 
002082 9100 0785 	lds t, AuxPos2Function		;aux position 2 function
002084 d08d      	rcall PrintAuxFnValue
                 
002085 9100 0786 	lds t, AuxPos3Function		;aux position 3 function
002087 d08a      	rcall PrintAuxFnValue
                 
002088 9100 0787 	lds t, AuxPos4Function		;aux position 4 function
00208a d087      	rcall PrintAuxFnValue
                 
00208b 9100 0788 	lds t, AuxPos5Function		;aux position 5 function
00208d d084      	rcall PrintAuxFnValue
                 
00208e e001
00208f 9300 0740 	lrv Y1, 1			;aux position 1 stick scaling
002091 9100 0789 	lds t, AuxPos1SS
002093 d08c      	rcall PrintAuxSSValue
                 
002094 9100 078a 	lds t, AuxPos2SS		;aux position 2 stick scaling
002096 d089      	rcall PrintAuxSSValue
                 
002097 9100 078b 	lds t, AuxPos3SS		;aux position 3 stick scaling
002099 d086      	rcall PrintAuxSSValue
                 
00209a 9100 078c 	lds t, AuxPos4SS		;aux position 4 stick scaling
00209c d083      	rcall PrintAuxSSValue
                 
00209d 9100 078d 	lds t, AuxPos5SS		;aux position 5 stick scaling
00209f d080      	rcall PrintAuxSSValue
                 
                 	;footer
0020a0 940e 4bca 	call PrintStdFooter
                 
                 	;print selector
0020a2 eaee
0020a3 e4f2
0020a4 e004
0020a5 9f01
0020a6 0de0
0020a7 1df1      	ldzarray aux7*2, 4, AuxItem
0020a8 940e 4b0f 	call PrintSelector
                 
0020aa 940e 4d2c 	call LcdUpdate
                 
0020ac 9100 074d 	lds t, RxMode			;skip delay for digital input modes
0020ae 3002      	cpi t, RxModeSBus
0020af f414      	brge aux18
                 
0020b0 940e 42f4 	call RxPollDelay
                 
0020b2 940e 4eaf aux18:	call GetButtons
                 
0020b4 3008      	cpi t, 0x08			;BACK?
0020b5 f591      	brne aux12
                 
0020b6 2f02      	mov t, Changes
0020b7 7001      	andi t, 0x01
0020b8 f0b1      	breq aux17
                 
0020b9 91a0 0784 	lds xl, AuxPos1Function		;save AUX functions to EEPROM
0020bb ece5
0020bc e0f0      	ldz eeAuxPos1Function
0020bd 940e 4ef5 	call StoreEePVariable8
                 
0020bf 91a0 0785 	lds xl, AuxPos2Function
0020c1 940e 4ef5 	call StoreEePVariable8		;eeAuxPos2Function
                 
0020c3 91a0 0786 	lds xl, AuxPos3Function
0020c5 940e 4ef5 	call StoreEePVariable8		;eeAuxPos3Function
                 
0020c7 91a0 0787 	lds xl, AuxPos4Function
0020c9 940e 4ef5 	call StoreEePVariable8		;eeAuxPos4Function
                 
0020cb 91a0 0788 	lds xl, AuxPos5Function
0020cd 940e 4ef5 	call StoreEePVariable8		;eeAuxPos5Function
                 
0020cf 7022      aux17:	andi Changes, 0x02
0020d0 f0b1      	breq aux24
                 
0020d1 91a0 0789 	lds xl, AuxPos1SS		;save AUX stick scaling offsets to EEPROM
0020d3 ece0
0020d4 e0f0      	ldz eeAuxPos1SS
0020d5 940e 4ef5 	call StoreEePVariable8
                 
0020d7 91a0 078a 	lds xl, AuxPos2SS
0020d9 940e 4ef5 	call StoreEePVariable8		;eeAuxPos2SS
                 
0020db 91a0 078b 	lds xl, AuxPos3SS
0020dd 940e 4ef5 	call StoreEePVariable8		;eeAuxPos3SS
                 
0020df 91a0 078c 	lds xl, AuxPos4SS
0020e1 940e 4ef5 	call StoreEePVariable8		;eeAuxPos4SS
                 
0020e3 91a0 078d 	lds xl, AuxPos5SS
0020e5 940e 4ef5 	call StoreEePVariable8		;eeAuxPos5SS
                 
0020e7 9508      aux24:	ret
                 
0020e8 3004      aux12:	cpi t, 0x04			;PREV?
0020e9 f441      	brne aux13
                 
0020ea 951a      	dec AuxItem
0020eb f40a      	brpl aux16
                 
0020ec e019      	ldi AuxItem, 9
                 
0020ed 940e 1dd3 aux16:	call Beep
0020ef 940e 4ecd 	call ReleaseButtons
0020f1 cf5c      	rjmp aux11	
                 
0020f2 3002      aux13:	cpi t, 0x02			;NEXT?
0020f3 f429      	brne aux14
                 
0020f4 9513      	inc AuxItem
0020f5 301a      	cpi AuxItem, 10
0020f6 f7b1      	brne aux16
                 
0020f7 2711      	clr AuxItem
0020f8 cff4      	rjmp aux16	
                 
0020f9 3001      aux14:	cpi t, 0x01			;CHANGE?
0020fa f4b1      	brne aux19
                 
0020fb 2fc1      	mov yl, AuxItem
0020fc 95c6      	lsr yl
0020fd 2fd1      	mov yh, AuxItem
0020fe 70d1      	andi yh, 0x01
0020ff f021      	breq aux25
                 
002100 e8a9
002101 e0b7      	ldx AuxPos1SS
002102 6022      	ori Changes, 0x02
002103 c003      	rjmp aux26
                 
002104 e8a4
002105 e0b7      aux25:	ldx AuxPos1Function
002106 6021      	ori Changes, 0x01
                 
002107 0fac      aux26:	add xl, yl			;calculate variable's address
002108 f408      	brcc aux20
                 
002109 95b3      	inc xh
                 
00210a 910c      aux20:	ld t, x				;fetch and increase the variable
00210b 9503      	inc t
00210c 3004      	cpi t, 4
00210d f00c      	brlt aux21
                 
00210e 2700      	clr t
                 
00210f 930c      aux21:	st x, t
002110 cfdc      	rjmp aux16
                 
002111 cf3c      aux19:	rjmp aux11
                 
                 
                 
                 	;--- Print AUX function (string) ---
                 
                 PrintAuxFnValue:
                 
002112 930f      	push t				;register T holds the item index
002113 e00c
002114 9300 073f 	lrv X1, 12
002116 940e 4ba7 	call PrintColonAndSpace
002118 910f      	pop t
002119 e1e8
00211a e9fd      	ldz auxfn*2
00211b 940e 4c0f 	call PrintFromStringArray
00211d 940e 4b89 	call LineFeed
00211f 9508      	ret
                 
                 
                 
                 	;--- Print AUX stick scaling offset (string) ---
                 
                 PrintAuxSSValue:
                 
002120 930f      	push t				;register T holds the item index
002121 e50b
002122 9300 073f 	lrv X1, 91
002124 910f      	pop t
002125 e2e0
002126 e9fd      	ldz auxss*2
002127 940e 4c0f 	call PrintFromStringArray
002129 940e 4b89 	call LineFeed
00212b 9508      	ret
                 
                 
                 
                 	;--- Load AUX switch setup from EEPROM ---
                 
                 LoadAuxSwitchSetup:
                 
00212c ece0
00212d e0f0      	ldz eeAuxPos1SS
00212e 940e 4eef 	call GetEePVariable8
002130 93a0 0789 	sts AuxPos1SS, xl
                 
002132 940e 4eef 	call GetEePVariable8		;eeAuxPos2SS
002134 93a0 078a 	sts AuxPos2SS, xl
                 
002136 940e 4eef 	call GetEePVariable8		;eeAuxPos3SS
002138 93a0 078b 	sts AuxPos3SS, xl
                 
00213a 940e 4eef 	call GetEePVariable8		;eeAuxPos4SS
00213c 93a0 078c 	sts AuxPos4SS, xl
                 
00213e 940e 4eef 	call GetEePVariable8		;eeAuxPos5SS
002140 93a0 078d 	sts AuxPos5SS, xl
                 
002142 940e 4eef 	call GetEePVariable8		;eeAuxPos1Function
002144 93a0 0784 	sts AuxPos1Function, xl
                 
002146 940e 4eef 	call GetEePVariable8		;eeAuxPos2Function
002148 93a0 0785 	sts AuxPos2Function, xl
                 
00214a 940e 4eef 	call GetEePVariable8		;eeAuxPos3Function
00214c 93a0 0786 	sts AuxPos3Function, xl
                 
00214e 940e 4eef 	call GetEePVariable8		;eeAuxPos4Function
002150 93a0 0787 	sts AuxPos4Function, xl
                 
002152 940e 4eef 	call GetEePVariable8		;eeAuxPos5Function
002154 93a0 0788 	sts AuxPos5Function, xl
002156 9508      	ret
                 
                 
                 
                 
002157 0017
002158 094f      aux7:	.db 23, 0, 79, 9
002159 005a
00215a 097f      	.db 90, 0, 127, 9
00215b 0917
00215c 124f      	.db 23, 9, 79, 18
00215d 095a
00215e 127f      	.db 90, 9, 127, 18
00215f 1217
002160 1b4f      	.db 23, 18, 79, 27
002161 125a
002162 1b7f      	.db 90, 18, 127, 27
002163 1b17
002164 244f      	.db 23, 27, 79, 36
002165 1b5a
002166 247f      	.db 90, 27, 127, 36
002167 2417
002168 2d4f      	.db 23, 36, 79, 45
002169 245a
00216a 2d7f      	.db 90, 36, 127, 45
                 
                 
                 .undef Changes
                 .undef AuxItem
                 
                 
00216b 7541
00216c 3278
00216d 0000      aux2:	.db "Aux2", 0, 0
00216e 7541
00216f 3378
002170 0000      aux3:	.db "Aux3", 0, 0
                 
                 	;--- AUX stick scaling offset ---
                 
                 AddAuxStickScaling:
                 
002171 27aa      	clr xl
002172 27bb      	clr xh
002173 27dd      	clr yh
                 
002174 91c0 078f 	lds yl, AuxStickScaling
002176 95c6      	lsr yl
002177 f408      	brcc ass1
                 
002178 9654      	adiw x, 20			;increase aileron and elevator stick scaling
                 
002179 95c6      ass1:	lsr yl
00217a f408      	brcc ass2
                 
00217b 965e      	adiw x, 30			;increase aileron and elevator stick scaling
                 
00217c 93b0 0540
00217e 93a0 0541
002180 93d0 0542 ass2:	b16store Temp			;increase aileron and elevator stick scaling by 0 (off), 20, 30 or 50
002182 940e 2f29 	call TempDiv16
002184 9130 0600
002186 9140 0601
002188 9150 0602
00218a 9160 0540
00218c 9170 0541
00218e 9180 0542
002190 0f58
002191 1f47
002192 1f36
002193 9330 05f1
002195 9340 05f2
002197 9350 05f3 	b16add StickScaleRoll, StickScaleRollOrg, Temp
002199 9130 0603
00219b 9140 0604
00219d 9150 0605
00219f 9160 0540
0021a1 9170 0541
0021a3 9180 0542
0021a5 0f58
0021a6 1f47
0021a7 1f36
0021a8 9330 05f4
0021aa 9340 05f5
0021ac 9350 05f6 	b16add StickScalePitch, StickScalePitchOrg, Temp
0021ae 9508      	ret
                 
                 .include "loader.asm"
                 
                 .def Counter = r17
                 .def MixerValue = r18
                 .def FlagIndex = r19
                 .def Flags = r20
                 
                 LoadMixer:
                 
0021af 9100 0803 	lds t, UserProfile		;refuse access unless user profile #1 is selected
0021b1 2300      	tst t
0021b2 f029      	breq loa13
                 
0021b3 efe0
0021b4 e6fa      	ldz nadtxt2*2
0021b5 940e 357a 	call ShowNoAccessDlg
0021b7 9508      	ret
                 
0021b8 e4c4
0021b9 e4d4      loa13:	ldy loa10*2
                 
0021ba 91a0 0748 	lds xl, LoadMenuListYposSave
0021bc 91b0 0747 	lds xh, LoadMenuCursorYposSave
                 
0021be e104      	ldi t, 20			;menu items (i.e. motor layouts)
                 
0021bf 940e 1de9 	call Menu
                 
0021c1 93c0 0748 	sts LoadMenuListYposSave, yl
0021c3 93d0 0747 	sts LoadMenuCursorYposSave, yh
                 
0021c5 f008      	brcs loa22			;BACK pressed?
0021c6 9508      	ret				;Yes, return
                 
0021c7 e3e0
0021c8 e4f4      loa22:	ldz loa1*2
0021c9 940e 56d7 	call ShowConfirmationDlg
                 
0021cb 3001      	cpi t, 0x01			;YES?
0021cc f009      	breq loa18
                 
0021cd cfea      	rjmp loa13			;CANCEL was pressed
                 
0021ce 940e 4126 loa18:	call StopPwmQuiet		;stop PWM output while loading motor layout
0021d0 9a29      	BuzzerOn
                 
0021d1 e8e2
0021d2 e4f6
0021d3 e108
0021d4 9f0a
0021d5 0de0
0021d6 1df1      	ldzarray mod0*2, 24, xl		;get motor layout address based on menu selection
0021d7 01df      	movw x, z
0021d8 9670      	adiw z, 16			;pointer to flag array
                 
0021d9 efcb
0021da e0d7      	ldy FlagByte1			;copy flag array to RAM
0021db e018      	ldi Counter, 8
                 
0021dc 9105      loa24:	lpm t, z+
0021dd 9309      	st y+, t
0021de 951a      	dec Counter
0021df f7e1      	brne loa24
                 
0021e0 01fd      	movw z, x			;get pointer to motor layout
0021e1 e0c4
0021e2 e0d0      	ldy eeMixerTable		;register Y holds the EEPROM pointer
0021e3 2733      	clr FlagIndex			;flag byte index and loop counter for the outer loop
                 
0021e4 91a5      loa19:	lpm xl, z+			;get pointer to mixer value array
0021e5 91b5      	lpm xh, z+
0021e6 93ef
0021e7 93ff      	pushz
0021e8 01fd      	movw z, x			;register Z points to the first item in the current motor layout array
0021e9 e016      	ldi Counter, 6			;loop counter for the inner loop
                 
0021ea efab
0021eb e0b7      	ldx FlagByte1			;get flags from RAM
0021ec 0fa3      	add xl, FlagIndex
0021ed 2700      	clr t
0021ee 1fb0      	adc xh, t
0021ef 914c      	ld Flags, x
0021f0 91bf
0021f1 91af      	popx				;register X points to the next layout array
                 
0021f2 9125      loa20:	lpm MixerValue, z+		;mixer value will be modified based on which flags are set
                 
0021f3 2f04      	mov t, Flags
0021f4 7800      	andi t, 0x80
0021f5 f009      	breq loa21
                 
0021f6 9521      	neg MixerValue			;set negative mixer value
                 
0021f7 2f04      loa21:	mov t, Flags
0021f8 7008      	andi t, 0x08
0021f9 f009      	breq loa23
                 
0021fa ef2f      	ldi MixerValue, -1		;set mixer value to -1 (i.e. show CCW motor rotation)
                 
0021fb 2f02      loa23:	mov t, MixerValue		;save mixer value
0021fc 93ef
0021fd 93ff      	pushz
0021fe 01fe      	movw z, y
0021ff 940e 4f1f 	call WriteEeprom		;for user profile #1 only
002201 9621      	adiw y, 1
002202 91ff
002203 91ef      	popz
                 
002204 0f44      	lsl Flags
002205 951a      	dec Counter
002206 f759      	brne loa20			;inner loop
                 
002207 9622      	adiw y, 2			;compensate for the two unused bytes
                 
002208 01fd      	movw z, x			;make register Z point to the next motor layout array
002209 9533      	inc FlagIndex
00220a 3038      	cpi FlagIndex, 8
00220b f2c4      	brlt loa19			;outer loop
                 
00220c ef0f
00220d 2fa0      	setflagtrue xl			;set flag to indicate that a motor layout has been selected
00220e ebef
00220f e0f0      	ldz eeMotorLayoutOK
002210 940e 4ef7 	call StoreEeVariable8		;for user profile #1 only
                 
002212 9829      	BuzzerOff
                 
002213 940e 4112 	call StartPwmQuiet		;enable PWM output again
                 
002215 940e 5a07 	call MotorLayout		;display motor layout
002217 cfa0      	rjmp loa13
                 
                 
                 .undef Counter
                 .undef MixerValue
                 .undef FlagIndex
                 .undef Flags
                 
                 
                 
002218 6f4c
002219 6461
00221a 6d20
00221b 746f
00221c 726f
00221d 6c20
00221e 7961
00221f 756f
002220 2e74
002221 0000      loa1:	.db "Load motor layout.", 0, 0
                 
002222 6953
002223 676e
002224 656c
002225 6f43
002226 7470
002227 7265
002228 3120
002229 204d
00222a 5334
00222b 2020      loa10:	.db "SingleCopter 1M 4S  "
00222c 6953
00222d 676e
00222e 656c
00222f 6f43
002230 7470
002231 7265
002232 3220
002233 204d
002234 5332
002235 2020      	.db "SingleCopter 2M 2S  "
002236 7544
002237 6c61
002238 6f43
002239 7470
00223a 7265
00223b 4920
00223c 2049
00223d 2020
00223e 2020
00223f 2020      	.db "DualCopter II       "
002240 7254
002241 4369
002242 706f
002243 6574
002244 2072
002245 4949
002246 2020
002247 2020
002248 2020
002249 2020      	.db "TriCopter II        "
00224a 7551
00224b 6461
00224c 6f72
00224d 6f43
00224e 7470
00224f 7265
002250 7820
002251 6d20
002252 646f
002253 2065      	.db "QuadroCopter x mode "
002254 7551
002255 6461
002256 6f72
002257 6f43
002258 7470
002259 7265
00225a 2b20
00225b 6d20
00225c 646f
00225d 2065      	.db "QuadroCopter + mode "
00225e 2d56
00225f 6154
002260 6c69
002261 2020
002262 2020
002263 2020
002264 2020
002265 2020
002266 2020
002267 2020      	.db "V-Tail              "
002268 2d56
002269 6154
00226a 6c69
00226b 4820
00226c 6e75
00226d 6574
00226e 2072
00226f 2020
002270 2020
002271 2020      	.db "V-Tail Hunter       "
002272 3459
002273 2020
002274 2020
002275 2020
002276 2020
002277 2020
002278 2020
002279 2020
00227a 2020
00227b 2020      	.db "Y4                  "
00227c 6548
00227d 6178
00227e 6f43
00227f 7470
002280 7265
002281 2020
002282 7820
002283 6d20
002284 646f
002285 2065      	.db "HexaCopter   x mode "
002286 6548
002287 6178
002288 6f43
002289 7470
00228a 7265
00228b 2020
00228c 2b20
00228d 6d20
00228e 646f
00228f 2065      	.db "HexaCopter   + mode "
002290 3648
002291 2020
002292 2020
002293 2020
002294 2020
002295 2020
002296 2020
002297 2020
002298 2020
002299 2020      	.db "H6                  "
00229a 3656
00229b 2020
00229c 2020
00229d 2020
00229e 2020
00229f 2020
0022a0 2020
0022a1 2020
0022a2 2020
0022a3 2020      	.db "V6                  "
0022a4 3659
0022a5 2020
0022a6 2020
0022a7 2020
0022a8 2020
0022a9 2020
0022aa 2020
0022ab 2020
0022ac 2020
0022ad 2020      	.db "Y6                  "
0022ae 634f
0022af 6f74
0022b0 6f43
0022b1 7470
0022b2 7265
0022b3 2020
0022b4 7820
0022b5 6d20
0022b6 646f
0022b7 2065      	.db "OctoCopter   x mode "
0022b8 634f
0022b9 6f74
0022ba 6f43
0022bb 7470
0022bc 7265
0022bd 2020
0022be 2b20
0022bf 6d20
0022c0 646f
0022c1 2065      	.db "OctoCopter   + mode "
0022c2 3848
0022c3 2020
0022c4 2020
0022c5 2020
0022c6 2020
0022c7 2020
0022c8 2020
0022c9 2020
0022ca 2020
0022cb 2020      	.db "H8                  "
0022cc 3856
0022cd 2020
0022ce 2020
0022cf 2020
0022d0 2020
0022d1 2020
0022d2 2020
0022d3 2020
0022d4 2020
0022d5 2020      	.db "V8                  "
0022d6 3858
0022d7 2020
0022d8 2020
0022d9 2020
0022da 2020
0022db 2020
0022dc 7820
0022dd 6d20
0022de 646f
0022df 2065      	.db "X8           x mode "
0022e0 3858
0022e1 2020
0022e2 2020
0022e3 2020
0022e4 2020
0022e5 2020
0022e6 2b20
0022e7 6d20
0022e8 646f
0022e9 2065      	.db "X8           + mode "
                 
                 
                 
                 	;--- Unique motor layout arrays (with unused bytes removed) ---
                 
                 	;    thr roll pitch yaw ofs flags
0022ea 0000
0022eb 0000
0022ec 0000      lmd1:	.db  0  , 0  , 0  , 0  , 0  , 0
0022ed 0000
0022ee 6400
0022ef 0032      lmd2:	.db  0  , 0  , 0  , 100, 50 , 0
0022f0 0000
0022f1 0064
0022f2 0032      lmd3:	.db  0  , 0  , 100, 0  , 50 , 0
0022f3 0000
0022f4 6464
0022f5 0000      lmd4:	.db  0  , 0  , 100, 100, 0  , 0
0022f6 0000
0022f7 6464
0022f8 0032      lmd5:	.db  0  , 0  , 100, 100, 50 , 0
0022f9 6400
0022fa 0000
0022fb 0032      lmd6:	.db  0  , 100, 0  , 0  , 50 , 0
0022fc 6400
0022fd 6400
0022fe 0032      lmd7:	.db  0  , 100, 0  , 100, 50 , 0
0022ff 0064
002300 0000
002301 0300      lmd8:	.db  100, 0  , 0  , 0  , 0  , 3
002302 0064
002303 6400
002304 0300      lmd9:	.db  100, 0  , 0  , 100, 0  , 3
002305 0064
002306 0064
002307 0300      lmd10:	.db  100, 0  , 100, 0  , 0  , 3
002308 0064
002309 6464
00230a 0300      lmd11:	.db  100, 0  , 100, 100, 0  , 3
00230b 2664
00230c 645c
00230d 0300      lmd12:	.db  100, 38 , 92 , 100, 0  , 3
00230e 2a64
00230f 6447
002310 0300      lmd13:	.db  100, 42 , 71 , 100, 0  , 3
002311 3264
002312 6457
002313 0300      lmd14:	.db  100, 50 , 87 , 100, 0  , 3
002314 3d64
002315 6418
002316 0300      lmd15:	.db  100, 61 , 24 , 100, 0  , 3
002317 4764
002318 6400
002319 0300      lmd16:	.db  100, 71 , 0  , 100, 0  , 3
00231a 4764
00231b 6418
00231c 0300      lmd17:	.db  100, 71 , 24 , 100, 0  , 3
00231d 4764
00231e 0047
00231f 0300      lmd18:	.db  100, 71 , 71 , 0  , 0  , 3
                 ;lmd19:	.db  100, 71 , 71 , 1  , 0  , 3
002320 4764
002321 6447
002322 0300      lmd20:	.db  100, 71 , 71 , 100, 0  , 3
002323 5164
002324 6418
002325 0300      lmd21:	.db  100, 81 , 24 , 100, 0  , 3
002326 5764
002327 0032
002328 0300      lmd22:	.db  100, 87 , 50 , 0  , 0  , 3
                 ;lmd23:	.db  100, 87 , 50 , 1  , 0  , 3
002329 5764
00232a 6432
00232b 0300      lmd24:	.db  100, 87 , 50 , 100, 0  , 3
00232c 5c64
00232d 6426
00232e 0300      lmd25:	.db  100, 92 , 38 , 100, 0  , 3
00232f 6464
002330 0000
002331 0300      lmd26:	.db  100, 100, 0  , 0  , 0  , 3
                 ;lmd27:	.db  100, 100, 0  , 1  , 0  , 3
002332 6464
002333 6400
002334 0300      lmd28:	.db  100, 100, 0  , 100, 0  , 3
002335 6464
002336 6447
002337 0300      lmd29:	.db  100, 100, 71 , 100, 0  , 3
002338 0078
002339 645a
00233a 0300      lmd30:	.db  120, 0  , 90 , 100, 0  , 3
00233b 6464
00233c 2864
00233d 0300      lmd31:	.db  100, 100, 100, 40 , 0  , 3
00233e 005f
00233f 6464
002340 0300      lmd32:	.db  95 , 0  , 100, 100, 0  , 3
                 
                 
                 
                 mod0:
                 	;--- SingleCopter 1M 4S ---
                 
                 	;    thr roll pitch yaw offs flags unused
                 ;	.db  100, 0  , 0  , 0  , 0  , 3  , 0  , 0	;m1
                 ;	.db  0  , 100, 0  , 100, 50 , 0  , 0  , 0	;m2
                 ;	.db  0  , 0  , 100, 100, 50 , 0  , 0  , 0	;m3
                 ;	.db  0  ,-100, 0  , 100, 50 , 0  , 0  , 0	;m4
                 ;	.db  0  , 0  ,-100, 100, 50 , 0  , 0  , 0	;m5
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m6
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m7
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m8
                 
                 	;     M1      M2      M3      M4      M5      M6      M7      M8
002341 45fe
002342 45f8
002343 45ec
002344 45f8
002345 45ec
002346 45d4
002347 45d4
002348 45d4      	.dw lmd8*2, lmd7*2, lmd5*2, lmd7*2, lmd5*2, lmd1*2, lmd1*2, lmd1*2
002349 0000
00234a 4000
00234b 0020
00234c 0000      	.db 0x00,   0x00,   0x00,   0x40,   0x20,   0x00,   0x00,   0x00
                 
                 
                 	;--- SingleCopter 2M 2S ---
                 
                 	;    thr roll pitch yaw offs flags unused
                 ;	.db  100, 0  , 0  , 100, 0  , 3  , 0  , 0	;m1
                 ;	.db  100, 0  , 0  ,-100, 0  , 3  , 0  , 0	;m2
                 ;	.db  0  , 100, 0  , 0  , 50 , 0  , 0  , 0	;m3
                 ;	.db  0  , 0  , 100, 0  , 50 , 0  , 0  , 0	;m4
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m5
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m6
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m7
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m8
                 
                 	;     M1      M2      M3      M4      M5      M6      M7      M8
00234d 4604
00234e 4604
00234f 45f2
002350 45e0
002351 45d4
002352 45d4
002353 45d4
002354 45d4      	.dw lmd9*2, lmd9*2, lmd6*2, lmd3*2, lmd1*2, lmd1*2, lmd1*2, lmd1*2
002355 1000
002356 0000
002357 0000
002358 0000      	.db 0x00,   0x10,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00
                 
                 
                 	;--- DualCopter II ---
                 
                 	;    thr roll pitch yaw offs flags unused
                 ;	.db  100, 100, 0  , -1 , 0  , 3  , 0  , 0	;m1
                 ;	.db  100,-100, 0  , 0  , 0  , 3  , 0  , 0	;m2
                 ;	.db  0  , 0  , 100, 100, 0  , 0  , 0  , 0	;m3
                 ;	.db  0  , 0  ,-100, 100, 0  , 0  , 0  , 0	;m4
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m5
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m6
                 ;	.db  0  , 0  , 100, 100, 0  , 0  , 0  , 0	;m7
                 ;	.db  0  , 0  ,-100, 100, 0  , 0  , 0  , 0	;m8
                 
                 	;     M1       M2       M3      M4      M5      M6      M7      M8
002359 465e
00235a 465e
00235b 45e6
00235c 45e6
00235d 45d4
00235e 45d4
00235f 45e6
002360 45e6      	.dw lmd26*2, lmd26*2, lmd4*2, lmd4*2, lmd1*2, lmd1*2, lmd4*2, lmd4*2
002361 4001
002362 2000
002363 0000
002364 2000      	.db 0x01,    0x40,    0x00,   0x20,   0x00,   0x00,   0x00,   0x20
                 
                 
                 	;--- TriCopter II ---
                 
                 	;    thr roll pitch yaw offs flags unused
                 ;	.db  100,-87 , 50 , 0  , 0  , 3  , 0  , 0	;m1
                 ;	.db  100, 87 , 50 ,-1  , 0  , 3  , 0  , 0	;m2
                 ;	.db  100, 0  ,-100, 0  , 0  , 3  , 0  , 0	;m3
                 ;	.db  0  , 0  , 0  , 100, 50 , 0  , 0  , 0	;m4
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m5
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m6
                 ;	.db  0  , 0  , 0  , 100,-50 , 0  , 0  , 0	;m7
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m8
                 
                 	;     M1       M2       M3       M4      M5      M6      M7      M8
002365 464c
002366 464c
002367 460a
002368 45da
002369 45d4
00236a 45d4
00236b 45da
00236c 45d4      	.dw lmd22*2, lmd22*2, lmd10*2, lmd2*2, lmd1*2, lmd1*2, lmd2*2, lmd1*2
00236d 0140
00236e 0020
00236f 0000
002370 0010      	.db 0x40,    0x01,    0x20,    0x00,   0x00,   0x00,   0x10,   0x00
                 
                 
                 	;--- QuadroCopter x mode ---
                 
                 	;    thr roll pitch yaw offs flags unused
                 ;	.db  100,-71 , 71 , 100, 0  , 3  , 0  , 0	;m1
                 ;	.db  100, 71 , 71 ,-100, 0  , 3  , 0  , 0	;m2
                 ;	.db  100, 71 ,-71 , 100, 0  , 3  , 0  , 0	;m3
                 ;	.db  100,-71 ,-71 ,-100, 0  , 3  , 0  , 0	;m4
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m5
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m6
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m7
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m8
                 
                 	;     M1       M2       M3       M4       M5      M6      M7      M8
002371 4640
002372 4640
002373 4640
002374 4640
002375 45d4
002376 45d4
002377 45d4
002378 45d4      	.dw lmd20*2, lmd20*2, lmd20*2, lmd20*2, lmd1*2, lmd1*2, lmd1*2, lmd1*2
002379 1040
00237a 7020
00237b 0000
00237c 0000      	.db 0x40,    0x10,    0x20,    0x70,    0x00,   0x00,   0x00,   0x00
                 
                 
                 	;--- QuadroCopter + mode ---
                 
                 	;    thr roll pitch yaw offs flags unused
                 ;	.db  100, 0  , 100, 100, 0  , 3  , 0  , 0	;m1
                 ;	.db  100, 100, 0  ,-100, 0  , 3  , 0  , 0	;m2
                 ;	.db  100, 0  ,-100, 100, 0  , 3  , 0  , 0	;m3
                 ;	.db  100,-100, 0  ,-100, 0  , 3  , 0  , 0	;m4
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m5
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m6
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m7
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m8
                 
                 	;     M1       M2       M3       M4       M5      M6      M7      M8
00237d 4610
00237e 4664
00237f 4610
002380 4664
002381 45d4
002382 45d4
002383 45d4
002384 45d4      	.dw lmd11*2, lmd28*2, lmd11*2, lmd28*2, lmd1*2, lmd1*2, lmd1*2, lmd1*2
002385 1000
002386 5020
002387 0000
002388 0000      	.db 0x00,    0x10,    0x20,    0x50,    0x00,   0x00,   0x00,   0x00
                 
                 
                 	;--- V-Tail ---
                 
                 	;    thr roll pitch yaw offs flags unused
                 ;	.db  100,-71 , 71 , 0  , 0  , 3  , 0  , 0	;m1
                 ;	.db  100, 71 , 71 ,-1  , 0  , 3  , 0  , 0	;m2
                 ;	.db  120, 0  ,-90 , 100, 0  , 3  , 0  , 0	;m3
                 ;	.db  120, 0  ,-90 ,-100, 0  , 3  , 0  , 0	;m4
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m5
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m6
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m7
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m8
                 
                 	;     M1       M2       M3       M4       M5      M6      M7      M8
002389 463a
00238a 463a
00238b 4670
00238c 4670
00238d 45d4
00238e 45d4
00238f 45d4
002390 45d4      	.dw lmd18*2, lmd18*2, lmd30*2, lmd30*2, lmd1*2, lmd1*2, lmd1*2, lmd1*2
002391 0140
002392 3020
002393 0000
002394 0000      	.db 0x40,    0x01,    0x20,    0x30,    0x00,   0x00,   0x00,   0x00
                 
                 
                 	;--- V-Tail Hunter ---
                 
                 	;    thr roll pitch yaw offs flags unused
                 ;	.db  100,-100, 100,-40,  0  , 3  , 0  , 0	;m1
                 ;	.db  100, 100, 100, 40,  0  , 3  , 0  , 0	;m2
                 ;	.db  95,  0  ,-100, 100, 0  , 3  , 0  , 0	;m3
                 ;	.db  95,  0  ,-100,-100, 0  , 3  , 0  , 0	;m4
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m5
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m6
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m7
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m8
                 
                 	;     M1       M2       M3       M4       M5      M6      M7      M8
002395 4676
002396 4676
002397 467c
002398 467c
002399 45d4
00239a 45d4
00239b 45d4
00239c 45d4      	.dw lmd31*2, lmd31*2, lmd32*2, lmd32*2, lmd1*2, lmd1*2, lmd1*2, lmd1*2
00239d 0050
00239e 3020
00239f 0000
0023a0 0000      	.db 0x50,    0x00,    0x20,    0x30,    0x00,   0x00,   0x00,   0x00
                 
                 
                 	;--- Y4 ---
                 
                 	;    thr roll pitch yaw offs flags unused
                 ;	.db  100,-71 , 71 , 100, 0  , 3  , 0  , 0	;m1
                 ;	.db  100, 71 , 71 ,-100, 0  , 3  , 0  , 0	;m2
                 ;	.db  100, 0  ,-100, 100, 0  , 3  , 0  , 0	;m3
                 ;	.db  100, 0  ,-100,-100, 0  , 3  , 0  , 0	;m4
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m5
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m6
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m7
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m8
                 
                 	;     M1       M2       M3       M4       M5      M6      M7      M8
0023a1 4640
0023a2 4640
0023a3 4610
0023a4 4610
0023a5 45d4
0023a6 45d4
0023a7 45d4
0023a8 45d4      	.dw lmd20*2, lmd20*2, lmd11*2, lmd11*2, lmd1*2, lmd1*2, lmd1*2, lmd1*2
0023a9 1040
0023aa 3020
0023ab 0000
0023ac 0000      	.db 0x40,    0x10,    0x20,    0x30,    0x00,   0x00,   0x00,   0x00
                 
                 
                 	;--- HexaCopter x mode ---
                 
                 	;    thr roll pitch yaw offs flags unused
                 ;	.db  100, 50 , 87 , 100, 0  , 3  , 0  , 0	;m1
                 ;	.db  100, 100, 0  ,-100, 0  , 3  , 0  , 0	;m2
                 ;	.db  100, 50 ,-87 , 100, 0  , 3  , 0  , 0	;m3
                 ;	.db  100,-50 ,-87 ,-100, 0  , 3  , 0  , 0	;m4
                 ;	.db  100,-100, 0  , 100, 0  , 3  , 0  , 0	;m5
                 ;	.db  100,-50 , 87 ,-100, 0  , 3  , 0  , 0	;m6
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m7
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m8
                 
                 	;     M1       M2       M3       M4       M5       M6       M7      M8
0023ad 4622
0023ae 4664
0023af 4622
0023b0 4622
0023b1 4664
0023b2 4622
0023b3 45d4
0023b4 45d4      	.dw lmd14*2, lmd28*2, lmd14*2, lmd14*2, lmd28*2, lmd14*2, lmd1*2, lmd1*2
0023b5 1000
0023b6 7020
0023b7 5040
0023b8 0000      	.db 0x00,    0x10,    0x20,    0x70,    0x40,    0x50,    0x00,   0x00
                 
                 
                 	;--- HexaCopter + mode ---
                 
                 	;    thr roll pitch yaw offs flags unused
                 ;	.db  100, 0  , 100, 100, 0  , 3  , 0  , 0	;m1
                 ;	.db  100, 87 , 50 ,-100, 0  , 3  , 0  , 0	;m2
                 ;	.db  100, 87 ,-50 , 100, 0  , 3  , 0  , 0	;m3
                 ;	.db  100, 0  ,-100,-100, 0  , 3  , 0  , 0	;m4
                 ;	.db  100,-87 ,-50 , 100, 0  , 3  , 0  , 0	;m5
                 ;	.db  100,-87 , 50 ,-100, 0  , 3  , 0  , 0	;m6
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m7
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m8
                 
                 	;     M1       M2       M3       M4       M5       M6       M7      M8
0023b9 4610
0023ba 4652
0023bb 4652
0023bc 4610
0023bd 4652
0023be 4652
0023bf 45d4
0023c0 45d4      	.dw lmd11*2, lmd24*2, lmd24*2, lmd11*2, lmd24*2, lmd24*2, lmd1*2, lmd1*2
0023c1 1000
0023c2 3020
0023c3 5060
0023c4 0000      	.db 0x00,    0x10,    0x20,    0x30,    0x60,    0x50,    0x00,   0x00
                 
                 
                 	;--- H6 ---
                 
                 	;    thr roll pitch yaw offs flags unused
                 ;	.db  100, 71 , 71 , 100, 0  , 3  , 0  , 0	;m1
                 ;	.db  100, 71 , 0  ,-100, 0  , 3  , 0  , 0	;m2
                 ;	.db  100, 71 ,-71 , 100, 0  , 3  , 0  , 0	;m3
                 ;	.db  100,-71 ,-71 ,-100, 0  , 3  , 0  , 0	;m4
                 ;	.db  100,-71 , 0  , 100, 0  , 3  , 0  , 0	;m5
                 ;	.db  100,-71 , 71 ,-100, 0  , 3  , 0  , 0	;m6
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m7
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m8
                 
                 	;     M1       M2       M3       M4       M5       M6       M7      M8
0023c5 4640
0023c6 462e
0023c7 4640
0023c8 4640
0023c9 462e
0023ca 4640
0023cb 45d4
0023cc 45d4      	.dw lmd20*2, lmd16*2, lmd20*2, lmd20*2, lmd16*2, lmd20*2, lmd1*2, lmd1*2
0023cd 1000
0023ce 7020
0023cf 5040
0023d0 0000      	.db 0x00,    0x10,    0x20,    0x70,    0x40,    0x50,    0x00,   0x00
                 
                 
                 	;--- V6 ---
                 
                 	;    thr roll pitch yaw offs flags unused
                 ;	.db  100, 100, 71 , 100, 0  , 3  , 0  , 0	;m1
                 ;	.db  100, 71 , 0  ,-100, 0  , 3  , 0  , 0	;m2
                 ;	.db  100, 42 ,-71 , 100, 0  , 3  , 0  , 0	;m3
                 ;	.db  100,-42 ,-71 ,-100, 0  , 3  , 0  , 0	;m4
                 ;	.db  100,-71 , 0  , 100, 0  , 3  , 0  , 0	;m5
                 ;	.db  100,-100, 71 ,-100, 0  , 3  , 0  , 0	;m6
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m7
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m8
                 
                 	;     M1       M2       M3       M4       M5       M6       M7      M8
0023d1 466a
0023d2 462e
0023d3 461c
0023d4 461c
0023d5 462e
0023d6 466a
0023d7 45d4
0023d8 45d4      	.dw lmd29*2, lmd16*2, lmd13*2, lmd13*2, lmd16*2, lmd29*2, lmd1*2, lmd1*2
0023d9 1000
0023da 7020
0023db 5040
0023dc 0000      	.db 0x00,    0x10,    0x20,    0x70,    0x40,    0x50,    0x00,   0x00
                 
                 
                 	;--- Y6 ---
                 
                 	;    thr roll pitch yaw offs flags unused
                 ;	.db  100,-87 , 50 , 100, 0  , 3  , 0  , 0	;m1
                 ;	.db  100,-87 , 50 ,-100, 0  , 3  , 0  , 0	;m2
                 ;	.db  100, 87 , 50 , 100, 0  , 3  , 0  , 0	;m3
                 ;	.db  100, 87 , 50 ,-100, 0  , 3  , 0  , 0	;m4
                 ;	.db  100, 0  ,-100, 100, 0  , 3  , 0  , 0	;m5
                 ;	.db  100, 0  ,-100,-100, 0  , 3  , 0  , 0	;m6
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m7
                 ;	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m8
                 
                 	;     M1       M2       M3       M4       M5       M6       M7      M8
0023dd 4652
0023de 4652
0023df 4652
0023e0 4652
0023e1 4610
0023e2 4610
0023e3 45d4
0023e4 45d4      	.dw lmd24*2, lmd24*2, lmd24*2, lmd24*2, lmd11*2, lmd11*2, lmd1*2, lmd1*2
0023e5 5040
0023e6 1000
0023e7 3020
0023e8 0000      	.db 0x40,    0x50,    0x00,    0x10,    0x20,    0x30,    0x00,   0x00
                 
                 
                 	;--- OctoCopter x mode ---
                 
                 	;    thr roll pitch yaw offs flags unused
                 ;	.db  100, 38 , 92 , 100, 0  , 3  , 0  , 0	;m1
                 ;	.db  100, 92 , 38 ,-100, 0  , 3  , 0  , 0	;m2
                 ;	.db  100, 92 ,-38 , 100, 0  , 3  , 0  , 0	;m3
                 ;	.db  100, 38 ,-92 ,-100, 0  , 3  , 0  , 0	;m4
                 ;	.db  100,-38 ,-92 , 100, 0  , 3  , 0  , 0	;m5
                 ;	.db  100,-92 ,-38 ,-100, 0  , 3  , 0  , 0	;m6
                 ;	.dw  100,-92 , 38 , 100, 0  , 3  , 0  , 0	;m7
                 ;	.db  100,-38 , 92 ,-100, 0  , 3  , 0  , 0	;m8
                 
                 	;     M1       M2       M3       M4       M5       M6       M7       M8
0023e9 4616
0023ea 4658
0023eb 4658
0023ec 4616
0023ed 4616
0023ee 4658
0023ef 4658
0023f0 4616      	.dw lmd12*2, lmd25*2, lmd25*2, lmd12*2, lmd12*2, lmd25*2, lmd25*2, lmd12*2
0023f1 1000
0023f2 3020
0023f3 7060
0023f4 5040      	.db 0x00,    0x10,    0x20,    0x30,    0x60,    0x70,    0x40,    0x50
                 
                 
                 	;--- OctoCopter + mode ---
                 
                 	;    thr roll pitch yaw offs flags unused
                 ;	.db  100, 0  , 100, 100, 0  , 3  , 0  , 0	;m1
                 ;	.db  100, 71 , 71 ,-100, 0  , 3  , 0  , 0	;m2
                 ;	.db  100, 100, 0  , 100, 0  , 3  , 0  , 0	;m3
                 ;	.db  100, 71 ,-71 ,-100, 0  , 3  , 0  , 0	;m4
                 ;	.db  100, 0  ,-100, 100, 0  , 3  , 0  , 0	;m5
                 ;	.db  100,-71 ,-71 ,-100, 0  , 3  , 0  , 0	;m6
                 ;	.dw  100,-100, 0  , 100, 0  , 3  , 0  , 0	;m7
                 ;	.db  100,-71 , 71 ,-100, 0  , 3  , 0  , 0	;m8
                 
                 	;     M1       M2       M3       M4       M5       M6       M7       M8
0023f5 4610
0023f6 4640
0023f7 4664
0023f8 4640
0023f9 4610
0023fa 4640
0023fb 4664
0023fc 4640      	.dw lmd11*2, lmd20*2, lmd28*2, lmd20*2, lmd11*2, lmd20*2, lmd28*2, lmd20*2
0023fd 1000
0023fe 3000
0023ff 7020
002400 5040      	.db 0x00,    0x10,    0x00,    0x30,    0x20,    0x70,    0x40,    0x50
                 
                 
                 	;--- H8 ---
                 
                 	;    thr roll pitch yaw offs flags unused
                 ;	.db  100, 71 , 71 , 100, 0  , 3  , 0  , 0	;m1
                 ;	.db  100, 71 , 24 ,-100, 0  , 3  , 0  , 0	;m2
                 ;	.db  100, 71 ,-24 , 100, 0  , 3  , 0  , 0	;m3
                 ;	.db  100, 71 ,-71 ,-100, 0  , 3  , 0  , 0	;m4
                 ;	.db  100,-71 ,-71 , 100, 0  , 3  , 0  , 0	;m5
                 ;	.db  100,-71 ,-24 ,-100, 0  , 3  , 0  , 0	;m6
                 ;	.dw  100,-71 , 24 , 100, 0  , 3  , 0  , 0	;m7
                 ;	.db  100,-71 , 71 ,-100, 0  , 3  , 0  , 0	;m8
                 
                 	;     M1       M2       M3       M4       M5       M6       M7       M8
002401 4640
002402 4634
002403 4634
002404 4640
002405 4640
002406 4634
002407 4634
002408 4640      	.dw lmd20*2, lmd17*2, lmd17*2, lmd20*2, lmd20*2, lmd17*2, lmd17*2, lmd20*2
002409 1000
00240a 3020
00240b 7060
00240c 5040      	.db 0x00,    0x10,    0x20,    0x30,    0x60,    0x70,    0x40,    0x50
                 
                 
                 	;--- V8 ---
                 
                 	;    thr roll pitch yaw offs flags unused
                 ;	.db  100, 100, 71 , 100, 0  , 3  , 0  , 0	;m1
                 ;	.db  100, 81 , 24 ,-100, 0  , 3  , 0  , 0	;m2
                 ;	.db  100, 61 ,-24 , 100, 0  , 3  , 0  , 0	;m3
                 ;	.db  100, 42 ,-71 ,-100, 0  , 3  , 0  , 0	;m4
                 ;	.db  100,-42 ,-71 , 100, 0  , 3  , 0  , 0	;m5
                 ;	.db  100,-61 ,-24 ,-100, 0  , 3  , 0  , 0	;m6
                 ;	.dw  100,-81 , 24 , 100, 0  , 3  , 0  , 0	;m7
                 ;	.db  100,-100, 71 ,-100, 0  , 3  , 0  , 0	;m8
                 
                 	;     M1       M2       M3       M4       M5       M6       M7       M8
00240d 466a
00240e 4646
00240f 4628
002410 461c
002411 461c
002412 4628
002413 4646
002414 466a      	.dw lmd29*2, lmd21*2, lmd15*2, lmd13*2, lmd13*2, lmd15*2, lmd21*2, lmd29*2
002415 1000
002416 3020
002417 7060
002418 5040      	.db 0x00,    0x10,    0x20,    0x30,    0x60,    0x70,    0x40,    0x50
                 
                 
                 	;--- X8 x mode ---
                 
                 	;    thr roll pitch yaw offs flags unused
                 ;	.db  100,-71 , 71 , 100, 0  , 3  , 0  , 0	;m1
                 ;	.db  100,-71 , 71 ,-100, 0  , 3  , 0  , 0	;m2
                 ;	.db  100, 71 , 71 , 100, 0  , 3  , 0  , 0	;m3
                 ;	.db  100, 71 , 71 ,-100, 0  , 3  , 0  , 0	;m4
                 ;	.db  100, 71 ,-71 , 100, 0  , 3  , 0  , 0	;m5
                 ;	.db  100, 71 ,-71 ,-100, 0  , 3  , 0  , 0	;m6
                 ;	.dw  100,-71 ,-71 , 100, 0  , 3  , 0  , 0	;m7
                 ;	.db  100,-71 ,-71 ,-100, 0  , 3  , 0  , 0	;m8
                 
                 	;     M1       M2       M3       M4       M5       M6       M7       M8
002419 4640
00241a 4640
00241b 4640
00241c 4640
00241d 4640
00241e 4640
00241f 4640
002420 4640      	.dw lmd20*2, lmd20*2, lmd20*2, lmd20*2, lmd20*2, lmd20*2, lmd20*2, lmd20*2
002421 5040
002422 1000
002423 3020
002424 7060      	.db 0x40,    0x50,    0x00,    0x10,    0x20,    0x30,    0x60,    0x70
                 
                 
                 	;-- X8 + mode ---
                 
                 	;    thr roll pitch yaw offs flags unused
                 ;	.db  100, 0  , 100, 100, 0  , 3  , 0  , 0	;m1
                 ;	.db  100, 0  , 100,-100, 0  , 3  , 0  , 0	;m2
                 ;	.db  100, 100, 0  , 100, 0  , 3  , 0  , 0	;m3
                 ;	.db  100, 100, 0  ,-100, 0  , 3  , 0  , 0	;m4
                 ;	.db  100, 0  ,-100, 100, 0  , 3  , 0  , 0	;m5
                 ;	.db  100, 0  ,-100,-100, 0  , 3  , 0  , 0	;m6
                 ;	.dw  100,-100, 0  , 100, 0  , 3  , 0  , 0	;m7
                 ;	.db  100,-100, 0  ,-100, 0  , 3  , 0  , 0	;m8
                 
                 	;     M1       M2       M3       M4       M5       M6       M7       M8
002425 4610
002426 4610
002427 4664
002428 4664
002429 4610
00242a 4610
00242b 4664
00242c 4664      	.dw lmd11*2, lmd11*2, lmd28*2, lmd28*2, lmd11*2, lmd11*2, lmd28*2, lmd28*2
00242d 1000
00242e 1000
00242f 3020
002430 5040      	.db 0x00,    0x10,    0x00,    0x10,    0x20,    0x30,    0x40,    0x50
                 
                 
                 	;--- Unused ---
                 /*
                 	;    thr roll pitch yaw offs flags unused
                 	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m1
                 	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m2
                 	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m3
                 	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m4
                 	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m5
                 	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m6
                 	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m7
                 	.db  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0	;m8
                 
                 */
                 
                 
                 .include "throttlecal.asm"
                 
                 
                 
                 
                 EscThrottleCalibration:
                 
002431 ef0f
002432 9300 0796 	rvsetflagtrue Mode		;true = 2ms output, false = 1.02ms output
                 
002434 2700      	clr t
002435 9300 07a0 	sts flagMutePwm, t
                 
002437 940e 4d81 esc1:	call LcdClear6x8
                 
002439 e103
00243a 9300 073f 	lrv X1, 19			;print "ESC CALIBRATION"
00243c e5ea
00243d e4fa      	ldz esc10*2
00243e 940e 4c2e 	call PrintString
                 
002440 e000
002441 9300 073f 	lrv X1, 0			;print instructions
002443 e104
002444 9300 0740 	lrv Y1, 20
002446 9100 0796
002448 2300
002449 f092      	rvbrflagtrue Mode, esc6
                 
00244a e002      	ldi t, 2			;step 2
00244b ebe4
00244c e4fa      	ldz esc26*2
00244d 940e 4c18 	call PrintStringArray
                 
00244f e000
002450 9300 073f 	lrv X1, 0			;print footer (i.e. 'EXIT')
002452 e309
002453 9300 0740 	lrv Y1, 57
002455 e6ea
002456 e4fa      	ldz esc13*2
002457 940e 4c2e 	call PrintString
                 
002459 940e 4d2c 	call LcdUpdate
00245b c02e      	rjmp esc2
                 
00245c e002      esc6:	ldi t, 2			;step 1
00245d ebe0
00245e e4fa      	ldz esc25*2
00245f 940e 4c18 	call PrintStringArray
                 
002461 940e 4d2c 	call LcdUpdate
                 
002463 e000
002464 9300 0768 	lrv OutputRateBitmask, 0x00	;low rate on all channels
002466 e000
002467 9300 0769 	lrv OutputTypeBitmask, 0x00	;servo type on all channels
002469 e001
00246a 9300 076b 	lrv OutputRateDividerCounter, 1
00246c e008
00246d 9300 076a 	lrv OutputRateDivider, 8	;slow rate divider. f = 400 / OutputRateDivider
00246f ef0f
002470 9300 0770 	rvsetflagtrue flagArmed
002472 e000
002473 9300 067b
002475 e001
002476 9300 067c
002478 e000
002479 9300 067d 	b16ldi ServoFilter, 1
                 
00247b 9a2b      	LedOn
                 
                 	;       76543210		;clear pending OCR1A and B interrupt
00247c e006      	ldi t,0b00000110
00247d bb06      	store tifr1, t
                 
00247e e103
00247f 9300 0540
002481 e808
002482 9300 0541
002484 e000
002485 9300 0542 	b16ldi Temp, 5000.0		;start with full throttle
002487 2700
002488 9300 0773 	rvsetflagfalse flagThrottleZero
                 
00248a 940e 3ed5 esc2:	call PwmStart
00248c d039      	rcall SetAllOutputValues
00248d 940e 3f3b 	call PwmEnd
                 
00248f b103      	load t, pinb			;read buttons. Cannot use 'GetButtons' here because of delay
002490 9500      	com t
002491 9502      	swap t
002492 700f      	andi t, 0x0F
                 
002493 91a0 0796 	lds xl, Mode			;check output mode
002495 23aa      	tst xl
002496 f061      	breq esc3
                 
002497 2300      	tst t				;button released?
002498 f0e1      	breq esc5
                 
002499 e103
00249a 9300 0540
00249c e808
00249d 9300 0541
00249f e000
0024a0 9300 0542 	b16ldi Temp, 5000.0		;no, keep full throttle
0024a2 cfe7      	rjmp esc2
                 
0024a3 e0a8      esc3:	ldi xl, 0x08
0024a4 91b0 0791 	lds xh, BtnReversed
0024a6 23bb      	tst xh
0024a7 f009      	breq esc7
                 
0024a8 e0a1      	ldi xl, 0x01			;swapping button order (for unoriginal KK2 mini)
                 
0024a9 170a      esc7:	cp t, xl			;EXIT?
0024aa f0b9      	breq esc4
                 
0024ab e000
0024ac 9300 0540
0024ae e604
0024af 9300 0541
0024b1 e000
0024b2 9300 0542 	b16ldi Temp, 100.0		;no, set minimum throttle level
0024b4 cfd5      	rjmp esc2
                 
0024b5 e000
0024b6 9300 0540
0024b8 e604
0024b9 9300 0541
0024bb e000
0024bc 9300 0542 esc5:	b16ldi Temp, 100.0		;mode is changing, set minimum throttle level
0024be 2700
0024bf 9300 0796 	rvsetflagfalse Mode
0024c1 cf75      	rjmp esc1
                 
0024c2 982b      esc4:	LedOff				;done
0024c3 940e 1dd3 	call Beep
0024c5 9508      	ret
                 
                 
                 
                 	;--- Set all output values to the same value ---
                 
                 SetAllOutputValues:
                 
0024c6 9100 0540
0024c8 9300 060f
0024ca 9100 0541
0024cc 9300 0610
0024ce 9100 0542
0024d0 9300 0611 	b16mov Out1, Temp
0024d2 9100 0540
0024d4 9300 0612
0024d6 9100 0541
0024d8 9300 0613
0024da 9100 0542
0024dc 9300 0614 	b16mov Out2, Temp
0024de 9100 0540
0024e0 9300 0615
0024e2 9100 0541
0024e4 9300 0616
0024e6 9100 0542
0024e8 9300 0617 	b16mov Out3, Temp
0024ea 9100 0540
0024ec 9300 0618
0024ee 9100 0541
0024f0 9300 0619
0024f2 9100 0542
0024f4 9300 061a 	b16mov Out4, Temp
0024f6 9100 0540
0024f8 9300 061b
0024fa 9100 0541
0024fc 9300 061c
0024fe 9100 0542
002500 9300 061d 	b16mov Out5, Temp
002502 9100 0540
002504 9300 061e
002506 9100 0541
002508 9300 061f
00250a 9100 0542
00250c 9300 0620 	b16mov Out6, Temp
00250e 9100 0540
002510 9300 0621
002512 9100 0541
002514 9300 0622
002516 9100 0542
002518 9300 0623 	b16mov Out7, Temp
00251a 9100 0540
00251c 9300 0624
00251e 9100 0541
002520 9300 0625
002522 9100 0542
002524 9300 0626 	b16mov Out8, Temp
002526 9508      	ret
                 
                 
                 
                 	;--- Disable ESC calibration ---
                 
                 DisableEscCalibration:
                 
002527 27aa      	clr xl
002528 e7e4
002529 e0f0      	ldz eeEscCalibration
00252a 940e 4ef7 	call StoreEeVariable8		;save in profile #1 only
00252c 9508      	ret
                 
                 
                 
                 
                 
00252d 5345
00252e 2043
00252f 4143
002530 494c
002531 5242
002532 5441
002533 4f49
002534 004e      esc10:	.db "ESC CALIBRATION", 0
002535 5845
002536 5449
002537 0000      esc13:	.db "EXIT", 0, 0
                 
002538 6552
002539 656c
00253a 7361
00253b 2065
00253c 7562
00253d 7474
00253e 6e6f
00253f 6120
002540 2074
002541 6874
002542 0065      esc20:	.db "Release button at the", 0
002543 5345
002544 2043
002545 6f63
002546 666e
002547 7269
002548 616d
002549 6974
00254a 6e6f
00254b 6220
00254c 6565
00254d 0070      esc21:	.db "ESC confirmation beep", 0
00254e 6157
00254f 7469
002550 6620
002551 726f
002552 7420
002553 6568
002554 6620
002555 6e69
002556 6c61
002557 0000      esc22:	.db "Wait for the final", 0, 0
                 
002558 4a70
002559 4a86      esc25:	.dw esc20*2, esc21*2
00255a 4a9c
00255b 4a86      esc26:	.dw esc22*2, esc21*2
                 
                 .include "eeinit.asm"
                 
                 .def	Counter = r17
                 
                 
                 
                 	;--- Initialize EEPROM if the signature is bad ---
                 
                 EeInit:
                 
00255c e0e0
00255d e0f0      	ldz 0				;check EEPROM signature for user profile #1
00255e d030      	rcall CheckEeSignature
00255f 93a0 074c 	sts Init, xl
002561 23aa      	tst xl
002562 f0a9      	breq eei1
                 
002563 2700      	clr t				;initialize user profile #1
002564 9300 0803 	sts UserProfile, t
002566 d03c      	rcall InitUserProfile
                 
002567 2700      	clr t				;not accepted yet
002568 e7e2
002569 e0f0      	ldz eeUserAccepted
00256a 940e 4f1f 	call WriteEeprom
                 
00256c 940e 2527 	call DisableEscCalibration	;initialize variables that are used in profile #1 only
00256e 940e 01dc 	call ResetBatteryVoltageOffset
002570 940e 15b0 	call ResetErrorLogging
                 
002572 940e 4ac1 	call setup_mpu6050
002574 d129      	rcall ShowDisclaimer
002575 940e 5ae6 	call InitialSetup		;display initial setup menu
002577 c010      	rjmp eei3
                 
002578 e7e2
002579 e0f0      eei1:	ldz eeUserAccepted		;show the disclaimer if not yet accepted
00257a 940e 4f15 	call ReadEeprom
00257c 2300
00257d f00a      	brflagtrue t, eei2
                 
00257e d11f      	rcall ShowDisclaimer
                 
00257f 91f0 0803 eei2:	lds zh, UserProfile		;check EEPROM signature for the current user profile (skipped for profile #1)
002581 23ff      	tst zh
002582 f029      	breq eei3
                 
002583 27ee      	clr zl
002584 d00a      	rcall CheckEeSignature
002585 23aa      	tst xl
002586 f009      	breq eei3
                 
002587 d01b      	rcall InitUserProfile		;initialize current user profile
                 
002588 e7e8
002589 e0f0      eei3:	ldz eeButtonsReversed		;normal or reversed buttons
00258a 940e 4f15 	call ReadEeprom
00258c 9300 0791 	sts BtnReversed, t
00258e 9508      	ret
                 
                 
                 
                 	;--- Check EEPROM signature (register ZH decides which user profile to check) ---
                 
                 CheckEeSignature:
                 
00258f 940e 4ef1 	call GetEeVariable8
002591 32a1      	cpi xl, 0x21
002592 f471      	brne ces1
                 
002593 940e 4ef1 	call GetEeVariable8
002595 30a5      	cpi xl, 0x05
002596 f451      	brne ces1
                 
002597 940e 4ef1 	call GetEeVariable8
002599 3aaa      	cpi xl, 0xAA
00259a f431      	brne ces1
                 
00259b 940e 4ef1 	call GetEeVariable8
00259d 30a4      	cpi xl, 0x04
00259e f411      	brne ces1
                 
00259f 27aa      	clr xl				;signature is OK
0025a0 9508      	ret
                 
0025a1 efaf      ces1:	ser xl				;bad signature
0025a2 9508      	ret
                 
                 
                 
                 	;--- Initialize the current user profile ---
                 
                 InitUserProfile:
                 
0025a3 e0e4
0025a4 e0f0      	ldz EeMixerTable		;mixer table
0025a5 e0a0
0025a6 e0b0      	ldx 0
0025a7 e410      	ldi Counter, 64
0025a8 940e 4ef5 iup3:	call StoreEePVariable8
0025aa 951a      	dec Counter
0025ab f7e1      	brne iup3
                 
0025ac e5ed
0025ad e0f0      	ldz EeSensorCalData		;sensor calibration data
0025ae e112      	ldi Counter, 18
0025af 940e 4ef5 iup4:	call StoreEePVariable8
0025b1 951a      	dec Counter
0025b2 f7e1      	brne iup4
                 
0025b3 e4a4
0025b4 e0b0      	ldx EeParameterTable		;parameter table
0025b5 e9c4
0025b6 e4dd      	ldy eei4*2
0025b7 e118      	ldi Counter, 24
0025b8 01fe      iup5:	movw z, y
0025b9 9104      	lpm t, z
0025ba 01fd      	movw z, x
0025bb 940e 4f1d 	call WriteEepromP
0025bd 9611      	adiw x, 1
0025be 9621      	adiw y, 1
0025bf 951a      	dec Counter
0025c0 f7b9      	brne iup5
                 
0025c1 e7ae
0025c2 e0b0      	ldx eeStickScaleRoll		;stick scaling
0025c3 eacc
0025c4 e4dd      	ldy eei7*2
0025c5 e01a      	ldi Counter, 10
0025c6 01fe      iup8:	movw z, y
0025c7 9104      	lpm t, z
0025c8 01fd      	movw z, x
0025c9 940e 4f1d 	call WriteEepromP
0025cb 9611      	adiw x, 1
0025cc 9621      	adiw y, 1
0025cd 951a      	dec Counter
0025ce f7b9      	brne iup8
                 
                 
0025cf e3ac
0025d0 e0b0      	ldx 60
0025d1 e8e8
0025d2 e0f0      	ldz eeSelflevelPgain
0025d3 940e 4ee6 	call StoreEePVariable16		;eeSelflevelPgain
0025d5 e1a4
0025d6 e0b0      	ldx 20
0025d7 940e 4ee6 	call StoreEePVariable16		;eeSelflevelPlimit
0025d9 e0a0
0025da e0b0      	ldx 0
0025db 940e 4ee6 	call StoreEePVariable16		;eeAccTrimRoll
0025dd 940e 4ee6 	call StoreEePVariable16		;eeAccTrimPitch
0025df e0aa
0025e0 e0b0      	ldx 10
0025e1 940e 4ee6 	call StoreEePVariable16		;eeSlMixRate
                 
                 
0025e3 940e 4ee6 	call StoreEePVariable16		;eeEscLowLimit (set to 10)
0025e5 e0a0
0025e6 e0b0      	ldx 0
0025e7 940e 4ee6 	call StoreEePVariable16		;eeStickDeadZone
0025e9 940e 4ee6 	call StoreEePVariable16		;eeBattAlarmVoltage
0025eb e3a2
0025ec e0b0      	ldx 50
0025ed 940e 4ee6 	call StoreEePVariable16		;eeServoFilter
0025ef e0a0
0025f0 e0b0      	ldx 0
0025f1 940e 4ee6 	call StoreEePVariable16		;UNUSED ****************************
                 
                 
0025f3 e0a1      	ldi xl, 1 
0025f4 940e 4ef5 	call StoreEePVariable8		;eeChannelRoll
0025f6 e0a2      	ldi xl, 2
0025f7 940e 4ef5 	call StoreEePVariable8		;eeChannelPitch
0025f9 e0a3      	ldi xl, 3
0025fa 940e 4ef5 	call StoreEePVariable8		;eeChannelThrottle
0025fc e0a4      	ldi xl, 4
0025fd 940e 4ef5 	call StoreEePVariable8		;eeChannelYaw
0025ff e0a5      	ldi xl, 5
002600 940e 4ef5 	call StoreEePVariable8		;eeChannelAux
002602 e0a6      	ldi xl, 6
002603 940e 4ef5 	call StoreEePVariable8		;eeChannelAux2
002605 e0a7      	ldi xl, 7
002606 940e 4ef5 	call StoreEePVariable8		;eeChannelAux3
002608 e0a8      	ldi xl, 8
002609 940e 4ef5 	call StoreEePVariable8		;eeChannelAux4
                 
                 
00260b e0a2      	ldi xl, 2
00260c 940e 4ef5 	call StoreEePVariable8		;eeSatChannelRoll
00260e e0a3      	ldi xl, 3
00260f 940e 4ef5 	call StoreEePVariable8		;eeSatChannelPitch
002611 e0a1      	ldi xl, 1 
002612 940e 4ef5 	call StoreEePVariable8		;eeSatChannelThrottle
002614 e0a4      	ldi xl, 4
002615 940e 4ef5 	call StoreEePVariable8		;eeSatChannelYaw
002617 e0a5      	ldi xl, 5
002618 940e 4ef5 	call StoreEePVariable8		;eeSatChannelAux
00261a e0a6      	ldi xl, 6
00261b 940e 4ef5 	call StoreEePVariable8		;eeSatChannelAux2
00261d e0a7      	ldi xl, 7
00261e 940e 4ef5 	call StoreEePVariable8		;eeSatChannelAux3
002620 e0a8      	ldi xl, 8
002621 940e 4ef5 	call StoreEePVariable8		;eeSatChannelAux4
                 
                 
002623 efaf      	ser xl
002624 940e 4ef5 	call StoreEePVariable8		;eeLinkRollPitch (set to YES)
002626 940e 4ef5 	call StoreEePVariable8		;eeAutoDisarm (set to YES)
002628 940e 4ef5 	call StoreEePVariable8		;eeButtonBeep (set to YES)
00262a 940e 4ef5 	call StoreEePVariable8		;eeArmingBeeps (set to YES)
00262c 940e 4ef5 	call StoreEePVariable8		;eeUnused2
                 
                 
00262e e0a0
00262f e0b0      	ldx 0
002630 940e 4ee6 	call StoreEePVariable16		;eeCamRollGain
002632 940e 4ee6 	call StoreEePVariable16		;eeCamRollOffset
002634 940e 4ee6 	call StoreEePVariable16		;eeCamPitchGain
002636 940e 4ee6 	call StoreEePVariable16		;eeCamPitchOffset
002638 940e 4ef5 	call StoreEePVariable8		;eeCamServoMixing (set to NONE)
00263a 940e 4ee6 	call StoreEePVariable16		;eeCamRollLockPos
00263c 940e 4ee6 	call StoreEePVariable16		;eeCamPitchLockPos
                 
                 
00263e 27aa      	setflagfalse xl
00263f 940e 4ef5 	call StoreEePVariable8		;eeSensorsCalibrated
002641 940e 4ef5 	call StoreEePVariable8		;eeMotorLayoutOk
                 
                 
002643 27aa      	clr xl
002644 940e 4ef5 	call StoreEePVariable8		;eeAuxPos1SS
002646 940e 4ef5 	call StoreEePVariable8		;eeAuxPos2SS
002648 940e 4ef5 	call StoreEePVariable8		;eeAuxPos3SS
00264a 940e 4ef5 	call StoreEePVariable8		;eeAuxPos4SS
00264c 940e 4ef5 	call StoreEePVariable8		;eeAuxPos5SS
00264e 940e 4ef5 	call StoreEePVariable8		;eeAuxPos1Function (set to Acro)
002650 e0a3      	ldi xl, 3
002651 940e 4ef5 	call StoreEePVariable8		;eeAuxPos2Function (set to Alarm)
002653 e0a1      	ldi xl, 1
002654 940e 4ef5 	call StoreEePVariable8		;eeAuxPos3Function (set to SL Mix)
002656 e0a3      	ldi xl, 3
002657 940e 4ef5 	call StoreEePVariable8		;eeAuxPos4Function (set to Alarm)
002659 e0a2      	ldi xl, 2
00265a 940e 4ef5 	call StoreEePVariable8		;eeAuxPos5Function (set to Normal SL)
                 
                 
00265c 27aa      	clr xl
00265d 940e 4ef5 	call StoreEePVariable8		;eeMpuFilter (set to 256 Hz)
00265f e0a8      	ldi xl, 0x08
002660 940e 4ef5 	call StoreEePVariable8		;eeMpuGyroCfg (set to 500 deg/s)
002662 940e 4ef5 	call StoreEePVariable8		;eeMpuAccCfg (set to 4 g)
                 
                 
002664 27aa      	clr xl
002665 940e 4ef5 	call StoreEePVariable8		;eeTuningRate (set to INVALID here, but it will still be read as 2, MEDIUM)
002667 940e 4ef5 	call StoreEePVariable8		;eeDG2Functions
                 
                 
002669 e0e0
00266a e0f0      	ldz 0				;EEPROM signature
00266b e2a1      	ldi xl, 0x21
00266c 940e 4ef5 	call StoreEePVariable8
00266e e0a5      	ldi xl, 0x05
00266f 940e 4ef5 	call StoreEePVariable8
002671 eaaa      	ldi xl, 0xAA
002672 940e 4ef5 	call StoreEePVariable8
002674 e0a4      	ldi xl, 0x04
002675 940e 4ef5 	call StoreEePVariable8
                 
                 
                 	;--- User profile #1 ---
                 
002677 9100 0803 	lds t, UserProfile		;skip this section for user profile 2 - 4
002679 2300      	tst t
00267a f4d1      	brne iup7
                 
00267b e7e3
00267c e0f0      	ldz eeUserProfile		;set user profile #1 to be used as default
00267d 940e 4f1f 	call WriteEeprom
                 
00267f 2700      	clr t				;set board orientation back to normal (0 degrees)
002680 e7e9
002681 e0f0      	ldz eeBoardOrientation
002682 940e 4f1f 	call WriteEeprom
                 
002684 940e 5719 	call SetDefaultLcdContrast
002686 940e 2723 	call ResetGimbalControllerMode
002688 940e 2729 	call ResetRxMode
                 
00268a 9100 074c 	lds t, Init			;display initial setup menu and enforce restart when called from the User Profile menu
00268c 2300      	tst t
00268d f421      	brne iup9
                 
00268e d00f      	rcall ShowDisclaimer
00268f 940e 5ae6 	call InitialSetup
002691 c085      	rjmp EnforceRestart
                 
002692 2700      iup9:	clr t
002693 9300 074c 	sts Init, t
                 
                 
                 iup7:	;--- Done ---
                 
002695 e015      	ldi Counter, 5
                 
002696 940e 1dd3 iup6:	call Beep
002698 e0c0      	ldi yl, 0
002699 940e 4ea1 	call wms
00269b 951a      	dec Counter
00269c f7c9      	brne iup6
                 
00269d 9508      	ret
                 
                 
                 
                 	;--- Disclaimer ---		Will also detect reversed buttons
                 
                 ShowDisclaimer:
                 
00269e 940e 4d8f 	call LcdClear12x16
                 
0026a0 e100
0026a1 9300 073f 	lrv X1, 16			;reminder
0026a3 ebe6
0026a4 e4fd      	ldz eew1*2
0026a5 940e 4b90 	call PrintHeader
                 
0026a7 e004      	ldi t, 4			;print disclaimer text
0026a8 e1e0
0026a9 e4fe      	ldz eew10*2
0026aa 940e 4c18 	call PrintStringArray
                 
                 	;footer
0026ac 940e 4bf3 	call PrintOkFooter
                 
0026ae 940e 4d2c 	call LcdUpdate
                 
0026b0 2700      	clr t				;reset button mode (normal button order)
0026b1 9300 0791 	sts BtnReversed, t
                 
0026b3 940e 4ed1 eew11:	call GetButtonsBlocking
0026b5 3001      	cpi t, 0x01			;OK?
0026b6 f411      	brne eew12
                 
0026b7 2700      	clr t				;normal button order
0026b8 c003      	rjmp eew14
                 
0026b9 3008      eew12:	cpi t, 0x08			;OK (reversed buttons)?
0026ba f7c1      	brne eew11
                 
0026bb ef0f      	ser t				;reversed
                 
0026bc 9300 0791 eew14:	sts BtnReversed, t
0026be e7e8
0026bf e0f0      	ldz eeButtonsReversed
0026c0 940e 4f1f 	call WriteEeprom
                 
0026c2 ef0f      eew13:	ser t				;set flag to indicate that the user has accepted the disclaimer
0026c3 e7e2
0026c4 e0f0      	ldz eeUserAccepted
0026c5 940e 4f1f 	call WriteEeprom
                 
0026c7 940e 4ecd 	call ReleaseButtons		;make sure buttons are released
0026c9 9508      	ret
                 
                 
                 
                 
0026ca 0032
0026cb 0064
0026cc 0019
0026cd 0014      eei4:	.dw 50, 100, 25, 20		;default PI gains and limits for aileron, elevator and rudder
0026ce 0032
0026cf 0064
0026d0 0019
0026d1 0014      	.dw 50, 100, 25, 20
0026d2 0032
0026d3 0014
0026d4 0032
0026d5 000a      	.dw 50, 20, 50, 10
                 
                 
0026d6 001e
0026d7 001e
0026d8 0032
0026d9 005a
0026da 0064      eei7:	.dw 30, 30, 50, 90, 100		;default stick scaling values
                 
                 
0026db 4552
0026dc 494d
0026dd 444e
0026de 5245
0026df 0000      eew1:	.db "REMINDER", 0, 0
0026e0 4f59
0026e1 2055
0026e2 5355
0026e3 2045
0026e4 4854
0026e5 5349
0026e6 4620
0026e7 5249
0026e8 574d
0026e9 5241
0026ea 0045      eew2:	.db "YOU USE THIS FIRMWARE", 0
0026eb 5441
0026ec 5920
0026ed 554f
0026ee 2052
0026ef 574f
0026f0 204e
0026f1 4952
0026f2 4b53
0026f3 0021      eew3:	.db "AT YOUR OWN RISK!", 0
0026f4 6552
0026f5 6461
0026f6 6120
0026f7 6c6c
0026f8 6920
0026f9 636e
0026fa 756c
0026fb 6564
0026fc 0064      eew4:	.db "Read all included", 0
0026fd 6f64
0026fe 7563
0026ff 656d
002700 746e
002701 2073
002702 6163
002703 6572
002704 7566
002705 6c6c
002706 2e79
002707 0000      eew5:	.db "documents carefully.", 0, 0
                 
002708 4dc0
002709 4dd6
00270a 4de8
00270b 4dfa      eew10:	.dw eew2*2, eew3*2, eew4*2, eew5*2
                 
                 
                 .undef Counter
                 
                 	;--- Enforce restart ---
                 
00270c 6552
00270d 7473
00270e 7261
00270f 2074
002710 7369
002711 7220
002712 7165
002713 6975
002714 6572
002715 2164
002716 0000      srm4:	.db "Restart is required!", 0, 0
                 EnforceRestart:
                 
002717 940e 4d81 	call LcdClear6x8		;restart is required
002719 e10c
00271a 9300 0740 	lrv Y1, 28
00271c e1e8
00271d e4fe      	ldz srm4*2
00271e 940e 4c2e 	call PrintString
002720 940e 4d2c 	call LcdUpdate
                 
002722 cfff      enf1:	rjmp enf1			;infinite loop
                 
                 	;--- Reset gimbal controller mode ---
                 
                 ResetGimbalControllerMode:
                 
002723 2700      	clr t
002724 e7e7
002725 e0f0      	ldz eeGimbalMode
002726 940e 4f1f 	call WriteEeprom		;save in profile #1 only
002728 9508      	ret
                 
                 	;--- Reset RX mode ---
                 
                 ResetRxMode:
                 
002729 e000      	ldi t, RxModeStandard		;set RX mode to 'Standard Receiver'
00272a 9300 074d 	sts RxMode, t
00272c e7e1
00272d e0f0      	ldz eeRxMode
00272e 940e 4f1f 	call WriteEeprom
002730 9508      	ret
                 .include "sensorcal.asm"
                 
                 CalibrateSensors:
                 
002731 940e 4d8f 	call LcdClear12x16
                 
                 	;header
002733 e20e
002734 9300 073f 	lrv X1, 46
002736 ebee
002737 e5f1      	ldz cel1*2
002738 940e 4b90 	call PrintHeader
                 
                 	;instructions
00273a e004      	ldi t, 4
00273b e1e8
00273c e5f2      	ldz cel10*2
00273d 940e 4c18 	call PrintStringArray
                 
                 	;footer
00273f 940e 4c01 	call PrintContinueFooter
                 
002741 940e 4d2c 	call LcdUpdate
                 
002743 940e 4ed8 	call WaitForOkButton		;CONTINUE?
                 
002745 d1ec      	rcall Countdown
                 
002746 940e 4d81 	call LcdClear6x8
                 
002748 e109
002749 9300 073f 	lrv X1, 25			;calibrating...
00274b e109
00274c 9300 0740 	lrv Y1, 25
00274e e2e0
00274f e5f2      	ldz cel19*2
002750 940e 4c2e 	call PrintString
                 
002752 940e 4d2c 	call LcdUpdate
                 
002754 e0c0      	ldi yl, 0
002755 940e 4ea1 	call wms
                 
002757 e1e0      	ldi zl, 16			;calibrate accerellometers, average of 16 readings
                 
002758 e000
002759 9300 0585
00275b 9300 0586
00275d 9300 0587 	b16clr AccXZero
00275f 9300 0588
002761 9300 0589
002763 9300 058a 	b16set AccYZero
002765 9300 058b
002767 9300 058c
002769 9300 058d 	b16set AccZZero
                 
00276b 940e 477d caa1:	call AdcRead
                 
00276d 9130 0585
00276f 9140 0586
002771 9150 0587
002773 9160 057c
002775 9170 057d
002777 9180 057e
002779 0f58
00277a 1f47
00277b 1f36
00277c 9330 0585
00277e 9340 0586
002780 9350 0587 	b16add AccXZero, AccXZero, AccX
002782 9130 0588
002784 9140 0589
002786 9150 058a
002788 9160 057f
00278a 9170 0580
00278c 9180 0581
00278e 0f58
00278f 1f47
002790 1f36
002791 9330 0588
002793 9340 0589
002795 9350 058a 	b16add AccYZero, AccYZero, AccY
002797 9130 058b
002799 9140 058c
00279b 9150 058d
00279d 9160 0582
00279f 9170 0583
0027a1 9180 0584
0027a3 0f58
0027a4 1f47
0027a5 1f36
0027a6 9330 058b
0027a8 9340 058c
0027aa 9350 058d 	b16add AccZZero, AccZZero, AccZ
                 
0027ac e6c4      	ldi yl, 100
0027ad 940e 4ea1 	call wms
                 
0027af 95ea      	dec zl
0027b0 f009      	breq caa2
                 
0027b1 cfb9      	rjmp caa1
                 
0027b2 9160 0585
0027b4 9170 0586
0027b6 9180 0587
0027b8 e004
0027b9 940e 4f2b
0027bb 9360 0585
0027bd 9370 0586
0027bf 9380 0587 caa2:	b16fdiv AccXZero, 4
0027c1 9160 0588
0027c3 9170 0589
0027c5 9180 058a
0027c7 e004
0027c8 940e 4f2b
0027ca 9360 0588
0027cc 9370 0589
0027ce 9380 058a 	b16fdiv AccYZero, 4
0027d0 9160 058b
0027d2 9170 058c
0027d4 9180 058d
0027d6 e004
0027d7 940e 4f2b
0027d9 9360 058b
0027db 9370 058c
0027dd 9380 058d 	b16fdiv AccZZero, 4
                 
0027df e2d8      	ldi yh, 40
                 
0027e0 e0c0      cel22:	ldi yl, 0
0027e1 940e 4ea1 	call wms
0027e3 95da      	dec yh
0027e4 f7d9      	brne cel22
                 
0027e5 ef0f
0027e6 9300 0792 	rvsetflagtrue flagSensorsOk
                 
0027e8 940e 4d81 	call LcdClear6x8		;show and check result
0027ea e00a
0027eb 9300 0740 	lrv Y1, 10
0027ed e003      	ldi t, 3
0027ee e5ee
0027ef e5f2      	ldz accxyz*2
0027f0 940e 4c18 	call PrintStringArray
                 
0027f2 94e8      	clt				;clear the T flag to indicate that sensor calibration is running
                 
0027f3 e00a
0027f4 9300 0740 	lrv Y1, 10			;acc X
0027f6 91b0 0585
0027f8 91a0 0586
0027fa 91d0 0587 	b16load AccXZero
0027fc 940e 4724 	call PrintAccValue
                 
0027fe 91b0 0588
002800 91a0 0589
002802 91d0 058a 	b16load AccYZero		;acc Y
002804 940e 4724 	call PrintAccValue
                 
002806 91b0 058b
002808 91a0 058c
00280a 91d0 058d 	b16load AccZZero		;acc Z
00280c 940e 4724 	call PrintAccValue
                 
                 	;footer
00280e 940e 4c01 	call PrintContinueFooter
                 
002810 940e 4d2c 	call LcdUpdate
                 
002812 9100 0792
002814 2300
002815 f50a      	rvbrflagfalse flagSensorsOk, cel35
                 
002816 e5ed
002817 e0f0      	ldz EeSensorCalData		;save calibration data if passed
002818 91b0 0585
00281a 91a0 0586
00281c 91d0 0587 	b16load AccXZero
00281e 940e 4f07 	call StoreEePVariable168
002820 91b0 0588
002822 91a0 0589
002824 91d0 058a 	b16load AccYZero
002826 940e 4f07 	call StoreEePVariable168
002828 91b0 058b
00282a 91a0 058c
00282c 91d0 058d 	b16load AccZZero
00282e 940e 4f07 	call StoreEePVariable168
                 
002830 ebee
002831 e0f0      	ldz eeSensorsCalibrated		;OK
002832 ef0f
002833 2f00      	setflagtrue t
002834 940e 4f1d 	call WriteEepromP
002836 c00a      	rjmp cel23
                 
002837 ebee
002838 e0f0      cel35:	ldz eeSensorsCalibrated		;Failed
002839 2700      	setflagfalse t
00283a 940e 4f1d 	call WriteEepromP
00283c 9100 079d
00283e 6001
00283f 9300 079d 	setstatusbit AccNotCalibrated
                 
002841 940e 4ed8 cel23:	call WaitForOkButton		;CONTINUE?
                 
002843 940e 4d81 	call LcdClear6x8		;print result (failed or succeeded)
002845 e109
002846 9300 0740 	lrv Y1, 25
                 
002848 9100 0792 	lds t, flagSensorsOk
00284a 7001      	andi t, 0x01
00284b e5ea
00284c e5f2      	ldz calres*2
00284d 940e 4c0f 	call PrintFromStringArray
                 
                 cel30:	;footer
00284f 940e 4c01 	call PrintContinueFooter
                 
002851 940e 4d2c 	call LcdUpdate
                 
002853 940e 4ed8 	call WaitForOkButton		;CONTINUE?
002855 9508      	ret
                 
                 
                 
                 GyroCal:
                 
002856 e1e0      	ldi zl, 16					;calibrate gyros, average of 16 readings
002857 e000
002858 9300 056d
00285a 9300 056e
00285c 9300 056f 	b16clr GyroRollZero
00285e 9300 0570
002860 9300 0571
002862 9300 0572 	b16set GyroPitchZero
002864 9300 0573
002866 9300 0574
002868 9300 0575 	b16set GyroYawZero
                 
00286a 940e 477d cna1:	call AdcRead
                 
00286c 9130 056d
00286e 9140 056e
002870 9150 056f
002872 9160 0564
002874 9170 0565
002876 9180 0566
002878 0f58
002879 1f47
00287a 1f36
00287b 9330 056d
00287d 9340 056e
00287f 9350 056f 	b16add GyroRollZero, GyroRollZero, GyroRoll
002881 9130 0570
002883 9140 0571
002885 9150 0572
002887 9160 0567
002889 9170 0568
00288b 9180 0569
00288d 0f58
00288e 1f47
00288f 1f36
002890 9330 0570
002892 9340 0571
002894 9350 0572 	b16add GyroPitchZero, GyroPitchZero, GyroPitch
002896 9130 0573
002898 9140 0574
00289a 9150 0575
00289c 9160 056a
00289e 9170 056b
0028a0 9180 056c
0028a2 0f58
0028a3 1f47
0028a4 1f36
0028a5 9330 0573
0028a7 9340 0574
0028a9 9350 0575 	b16add GyroYawZero, GyroYawZero, GyroYaw
                 
0028ab e6c4      	ldi yl, 100
0028ac 940e 4ea1 	call wms
                 
0028ae 95ea      	dec zl
0028af f009      	breq cna2
                 
0028b0 cfb9      	rjmp cna1
                 
0028b1 9160 056d
0028b3 9170 056e
0028b5 9180 056f
0028b7 e004
0028b8 940e 4f2b
0028ba 9360 056d
0028bc 9370 056e
0028be 9380 056f cna2:	b16fdiv GyroRollZero, 4
0028c0 9160 0570
0028c2 9170 0571
0028c4 9180 0572
0028c6 e004
0028c7 940e 4f2b
0028c9 9360 0570
0028cb 9370 0571
0028cd 9380 0572 	b16fdiv GyroPitchZero, 4
0028cf 9160 0573
0028d1 9170 0574
0028d3 9180 0575
0028d5 e004
0028d6 940e 4f2b
0028d8 9360 0573
0028da 9370 0574
0028dc 9380 0575 	b16fdiv GyroYawZero, 4
0028de 9508      	ret
                 
                 
                 
0028df 4341
0028e0 0043      cel1:	.db "ACC", 0
0028e1 6c50
0028e2 6361
0028e3 2065
0028e4 6874
0028e5 2065
0028e6 6961
0028e7 6372
0028e8 6172
0028e9 7466
0028ea 6f20
0028eb 006e      cel2:	.db "Place the aircraft on", 0
0028ec 2061
0028ed 656c
0028ee 6576
0028ef 206c
0028f0 7573
0028f1 6672
0028f2 6361
0028f3 2065
0028f4 6f6e
0028f5 2e77
0028f6 0000      cel3:   .db "a level surface now.",0, 0
0028f7 6143
0028f8 696c
0028f9 7262
0028fa 7461
0028fb 6f69
0028fc 206e
0028fd 6562
0028fe 6967
0028ff 736e
002900 0000      cel6:	.db "Calibration begins", 0, 0
002901 6661
002902 6574
002903 2072
002904 6874
002905 2065
002906 6f63
002907 6e75
002908 6474
002909 776f
00290a 2e6e
00290b 0000      cel7:	.db "after the countdown.", 0, 0
                 
00290c 51c2
00290d 51d8
00290e 51ee
00290f 5202      cel10:	.dw cel2*2, cel3*2, cel6*2, cel7*2
                 
002910 6143
002911 696c
002912 7262
002913 7461
002914 6e69
002915 2e67
002916 2e2e
002917 0000      cel19:	.db "Calibrating...", 0, 0
002918 6143
002919 696c
00291a 7262
00291b 7461
00291c 6f69
00291d 206e
00291e 6166
00291f 6c69
002920 6465
002921 002e      cel24:	.db "Calibration failed.", 0
002922 6143
002923 696c
002924 7262
002925 7461
002926 6f69
002927 206e
002928 7573
002929 6363
00292a 6565
00292b 6564
00292c 0064      cel31:	.db "Calibration succeeded", 0
                 
00292d 5230
00292e 5244      calres:	.dw cel24*2, cel31*2				;failed, succeeded
                 
00292f 8ebe
002930 8ec6
002931 8ece      accxyz:	.dw sen5*2, sen6*2, sen7*2			;ACC X, Y and Z
                 
                 
                 
                 	;--- 5 second countdown ---
                 
                 Countdown:
                 
002932 e3a5      	ldi xl, '5'
                 
002933 940e 4d8f cdn11:	call LcdClear12x16
                 
                 	;countdown
002935 e30a
002936 9300 073f 	lrv X1, 58
002938 e106
002939 9300 0740 	lrv Y1, 22
00293b 2f0a      	mov t, xl
00293c 940e 4c35 	call PrintChar
                 
00293e 940e 4d2c 	call LcdUpdate
                 
                 	;one second delay
002940 e6d4      	ldi yh, 100
                 
002941 e6c4      cdn12:	ldi yl, 100
002942 940e 4ea1 	call wms
002944 95da      	dec yh
002945 f7d9      	brne cdn12
                 
                 	;next character
002946 95aa      	dec xl
002947 32af      	cpi xl, '/'
002948 f751      	brne cdn11
                 
002949 9508      	ret
                 
                 
                 .include "flightdisplay.asm"
                 
                 
                 UpdateFlightDisplay:
                 
00294a ef0f
00294b 9300 07a0 	rvsetflagtrue flagMutePwm
                 
00294d 940e 4d8f 	call LcdClear12x16
                 
                 
                 	;--- Logged error ---
                 
00294f 940e 14e2 	call ErrorLog				;will show the error log if any error has been logged
002951 f408      	brcc udp1
                 
002952 c0e3      	rjmp udp21				;the error log is displayed so we'll just skip to the end
                 
                 
                 udp1:	;--- Print armed status ---
                 
002953 9100 0770
002955 2300
002956 f4a2      	rvbrflagfalse flagArmed, udp3
                 
002957 e202
002958 9300 073f 	lrv X1, 34				;Armed
00295a e106
00295b 9300 0740 	lrv Y1, 22
00295d ede2
00295e e5f5      	ldz armed*2
00295f 940e 4b90 	call PrintHeader
                 
002961 e0ec
002962 e5f6      	ldz udp7*2				;banner
002963 940e 4b0f 	call PrintSelector
                 
002965 e20d
002966 9300 0740 	lrv Y1, 45
002968 940e 4b9f 	call PrintMotto
00296a c0cb      	rjmp udp21
                 
00296b e206
00296c 9300 073f udp3:	lrv X1, 38				;Safe
00296e ecec
00296f e5f5      	ldz safe*2
002970 940e 4c2e 	call PrintString
                 
                 
                 	;--- Print user profile selection ---
                 
002972 e606
002973 9300 073f 	lrv X1, 102
002975 e500      	ldi t, 'P'
002976 940e 4c35 	call PrintChar
002978 e301      	ldi t, '1'
002979 91a0 0803 	lds xl, UserProfile
00297b 0f0a      	add t, xl
00297c 940e 4c35 	call PrintChar
00297e e001
00297f 9300 0744 	lrv FontSelector, f6x8
002981 e000
002982 9300 073f 	lrv X1, 0
                 
                 
                 	;--- Gimbal controller mode ---
                 
002984 9100 077a
002986 2300
002987 f4da      	rvbrflagfalse flagGimbalMode, udp4
                 
002988 e101
002989 9300 0740 	lrv Y1, 17				;stand-alone gimbal controller mode
00298b e002      	ldi t, 2
00298c efee
00298d e5f5      	ldz gblmode*2
00298e 940e 4c18 	call PrintStringArray
                 
002990 e001
002991 9300 073f 	lrv X1, 1				;camera icon
002993 e000
002994 9300 0740 	lrv Y1, 0
002996 e004
002997 9300 0744 	lrv FontSelector, s16x16
002999 e004      	ldi t, 4
00299a 940e 4c35 	call PrintChar
00299c e001
00299d 9300 0744 	lrv FontSelector, f6x8
                 
00299f e20c
0029a0 9300 0740 	lrv Y1, 44				;LVA setting and footer
0029a2 c075      	rjmp udp20
                 
                 
                 udp4:	;--- Flight timer ---
                 
0029a3 e001
0029a4 9300 0740 	lrv Y1, 1
0029a6 91a0 07a5 	lds xl, Timer1min
0029a8 91c0 07a4 	lds yl, Timer1sec
0029aa d106      	rcall PrintTimer
                 
                 
                 	;--- Print status ---
                 
0029ab e000
0029ac 9300 073f 	lrv X1, 0
0029ae e101
0029af 9300 0740 	lrv Y1, 17
0029b1 edea
0029b2 e9fb      	ldz ok*2				;default string is "OK"
0029b3 d1fa      	rcall LoadStatusString
0029b4 940e 4c2e 	call PrintString
                 
0029b6 f0d6      	brts udp25				;skip ahead if status bits are set (T flag is set in LoadStatusString)
                 
0029b7 9100 07a6 	lds t, TuningMode			;display the selected tuning mode
0029b9 2300      	tst t
0029ba f109      	breq udp51
                 
0029bb e0e2
0029bc e5f6      	ldz udp6*2				;Tuning
0029bd 940e 4c2e 	call PrintString
0029bf 9100 07a6 	lds t, TuningMode
0029c1 3001      	cpi t, 1				;print "Ail+Ele" if tuning aileron when linked with elevator
0029c2 f449      	brne udp24
                 
0029c3 91a0 076c 	lds xl, flagRollPitchLink
0029c5 23aa      	tst xl
0029c6 f029      	breq udp24
                 
0029c7 e4e0
0029c8 e9fc      	ldz ailele*2
0029c9 940e 4c2e 	call PrintString
0029cb c010      	rjmp udp51
                 
0029cc efe8
0029cd e9fc      udp24:	ldz tunmode*2
0029ce 940e 4c0f 	call PrintFromStringArray
0029d0 c00b      	rjmp udp51
                 
0029d1 9100 079e udp25:	lds t, StatusCounter			;flashing status text banner
0029d3 9503      	inc t
0029d4 9300 079e 	sts StatusCounter, t
0029d6 7001      	andi t, 0x01
0029d7 f021      	breq udp51
                 
0029d8 e1e0
0029d9 e5f6      	ldz udp8*2				;highlight the status text
0029da 940e 4b0f 	call PrintSelector
                 
                 
                 udp51:	;--- Print flight mode and stick scaling offset ---
                 
0029dc e000
0029dd 9300 073f 	lrv X1, 0				;flight mode
0029df e10b
0029e0 9300 0740 	lrv Y1, 27
0029e2 e1e4
0029e3 e5f6      	ldz flmode*2
0029e4 d0e0      	rcall PrintFlightMode
                 
0029e5 e504
0029e6 9300 073f 	lrv X1, 84				;stick scaling offset selected from AUX switch position
0029e8 9100 078f 	lds t, AuxStickScaling
0029ea 2300      	tst t					;skip printing when zero
0029eb f021      	breq udp54
                 
0029ec e2e0
0029ed e9fd      	ldz auxss*2
0029ee 940e 4c0f 	call PrintFromStringArray
                 
                 
                 udp54:	;--- Print battery voltages ---
                 
0029f0 e000
0029f1 9300 073f 	lrv X1, 0				;live battery voltage
0029f3 940e 4b89 	call LineFeed
0029f5 e1ec
0029f6 e5f6      	ldz batt*2
0029f7 940e 4c2e 	call PrintString
0029f9 9100 058e
0029fb 9300 0546
0029fd 9100 058f
0029ff 9300 0547
002a01 9100 0590
002a03 9300 0548 	b16mov Temper, BatteryVoltage
002a05 d036      	rcall PrintVoltage
                 
002a06 e504
002a07 9300 073f 	lrv X1, 84				;lowest battery voltage logged
002a09 9100 0597
002a0b 9300 0546
002a0d 9100 0598
002a0f 9300 0547
002a11 9100 0599
002a13 9300 0548 	b16mov Temper, BatteryVoltageLogged
002a15 d026      	rcall PrintVoltage
002a16 940e 4b89 	call LineFeed
                 
002a18 e000
002a19 9300 073f udp20:	lrv X1, 0				;LVA setting
002a1b e2e4
002a1c e5f6      	ldz lvalbl*2
002a1d 940e 4c2e 	call PrintString
002a1f 9100 0663
002a21 9300 0546
002a23 9100 0664
002a25 9300 0547
002a27 9100 0665
002a29 9300 0548 	b16mov Temper, BattAlarmVoltage
002a2b d010      	rcall PrintVoltage
                 
                 
                 	;--- Print footer ---
                 
002a2c e204
002a2d 9300 073f 	lrv X1, 36				;footer
002a2f e309
002a30 9300 0740 	lrv Y1, 57
002a32 ebec
002a33 e5f5      	ldz upd1*2
002a34 940e 4c2e 	call PrintString
                 
002a36 940e 4d2c udp21:	call LcdUpdate
                 
002a38 2700
002a39 9300 07a0 	rvsetflagfalse flagMutePwm
002a3b 9508      	ret
                 
                 
                 
                 	;--- Print voltage value ---
                 
                 PrintVoltage:
                 
002a3c 9130 0546
002a3e 9140 0547
002a40 9150 0548
002a42 9160 0591
002a44 9170 0592
002a46 9180 0593
002a48 1758
002a49 0747
002a4a 0736      	b16cmp Temper, BatteryVoltageOffset	;zero input voltage?
002a4b f439      	brne pvv1
                 
002a4c e000
002a4d 9300 0546
002a4f 9300 0547
002a51 9300 0548 	b16clr Temper				;yes
                 
002a53 e000
002a54 9300 0540
002a56 e002
002a57 9300 0541
002a59 e800
002a5a 9300 0542 pvv1:	b16ldi Temp, 2.5			;calculate value
002a5c 9110 0546
002a5e 9120 0547
002a60 9130 0548
002a62 9140 0540
002a64 9150 0541
002a66 9160 0542
002a68 940e 4f3a
002a6a 9370 0540
002a6c 9380 0541
002a6e 9220 0542 	b16mul Temp, Temper, Temp
002a70 940e 2f39 	call TempDiv100
                 
002a72 91b0 0540
002a74 91a0 0541
002a76 91d0 0542 	b16load Temp				;print the integer part
002a78 940e 4b47  	call Print16Signed
                 
002a7a d004      	rcall PrintDecimal
002a7b e506      	ldi t, 'V'
002a7c 940e 4c35 	call PrintChar
002a7e 9508      	ret
                 
                 
                 
                 	;--- Print decimal point and one digit ---
                 
                 PrintDecimal:
                 
002a7f e20e      	ldi t, '.'
002a80 940e 4c35 	call PrintChar
                 
002a82 2fad      	mov xl, yh				;print the fractional part (one digit)
002a83 27bb      	clr xh
002a84 27dd      	clr yh
002a85 93b0 0543
002a87 93a0 0544
002a89 93d0 0545 	b16store Temp2
002a8b e000
002a8c 9300 0546
002a8e e000
002a8f 9300 0547
002a91 e00a
002a92 9300 0548 	b16ldi Temper, 0.0390625
002a94 9110 0543
002a96 9120 0544
002a98 9130 0545
002a9a 9140 0546
002a9c 9150 0547
002a9e 9160 0548
002aa0 940e 4f3a
002aa2 9370 0543
002aa4 9380 0544
002aa6 9220 0545 	b16mul Temp2, Temp2, Temper
002aa8 91b0 0543
002aaa 91a0 0544
002aac 91d0 0545 	b16load Temp2
002aae 940e 4b47 	call Print16Signed
002ab0 9508      	ret
                 
                 
                 
                 	;--- Print timer value ---
                 
                 PrintTimer:
                 
002ab1 30aa      	cpi xl, 10				;minutes
002ab2 f41c      	brge ptim1
                 
002ab3 e300      	ldi t, '0'				;print leading zero
002ab4 940e 4c35 	call PrintChar
                 
002ab6 27bb      ptim1:	clr xh
002ab7 940e 4b47 	call Print16Signed
002ab9 e30a      	ldi t, ':'
002aba 940e 4c35 	call PrintChar
                 
002abc 2fac      	mov xl, yl				;seconds
002abd 30aa      	cpi xl, 10
002abe f41c      	brge ptim2
                 
002abf e300      	ldi t, '0'				;print leading zero
002ac0 940e 4c35 	call PrintChar
                 
002ac2 940e 4b47 ptim2:	call Print16Signed
002ac4 9508      	ret
                 
                 
                 
                 	;--- Print flight mode ---
                 
                 PrintFlightMode:
                 
002ac5 940e 4c2e 	call PrintString			;register Z (input parameter) points to the label
002ac7 9100 077b
002ac9 2300
002aca f42a      	rvbrflagfalse flagSlOn, pfm1
                 
002acb e3e4
002acc e9fc      	ldz selflvl*2				;(normal) SL
002acd 940e 4c2e 	call PrintString
002acf 9508      	ret
                 
002ad0 9100 077c
002ad2 2300
002ad3 f42a      pfm1:	rvbrflagfalse flagSlStickMixing, pfm2
                 
002ad4 e1ea
002ad5 e9fc      	ldz slmix*2				;SL mix
002ad6 940e 4c2e 	call PrintString
002ad8 9508      	ret
                 
002ad9 e0e4
002ada e9fc      pfm2:	ldz acro*2				;acro
002adb 940e 4c2e 	call PrintString
002add 9508      	ret
                 
                 
                 
002ade 503c
002adf 4f52
002ae0 4946
002ae1 454c
002ae2 203e
002ae3 4d20
002ae4 4e45
002ae5 0055      upd1:	.db "<PROFILE>  MENU", 0
002ae6 4153
002ae7 4546
002ae8 0000      safe:	.db "SAFE", 0, 0
002ae9 5241
002aea 454d
002aeb 0044      armed:	.db "ARMED", 0
                 
002aec 7453
002aed 6e61
002aee 2d64
002aef 6c61
002af0 6e6f
002af1 2065
002af2 6947
002af3 626d
002af4 6c61
002af5 0000      upd2:	.db "Stand-alone Gimbal", 0, 0
002af6 6f43
002af7 746e
002af8 6f72
002af9 6c6c
002afa 7265
002afb 6d20
002afc 646f
002afd 2e65
002afe 0000      upd3:	.db "Controller mode.", 0, 0
                 
002aff 55d8
002b00 55ec      gblmode:.dw upd2*2, upd3*2
                 
002b01 202e
002b02 7554
002b03 696e
002b04 676e
002b05 0020      udp6:	.db ". Tuning ", 0
                 
002b06 1300
002b07 287f      udp7:	.db 0, 19, 127, 40
002b08 1000
002b09 197f      udp8:	.db 0, 16, 127, 25
                 
002b0a 6f4d
002b0b 6564
002b0c 203a
002b0d 0000      flmode:	.db "Mode: ", 0, 0
002b0e 6142
002b0f 7474
002b10 203a
002b11 0000      batt:	.db "Batt: ", 0, 0
002b12 564c
002b13 2041
002b14 203a
002b15 0000      lvalbl:	.db "LVA : ", 0, 0
                 
002b16 4341
002b17 2043
002b18 6f6e
002b19 2074
002b1a 6163
002b1b 696c
002b1c 7262
002b1d 7461
002b1e 6465
002b1f 002e      sta1:	.db "ACC not calibrated.", 0
002b20 6f4e
002b21 6120
002b22 6c69
002b23 7265
002b24 6e6f
002b25 6920
002b26 706e
002b27 7475
002b28 002e      sta2:	.db "No aileron input.", 0
002b29 6f4e
002b2a 6520
002b2b 656c
002b2c 6176
002b2d 6f74
002b2e 2072
002b2f 6e69
002b30 7570
002b31 2e74
002b32 0000      sta3:	.db "No elevator input.", 0, 0
002b33 6f4e
002b34 7420
002b35 7268
002b36 746f
002b37 6c74
002b38 2065
002b39 6e69
002b3a 7570
002b3b 2e74
002b3c 0000      sta4:	.db "No throttle input.", 0, 0
002b3d 6f4e
002b3e 7220
002b3f 6475
002b40 6564
002b41 2072
002b42 6e69
002b43 7570
002b44 2e74
002b45 0000      sta5:	.db "No rudder input.", 0, 0
002b46 6153
002b47 696e
002b48 7974
002b49 6320
002b4a 6568
002b4b 6b63
002b4c 6620
002b4d 6961
002b4e 656c
002b4f 2e64
002b50 0000      sta6:	.db "Sanity check failed.", 0, 0
002b51 6f4e
002b52 6d20
002b53 746f
002b54 726f
002b55 6c20
002b56 7961
002b57 756f
002b58 2174
002b59 0000      sta7:	.db "No motor layout!", 0, 0
002b5a 6843
002b5b 6365
002b5c 206b
002b5d 6874
002b5e 6f72
002b5f 7474
002b60 656c
002b61 6c20
002b62 7665
002b63 6c65
002b64 002e      sta8:	.db "Check throttle level.", 0
002b65 5852
002b66 7320
002b67 6769
002b68 616e
002b69 206c
002b6a 6177
002b6b 2073
002b6c 6f6c
002b6d 7473
002b6e 0021      sta9:	.db "RX signal was lost!", 0
                 
002b6f 6843
002b70 6365
002b71 206b
002b72 6961
002b73 656c
002b74 6f72
002b75 206e
002b76 656c
002b77 6576
002b78 2e6c
002b79 0000      sta11:	.db "Check aileron level.", 0, 0
002b7a 6843
002b7b 6365
002b7c 206b
002b7d 6c65
002b7e 7665
002b7f 7461
002b80 726f
002b81 6c20
002b82 7665
002b83 6c65
002b84 002e      sta12:	.db "Check elevator level.", 0
                 
002b85 6f4e
002b86 4320
002b87 5050
002b88 204d
002b89 6e69
002b8a 7570
002b8b 2174
002b8c 0000      sta21:	.db "No CPPM input!", 0, 0
                 
002b8d 6f4e
002b8e 5320
002b8f 422e
002b90 7375
002b91 6920
002b92 706e
002b93 7475
002b94 0021      sta31:	.db "No S.Bus input!", 0
002b95 4146
002b96 4c49
002b97 4153
002b98 4546
002b99 0021      sta32:	.db "FAILSAFE!", 0
                 
002b9a 6f4e
002b9b 5320
002b9c 7461
002b9d 6c65
002b9e 696c
002b9f 6574
002ba0 6920
002ba1 706e
002ba2 7475
002ba3 0021      sta41:	.db "No Satellite input!", 0
002ba4 6153
002ba5 2074
002ba6 7270
002ba7 746f
002ba8 636f
002ba9 6c6f
002baa 6520
002bab 7272
002bac 726f
002bad 0021      sta45:	.db "Sat protocol error!", 0
                 
                 
                 
                 	;--- Load status string ---
                 
                 LoadStatusString:
                 
002bae 9468      	set					;set the T flag to indicate error/warning (assuming that one or more status bits are set)
                 
002baf 9100 079d 	lds t, StatusBits
002bb1 7f07      	cbr t, LvaWarning			;no error message displayed for LVA warning
002bb2 f4b9      	brne lss11
                 
002bb3 9100 0773
002bb5 2300
002bb6 f01a      	rvbrflagtrue flagThrottleZero, lss8	;no critical flags are set so we'll display a warning if throttle is above idle
                 
002bb7 ebe4
002bb8 e5f6      	ldz sta8*2				;check throttle level
002bb9 9508      	ret
                 
002bba 9100 0774
002bbc 2300
002bbd f01a      lss8:	rvbrflagtrue flagAileronCentered, lss9
                 
002bbe edee
002bbf e5f6      	ldz sta11*2				;check aileron level
002bc0 9508      	ret
                 
002bc1 9100 0775
002bc3 2300
002bc4 f01a      lss9:	rvbrflagtrue flagElevatorCentered, lss10
                 
002bc5 efe4
002bc6 e5f6      	ldz sta12*2				;check elevator level
002bc7 9508      	ret
                 
002bc8 94e8      lss10:	clt					;no errors/warnings (clear the T flag)
002bc9 9508      	ret
                 
002bca 9100 079d lss11:	lds t, StatusBits
002bcc 7003      	andi t, RxSignalLost
002bcd 3003      	cpi t, RxSignalLost
002bce f419      	brne lss1
                 
002bcf ecea
002bd0 e5f6      	ldz sta9*2				;RX signal was lost
002bd1 9508      	ret
                 
002bd2 9100 079d lss1:	lds t, StatusBits
002bd4 7004      	andi t, NoMotorLayout
002bd5 f019      	breq lss2
                 
002bd6 eae2
002bd7 e5f6      	ldz sta7*2				;no motor layout
002bd8 9508      	ret
                 
002bd9 9100 079d lss2:	lds t, StatusBits
002bdb 7001      	andi t, AccNotCalibrated
002bdc f019      	breq lss3
                 
002bdd e2ec
002bde e5f6      	ldz sta1*2				;ACC not calibrated
002bdf 9508      	ret
                 
002be0 9100 079d lss3:	lds t, StatusBits
002be2 7002      	andi t, SanityCheckFailed
002be3 f019      	breq lss4
                 
002be4 e8ec
002be5 e5f6      	ldz sta6*2				;sanity check failed
002be6 9508      	ret
                 
002be7 9100 074d lss4:	lds t, RxMode
002be9 3000      	cpi t, RxModeStandard
002bea f411      	brne lss5
                 
002beb d00e      	rcall GetStdStatus			;standard RX mode
002bec 9508      	ret
                 
002bed 3001      lss5:	cpi t, RxModeCppm
002bee f419      	brne lss6
                 
002bef 940e 2c12 	call GetCppmStatus			;CPPM RX mode
002bf1 9508      	ret
                 
002bf2 3002      lss6:	cpi t, RxModeSBus
002bf3 f419      	brne lss7
                 
002bf4 940e 2c15 	call GetSBusStatus			;S.Bus RX mode
002bf6 9508      	ret
                 
002bf7 940e 2c1f lss7:	call GetSatStatus			;Satellite mode
002bf9 9508      	ret
                 
                 
                 
                 	;--- Get status for standard mode ---
                 
                 GetStdStatus:
                 
002bfa 9100 079d 	lds t, StatusBits
002bfc 7100      	andi t, NoAileronInput
002bfd f019      	breq std6
                 
002bfe e4e0
002bff e5f6      	ldz sta2*2				;no aileron input
002c00 9508      	ret
                 
002c01 9100 079d std6:	lds t, StatusBits
002c03 7200      	andi t, NoElevatorInput
002c04 f019      	breq std7
                 
002c05 e5e2
002c06 e5f6      	ldz sta3*2				;no elevator input
002c07 9508      	ret
                 
002c08 9100 079d std7:	lds t, StatusBits
002c0a 7400      	andi t, NoThrottleInput
002c0b f019      	breq std8
                 
002c0c e6e6
002c0d e5f6      	ldz sta4*2				;no throttle input
002c0e 9508      	ret
                 
002c0f e7ea
002c10 e5f6      std8:	ldz sta5*2				;no rudder input
002c11 9508      	ret
                 
                 
                 
                 	;--- Get status for CPPM mode ---
                 
                 GetCppmStatus:
                 
002c12 e0ea
002c13 e5f7      	ldz sta21*2				;no CPPM input
002c14 9508      	ret
                 
                 
                 
                 	;--- Get status for S.Bus mode ---
                 
                 GetSBusStatus:
                 
002c15 9100 079d 	lds t, StatusBits
002c17 7100      	andi t, NoSBusInput
002c18 f019      	breq gsbs1
                 
002c19 e1ea
002c1a e5f7      	ldz sta31*2				;no S.Bus input
002c1b 9508      	ret
                 
002c1c e2ea
002c1d e5f7      gsbs1:	ldz sta32*2				;failsafe
002c1e 9508      	ret
                 
                 
                 
                 	;--- Get status for Satellite mode ---
                 
                 GetSatStatus:
                 
002c1f 9100 079d 	lds t, StatusBits
002c21 7200      	andi t, SatProtocolError
002c22 f019      	breq gss1
                 
002c23 e4e8
002c24 e5f7      	ldz sta45*2				;Satellite protocol error
002c25 9508      	ret
                 
002c26 e3e4
002c27 e5f7      gss1:	ldz sta41*2				;no Satellite input
002c28 9508      	ret
                 
                 
                 .include "arm.asm"
                 
                 
                 
                 
                 	;--- Arming/Disarming ---
                 
                 Arming:
                 
002c29 9000 0773
002c2b 9010 079f
002c2d 2001
002c2e 9200 0793 	rvflagand flagA, flagThrottleZero, flagAutoDisarm	;auto disarm logic
002c30 9000 0793
002c32 9010 0770
002c34 2001
002c35 9200 0793 	rvflagand flagA, flagA, flagArmed
002c37 9100 0793
002c39 2300
002c3a f042      	rvbrflagtrue flagA, arm10	
                 
002c3b e000
002c3c 9300 0690
002c3e 9300 0691
002c40 9300 0692 	b16clr AutoDisarmDelay					;if throttle is non-zero or auto disarm is off, clear counter
002c42 c039      	rjmp arm12
                 
002c43 9130 0690
002c45 9140 0691
002c47 e001
002c48 0f40
002c49 2700
002c4a 1f30
002c4b 9330 0690
002c4d 9340 0691 arm10:	b16inc AutoDisarmDelay					;if throttle is zero and autodisarm is on, inc counter
002c4f e10f
002c50 9300 0540
002c52 e400
002c53 9300 0541
002c55 e000
002c56 9300 0542 	b16ldi Temp, 400 * 20
002c58 9130 0690
002c5a 9140 0691
002c5c 9150 0692
002c5e 9160 0540
002c60 9170 0541
002c62 9180 0542
002c64 1758
002c65 0747
002c66 0736      	b16cmp AutoDisarmDelay, Temp				;counter = 20 sec?
002c67 f4a1      	brne arm12
                 
002c68 e000
002c69 9300 0690
002c6b 9300 0691
002c6d 9300 0692 	b16clr AutoDisarmDelay					;yes, disarm
002c6f 2700
002c70 9300 0770 	rvsetflagfalse flagArmed
002c72 ef0f
002c73 9300 0778 	rvsetflagtrue flagLcdUpdate
                 
002c75 ef0f
002c76 9300 077e 	rvsetflagtrue flagAlarmOverride				;turn on the Lost Model Alarm
002c78 e001      	ldi t, 1						;make sure the 'NoActivityDds' counter will be reset
002c79 9300 077f 	sts AuxBeepDelay, t
002c7b 9508      	ret
                 
002c7c 9100 0773
002c7e 2300
002c7f f592      arm12:	rvbrflagfalse flagThrottleZero, arm1
                 
002c80 ef0e
002c81 9300 0540
002c83 e00c
002c84 9300 0541
002c86 e000
002c87 9300 0542 	b16ldi Temp, -500			;rudder in Arming position?
002c89 9130 0555
002c8b 9140 0556
002c8d 9150 0557
002c8f 9160 0540
002c91 9170 0541
002c93 9180 0542
002c95 1758
002c96 0747
002c97 0736      	b16cmp RxYaw, Temp
002c98 f0ec      	brlt arm2
                 
002c99 e001
002c9a 9300 0540
002c9c ef04
002c9d 9300 0541
002c9f e000
002ca0 9300 0542 	b16ldi Temp, 500			;rudder in Safe position?
002ca2 9130 0555
002ca4 9140 0556
002ca6 9150 0557
002ca8 9160 0540
002caa 9170 0541
002cac 9180 0542
002cae 1758
002caf 0747
002cb0 0736      	b16cmp RxYaw, Temp
002cb1 f424      	brge arm2
                 
002cb2 e000
002cb3 9300 0772 arm1:	lrv ArmingDelay, 0			;no, clear delay counter and exit
002cb5 9508      	ret
                 
002cb6 9100 0772
002cb8 9503
002cb9 9300 0772 arm2:	rvinc ArmingDelay			;yes, ArmingDelay++
002cbb 9100 0772 	lds t, ArmingDelay
002cbd 3f0f      	cpi t, 255				;delay reached?
002cbe f009      	breq arm9
                 
002cbf c058      	rjmp arm3				;no, leave
                 
002cc0 91b0 0555
002cc2 91a0 0556
002cc4 91d0 0557 arm9:	b16load RxYaw
002cc6 23bb      	tst xh					;yes, set or clear flagArmed depending on the rudder direction
002cc7 f52a      	brpl arm6
                 
002cc8 9100 079d 	lds t, StatusBits			;skip arming if status is not OK.
002cca 7f07      	cbr t, LvaWarning			;ignore Low Voltage Alarm warning
002ccb f009      	breq arm5
                 
002ccc 9508      arm7:	ret
                 
002ccd 9100 0774
002ccf 2300
002cd0 f7da      arm5:	rvbrflagfalse flagAileronCentered, arm7	;skip arming if the aileron/elevator stick isn't centered
002cd1 9100 0775
002cd3 2300
002cd4 f7ba      	rvbrflagfalse flagElevatorCentered, arm7
                 
002cd5 ef0f
002cd6 9300 0770 	rvsetflagtrue flagArmed			;arm
002cd8 e001
002cd9 9300 0681
002cdb e20c
002cdc 9300 0682
002cde e000
002cdf 9300 0683 	b16ldi BeeperDelay, 300
002ce1 940e 2856 	call GyroCal				;calibrate gyros
002ce3 940e 2f03 	call Initialize3dVector			;set 3d vector to point straigth up
                 
002ce5 e00a      	ldi t, 10				;initialize counter for warning about no LVA value set
002ce6 9300 0777 	sts FlashingLEDCount, t
                 
002ce8 9100 07a9 	lds t, ChannelCount			;register number of channels used while arming
002cea 9300 07aa 	sts ChannelCountArmed, t
002cec c00c      	rjmp Arm11
                 
002ced 2700
002cee 9300 0770 arm6:	rvsetflagfalse flagArmed		;disarm
002cf0 e000
002cf1 9300 0681
002cf3 e906
002cf4 9300 0682
002cf6 e000
002cf7 9300 0683 	b16ldi BeeperDelay, 150
                 
002cf9 2700
002cfa 9300 077e arm11:	rvsetflagfalse flagAlarmOverride	;arming/disarming will stop the Lost Model Alarm if overridden
                 
002cfc eaef
002cfd e0f0      	ldz eeArmingBeeps			;check beep setting
002cfe 940e 4eef 	call GetEePVariable8
002d00 23aa
002d01 f41a      	brflagfalse xl, arm4
                 
002d02 ef0f
002d03 9300 079c 	rvsetflagtrue flagGeneralBuzzerOn
                 
002d05 ef0f
002d06 9300 0778 arm4:	rvsetflagtrue flagLcdUpdate
002d08 e003
002d09 9300 067e
002d0b e200
002d0c 9300 067f
002d0e e000
002d0f 9300 0680 	b16ldi ArmedBeepDds, 400*2
002d11 e000
002d12 9300 0690
002d14 9300 0691
002d16 9300 0692 	b16clr AutoDisarmDelay
                 
002d18 9508      arm3:	ret
                 
                 .include "flightinit.asm"
                 
                 FlightInit:
                 
002d19 d39c      	rcall LoadMixerTable			;copy Mixertable from EE to RAM
002d1a d3a7      	rcall LoadParameterTable		;copy and scale PI gain and limits from EE to 16.8 variables
002d1b d5be      	rcall UpdateOutputTypeAndRate
                 
                 
002d1c e009
002d1d 9300 0540
002d1f ec04
002d20 9300 0541
002d22 e000
002d23 9300 0542 	b16ldi Temp, 2500			;preload the servo filters
002d25 e000
002d26 9300 0795 	lrv Index, 0
                 
002d28 93ef
002d29 93ff
002d2a 9130 0540
002d2c 9140 0541
002d2e 9150 0542
002d30 e2e7
002d31 e0f6
002d32 9160 0795
002d34 e003
002d35 9f60
002d36 0de0
002d37 1df1
002d38 9331
002d39 9341
002d3a 9351
002d3b 91ff
002d3c 91ef      fli8:	b16store_array FilteredOut1, Temp
002d3d 9100 0795
002d3f 9503
002d40 9300 0795 	rvinc Index
002d42 9100 0795
002d44 3008      	rvcpi Index, 8
002d45 f711      	brne fli8
                 
                 
002d46 e7e9
002d47 e0f0      	ldz eeBoardOrientation			;eeBoardOrientation
002d48 940e 4f15 	call ReadEeprom
002d4a 9300 0749 	sts BoardOrientation, t
                 
                 
002d4c d45b      	rcall LoadSelfLevelSettings
                 
                 
002d4d d55b      	rcall LoadEscLowLimit			;eeEscLowLimit
002d4e d57b      	rcall LoadStickDeadZone			;eeStickDeadZone
                 
002d4f d224      	rcall fli2				;eeBattAlarmVoltage
002d50 9160 0540
002d52 9170 0541
002d54 9180 0542
002d56 e002
002d57 940e 4f34
002d59 9360 0540
002d5b 9370 0541
002d5d 9380 0542 	b16fmul Temp, 2
002d5f 9100 0540
002d61 9300 0663
002d63 9100 0541
002d65 9300 0664
002d67 9100 0542
002d69 9300 0665 	b16mov BattAlarmVoltage, Temp
                 
002d6b d208      	rcall fli2				;eeServoFilter
002d6c e000
002d6d 9300 0546
002d6f e604
002d70 9300 0547
002d72 e000
002d73 9300 0548 	b16ldi Temper, 100
002d75 9130 0546
002d77 9140 0547
002d79 9150 0548
002d7b 9160 0540
002d7d 9170 0541
002d7f 9180 0542
002d81 1b58
002d82 0b47
002d83 0b36
002d84 9330 067b
002d86 9340 067c
002d88 9350 067d 	b16sub ServoFilter, Temper, Temp
002d8a 9160 067b
002d8c 9170 067c
002d8e 9180 067d
002d90 e007
002d91 940e 4f2b
002d93 9360 067b
002d95 9370 067c
002d97 9380 067d 	b16fdiv ServoFilter, 7
                 
                 
002d99 e7ee
002d9a e0f0      	ldz eeStickScaleRoll
002d9b d1d8      	rcall fli2
002d9c d18c      	rcall TempDiv16
002d9d 9100 0540
002d9f 9300 05f1
002da1 9300 0600
002da3 9100 0541
002da5 9300 05f2
002da7 9300 0601
002da9 9100 0542
002dab 9300 05f3
002dad 9300 0602 	b16mov2 StickScaleRoll, StickScaleRollOrg, Temp
                 
002daf d1c4      	rcall fli2				;eeStickScalePitch
002db0 d178      	rcall TempDiv16
002db1 9100 0540
002db3 9300 05f4
002db5 9300 0603
002db7 9100 0541
002db9 9300 05f5
002dbb 9300 0604
002dbd 9100 0542
002dbf 9300 05f6
002dc1 9300 0605 	b16mov2 StickScalePitch, StickScalePitchOrg, Temp
                 
002dc3 d1b0      	rcall fli2				;eeStickScaleYaw
002dc4 d164      	rcall TempDiv16
002dc5 9100 0540
002dc7 9300 05f7
002dc9 9100 0541
002dcb 9300 05f8
002dcd 9100 0542
002dcf 9300 05f9 	b16mov StickScaleYaw, Temp
                 
002dd1 d1a2      	rcall fli2				;eeStickScaleThrottle
002dd2 d156      	rcall TempDiv16
002dd3 9100 0540
002dd5 9300 05fa
002dd7 9100 0541
002dd9 9300 05fb
002ddb 9100 0542
002ddd 9300 05fc 	b16mov StickScaleThrottle, Temp
                 
002ddf d194      	rcall fli2				;eeStickScaleSlMixing
002de0 d158      	rcall TempDiv100
002de1 9100 0540
002de3 9300 05fd
002de5 9100 0541
002de7 9300 05fe
002de9 9100 0542
002deb 9300 05ff 	b16mov MixFactor, Temp
                 
                 
                   ; Channel Mapping check was called here. Not needed anymore, called on main.c
                 
002ded d44c      fli3:	rcall LoadGimbalSettings
                 
                 
002dee e5ed
002def e0f0      	ldz EeSensorCalData			;load ACC calibration data
002df0 940e 4efb 	call GetEePVariable168
002df2 93b0 0585
002df4 93a0 0586
002df6 93d0 0587 	b16store AccXZero
002df8 940e 4efb 	call GetEePVariable168
002dfa 93b0 0588
002dfc 93a0 0589
002dfe 93d0 058a 	b16store AccYZero
002e00 940e 4efb 	call GetEePVariable168
002e02 93b0 058b
002e04 93a0 058c
002e06 93d0 058d 	b16store AccZZero
                 
                 
002e08 d4e5      	rcall ReadLinkRollPitchFlag
                 #ifdef IN_FLIGHT_TUNING
                 #endif
002e09 940e 212c 	call LoadAuxSwitchSetup
002e0b 940e 01af 	call LoadBatteryVoltageOffset
002e0d 940e 32f5 	call LoadDG2Settings
                 
002e0f eaed
002e10 e0f0      	ldz eeAutoDisarm
002e11 940e 4f13 	call ReadEepromP
002e13 9300 079f 	sts flagAutoDisarm, t
                 
                 
002e15 ef0f      	ser t					;make sure the AUX switch function will be updated
002e16 9300 0782 	sts AuxSwitchPositionOld, t
                 
002e18 9300 0778 	sts flagLcdUpdate, t
                 
002e1a e001
002e1b 9300 076b 	lrv OutputRateDividerCounter, 1
002e1d e005
002e1e 9300 076a 	lrv OutputRateDivider, 5		;slow rate divider. f = 400 / OutputRateDivider
                 
002e20 ef0a
002e21 9300 0767 	lrv RxTimeoutLimit, TimeoutLimit
                 
002e23 2700      	clr t
002e24 9300 07a0 	sts flagMutePwm, t
                 
002e26 9300 0770 	sts flagArmed, t
002e28 9300 0771 	sts flagArmedOldState, t
                 
002e2a 9300 0790 	sts ButtonDelay, t
                 
002e2c 9300 077e 	sts flagAlarmOverride, t
002e2e 9300 079c 	sts flagGeneralBuzzerOn, t
002e30 9300 079b 	sts flagLvaBuzzerOn, t
002e32 9300 07a1 	sts flagDebugBuzzerOn, t
                 
002e34 9300 0690
002e36 9300 0691
002e38 9300 0692 	b16set AutoDisarmDelay
                 
002e3a 9300 0681
002e3c 9300 0682
002e3e 9300 0683 	b16set BeeperDelay
                 
002e40 9300 067e
002e42 9300 067f
002e44 9300 0680 	b16set ArmedBeepDds
                 
002e46 9300 0693
002e48 9300 0694
002e4a 9300 0695 	b16set NoActivityTimer
002e4c 9300 0696
002e4e 9300 0697
002e50 9300 0698 	b16set NoActivityDds
                 
002e52 9300 0699
002e54 9300 069a
002e56 9300 069b 	b16set LiveUpdateTimer
                 
002e58 9300 06bd
002e5a 9300 06be
002e5c 9300 06bf 	b16set CamRoll
002e5e 9300 06c0
002e60 9300 06c1
002e62 9300 06c2 	b16set CamPitch
                 
002e64 9300 069f
002e66 9300 06a0
002e68 9300 06a1 	b16set EulerAngleRoll
002e6a 9300 06a2
002e6c 9300 06a3
002e6e 9300 06a4 	b16set EulerAnglePitch
                 
002e70 d092      	rcall Initialize3dVector		;set 3d vector to point straigth up
                 
002e71 e003
002e72 9300 0594
002e74 ef0f
002e75 9300 0595
002e77 e000
002e78 9300 0596 	b16ldi BatteryVoltageLowpass, 1023
                 
                 
                 	;--- ACC ---
                 
002e7a e0d8      	ldi yh, 8				;ACC SW Filter
002e7b 27aa      	clr xl
002e7c 27bb      	clr xh
002e7d 93b0 0666
002e7f 93a0 0667
002e81 93d0 0668 	b16store AccSWFilter
                 
002e83 9100 073b 	lds t, MpuAccCfg
002e85 3000      	cpi t, MpuAcc2g
002e86 f499      	brne fli22
                 
002e87 e000
002e88 9300 06d8
002e8a e800
002e8b 9300 06d9
002e8d e000
002e8e 9300 06da 	b16ldi AccZTest, 128			;2g
002e90 e000
002e91 9300 06db
002e93 e000
002e94 9300 06dc
002e96 e504
002e97 9300 06dd 	b16ldi TiltAngMult, 0.33
002e99 c03c      	rjmp fli30
                 
002e9a 3008      fli22:	cpi t, MpuAcc4g
002e9b f499      	brne fli24
                 
002e9c e000
002e9d 9300 06d8
002e9f e400
002ea0 9300 06d9
002ea2 e000
002ea3 9300 06da 	b16ldi AccZTest, 64			;4g
002ea5 e000
002ea6 9300 06db
002ea8 e000
002ea9 9300 06dc
002eab ea08
002eac 9300 06dd 	b16ldi TiltAngMult, 0.66
002eae c027      	rjmp fli30
                 
002eaf 3100      fli24:	cpi t, MpuAcc8g
002eb0 f499      	brne fli26
                 
002eb1 e000
002eb2 9300 06d8
002eb4 e200
002eb5 9300 06d9
002eb7 e000
002eb8 9300 06da 	b16ldi AccZTest, 32			;8g
002eba e000
002ebb 9300 06db
002ebd e001
002ebe 9300 06dc
002ec0 e501
002ec1 9300 06dd 	b16ldi TiltAngMult, 1.32
002ec3 c012      	rjmp fli30
                 
002ec4 e000
002ec5 9300 06d8
002ec7 e100
002ec8 9300 06d9
002eca e000
002ecb 9300 06da fli26:	b16ldi AccZTest, 16			;16g
002ecd e000
002ece 9300 06db
002ed0 e002
002ed1 9300 06dc
002ed3 ea03
002ed4 9300 06dd 	b16ldi TiltAngMult, 2.64
                 
                 
                 fli30:	;--- Gyro ---
                 
002ed6 e001
002ed7 9300 06e3
002ed9 ed04
002eda 9300 06e4
002edc e800
002edd 9300 06e5
002edf e408
002ee0 9300 06e6
002ee2 e606
002ee3 9300 06e7 	b832ldi MagicNumberMult, 1.830082440462336 ;1.830082440462336*(6250/4096)=2.7924841926 (all settings use this magic number as the GyroRate is scaled instead in imu.asm)
                 
                 
                 	;--- Status ---
                 
002ee5 9100 079d 	lds t, StatusBits			;clear the lower status bits
002ee7 7f00      	andi t, 0xF0
002ee8 9300 079d 	sts StatusBits, t
                 
002eea ebef
002eeb e0f0      	ldz eeMotorLayoutOk			;motor layout loaded?
002eec 940e 4f15 	call ReadEeprom				;check user profile #1 only
002eee 2300
002eef f02a      	brflagtrue t, fli4
                 
002ef0 9100 079d
002ef2 6004
002ef3 9300 079d 	setstatusbit NoMotorLayout		;no, will display an error and refuse arming
                 
002ef5 ebee
002ef6 e0f0      fli4:	ldz eeSensorsCalibrated			;sensors calibrated?
002ef7 940e 4f13 	call ReadEepromP
002ef9 2300
002efa f032      	brflagtrue t, fli11
                 
002efb 9100 079d
002efd 6001
002efe 9300 079d 	setstatusbit AccNotCalibrated		;no, will display an error and refuse arming
002f00 9508      	ret					;skip the sanity check
                 
002f01 d0c0      fli11:	rcall SanityCheck
002f02 9508      	ret
                 
                 
                 
                 	;--- Set 3d vector to point straigth up ---
                 
                 Initialize3dVector:
                 
002f03 e000
002f04 9300 06fc
002f06 9300 06fd
002f08 9300 06fe
002f0a 9300 06ff
002f0c 9300 0700 	b832clr VectorX
002f0e e000
002f0f 9300 0701
002f11 9300 0702
002f13 9300 0703
002f15 9300 0704
002f17 9300 0705 	b832clr VectorY
002f19 e001
002f1a 9300 0706
002f1c e000
002f1d 9300 0707
002f1f e000
002f20 9300 0708
002f22 e000
002f23 9300 0709
002f25 e000
002f26 9300 070a 	b832ldi VectorZ, 1
002f28 9508      	ret
                 
                 
                 
                 	;--- Divide Temp by 16 ---
                 
                 TempDiv16:
                 
002f29 9160 0540
002f2b 9170 0541
002f2d 9180 0542
002f2f e004
002f30 940e 4f2b
002f32 9360 0540
002f34 9370 0541
002f36 9380 0542 	b16fdiv Temp, 4
002f38 9508      	ret
                 
                 
                 
                 	;--- Divide Temp by 100 ---
                 
                 TempDiv100:
                 
002f39 e000
002f3a 9300 0546
002f3c e000
002f3d 9300 0547
002f3f e502
002f40 9300 0548 	b16ldi Temper, 0.3203125		;0.3125 * 0.03203125 = 0.010009765 which is much closer to 0.01 than 0.0078125 (= b16ldi Temp, 0.01)
002f42 9110 0540
002f44 9120 0541
002f46 9130 0542
002f48 9140 0546
002f4a 9150 0547
002f4c 9160 0548
002f4e 940e 4f3a
002f50 9370 0540
002f52 9380 0541
002f54 9220 0542 	b16mul Temp, Temp, Temper
002f56 e000
002f57 9300 0546
002f59 e000
002f5a 9300 0547
002f5c e008
002f5d 9300 0548 	b16ldi Temper, 0.03125
002f5f 9110 0540
002f61 9120 0541
002f63 9130 0542
002f65 9140 0546
002f67 9150 0547
002f69 9160 0548
002f6b 940e 4f3a
002f6d 9370 0540
002f6f 9380 0541
002f71 9220 0542 	b16mul Temp, Temp, Temper
002f73 9508      	ret
                 
                 
                 
                 	;---
                 
002f74 940e 4edd fli2:	call GetEePVariable16			;Temp = (Z+)
002f76 27dd      	clr yh
002f77 93b0 0540
002f79 93a0 0541
002f7b 93d0 0542 	b16store Temp
002f7d 9508      	ret
                 
002f7e e000
002f7f 9300 0546
002f81 e800
002f82 9300 0547
002f84 e000
002f85 9300 0548 fli5:	b16ldi Temper, 128.0			;most limit values (0-100%) are scaled with 128.0 to fit to the 12800.0 full throttle value
002f87 9110 0540
002f89 9120 0541
002f8b 9130 0542
002f8d 9140 0546
002f8f 9150 0547
002f91 9160 0548
002f93 940e 4f3a
002f95 9370 0540
002f97 9380 0541
002f99 9220 0542 	b16mul Temp, Temp, Temper
002f9b 9508      	ret
                 
                 
                 
002f9c 6144
002f9d 6174
002f9e 6f20
002f9f 7475
002fa0 6f20
002fa1 2066
002fa2 696c
002fa3 696d
002fa4 7374
002fa5 003a      mad1:	.db "Data out of limits:", 0
002fa6 6553
002fa7 736e
002fa8 726f
002fa9 6320
002faa 6c61
002fab 6269
002fac 6172
002fad 6974
002fae 6e6f
002faf 0000      mad5:	.db "Sensor calibration", 0, 0
002fb0 6553
002fb1 736e
002fb2 726f
002fb3 7220
002fb4 7761
002fb5 6420
002fb6 7461
002fb7 0061      mad7:	.db "Sensor raw data", 0
002fb8 694d
002fb9 696e
002fba 756d
002fbb 206d
002fbc 6854
002fbd 6f72
002fbe 7474
002fbf 656c
002fc0 203a
002fc1 0000      stt1:  .db "Minimum Throttle: ", 0, 0
                 
                 
                 	;--- Sanity check ---
                 
                 SanityCheck:
                 
002fc2 940e 4d81 	call LcdClear6x8
                 
002fc4 e000
002fc5 9300 073f 	lrv X1, 0
002fc7 e10a
002fc8 9300 0740 	lrv Y1, 26
                 
002fca 940e 477d 	call AdcRead
                 
002fcc 91b0 0564
002fce 91a0 0565
002fd0 91d0 0566
002fd2 e7c0
002fd3 efde
002fd4 e9e0
002fd5 e0f1
002fd6 940e 30ac
002fd8 f408
002fd9 c0b3      	CheckLimit GyroRoll, -400, 400, san3
002fda 91b0 0567
002fdc 91a0 0568
002fde 91d0 0569
002fe0 e7c0
002fe1 efde
002fe2 e9e0
002fe3 e0f1
002fe4 940e 30ac
002fe6 f408
002fe7 c0a5      	CheckLimit GyroPitch, -400, 400, san3
002fe8 91b0 056a
002fea 91a0 056b
002fec 91d0 056c
002fee e7c0
002fef efde
002ff0 e9e0
002ff1 e0f1
002ff2 940e 30ac
002ff4 f408
002ff5 c097      	CheckLimit GyroYaw, -400, 400, san3
                 
002ff6 91b0 057c
002ff8 91a0 057d
002ffa 91d0 057e
002ffc e7c0
002ffd efde
002ffe e9e0
002fff e0f1
003000 940e 30ac
003002 f408
003003 c089      	CheckLimit AccX, -400, 400, san3
003004 91b0 057f
003006 91a0 0580
003008 91d0 0581
00300a e7c0
00300b efde
00300c e9e0
00300d e0f1
00300e 940e 30ac
003010 f408
003011 c07b      	CheckLimit AccY, -400, 400, san3
003012 91b0 0582
003014 91a0 0583
003016 91d0 0584
003018 e7c0
003019 efde
00301a e9e0
00301b e0f1
00301c 940e 30ac
00301e f408
00301f c06d      	CheckLimit AccZ, -400, 400, san3
                 
003020 91b0 056d
003022 91a0 056e
003024 91d0 056f
003026 e8c8
003027 efdf
003028 e7e8
003029 e0f0
00302a 940e 30ac
00302c f408
00302d c05a      	CheckLimit GyroRollZero, GyroLowLimit, GyroHighLimit, san2
00302e 91b0 0570
003030 91a0 0571
003032 91d0 0572
003034 e8c8
003035 efdf
003036 e7e8
003037 e0f0
003038 940e 30ac
00303a f408
00303b c04c      	CheckLimit GyroPitchZero, GyroLowLimit, GyroHighLimit, san2
00303c 91b0 0573
00303e 91a0 0574
003040 91d0 0575
003042 e8c8
003043 efdf
003044 e7e8
003045 e0f0
003046 940e 30ac
003048 f408
003049 c03e      	CheckLimit GyroYawZero, GyroLowLimit, GyroHighLimit, san2
                 
00304a 91b0 0585
00304c 91a0 0586
00304e 91d0 0587
003050 e8c8
003051 efdf
003052 e7e8
003053 e0f0
003054 940e 30ac
003056 f408
003057 c030      	CheckLimit AccXZero, AccLowLimit, AccHighLimit, san2
003058 91b0 0588
00305a 91a0 0589
00305c 91d0 058a
00305e e8c8
00305f efdf
003060 e7e8
003061 e0f0
003062 940e 30ac
003064 f408
003065 c022      	CheckLimit AccYZero, AccLowLimit, AccHighLimit, san2
003066 91b0 058b
003068 91a0 058c
00306a 91d0 058d
00306c e8c8
00306d efdf
00306e e4ea
00306f e0f1
003070 940e 30ac
003072 f408
003073 c014      	CheckLimit AccZZero, AccLowLimit, AccZHighLimit, san2
                 
                 ;	CheckLimit SelflevelPgain, 0, 501, san1
                 ;	CheckLimit SelflevelPlimit, 0, 3411, san1			;30%
                 
003074 91b0 05ee
003076 91a0 05ef
003078 91d0 05f0
00307a e0c0
00307b e0d0
00307c eee9
00307d e0f3
00307e 940e 30ac
003080 f408
003081 c001      	CheckLimit EscLowLimit, 0, 1001, san1				;20%
                 
003082 9508      	ret 				;no errors, return
                 
003083 e7e0
003084 e5ff      san1:	ldz stt1*2			;print "Minimum Throttle"
003085 940e 4c2e 	call PrintString
003087 c009      	rjmp san4
                 
003088 e4ec
003089 e5ff      san2:	ldz mad5*2			;print "Sensor calibration"
00308a 940e 4c2e 	call PrintString
00308c c004      	rjmp san4
                 
00308d e6e0
00308e e5ff      san3:	ldz mad7*2			;print "Sensor raw data"
00308f 940e 4c2e 	call PrintString
                 
003091 9100 079d
003093 6002
003094 9300 079d san4:	setstatusbit SanityCheckFailed
                 
                 	;footer
003096 940e 4c01 	call PrintContinueFooter
                 
                 	;header
003098 e000
003099 9300 0740 	lrv Y1, 0
00309b e003
00309c 9300 0744 	lrv FontSelector, f12x16
00309e 940e 4b98 	call PrintWarningHeader
                 
0030a0 e000
0030a1 9300 073f 	lrv X1, 0			;print "Data out of limits:"
0030a3 e3e8
0030a4 e5ff      	ldz mad1*2
0030a5 940e 4c2e 	call PrintString
                 
0030a7 940e 4d2c 	call LcdUpdate
                 
0030a9 940e 4ed8 	call WaitForOkButton		;CONTINUE?
0030ab 9508      	ret
                 
                 
                 
                 	;--- Check limits ---
                 
                 Limit:
                 
0030ac 17ac      	cp  xl, yl			;less?
0030ad 07bd      	cpc xh, yh
0030ae f02c      	brlt lim1
                 
0030af 17ae      	cp  xl, zl			;greater?
0030b0 07bf      	cpc xh, zh
0030b1 f414      	brge lim1
                 
0030b2 9488      	clc				;OK
0030b3 9508      	ret
                 
0030b4 9408      lim1:	sec				;not OK
0030b5 9508      	ret
                 
                 
                 
                 	;--- Copy Mixertable from EEPROM to RAM ---
                 
                 LoadMixerTable:
                 
0030b6 e4c0      	ldi yl, 64
0030b7 e0a0
0030b8 e0b5      	ldx RamMixerTable
0030b9 e0e4
0030ba e0f0      	ldz EeMixerTable
                 
0030bb 940e 4f15 mt1:	call ReadEeprom
0030bd 930d      	st x+, t
0030be 9631      	adiw z, 1
0030bf 95ca      	dec yl
0030c0 f7d1      	brne mt1
                 
0030c1 9508      	ret
                 
                 
                 
                 	;--- Copy and scale PI gain and limits from EE to 16.8 variables ---
                 
                 LoadParameterTable:
                 
0030c2 e4e4
0030c3 e0f0      	ldz EeParameterTable
0030c4 deaf      	rcall fli2
0030c5 9100 0540
0030c7 9300 05b2
0030c9 9300 05d6
0030cb 9100 0541
0030cd 9300 05b3
0030cf 9300 05d7
0030d1 9100 0542
0030d3 9300 05b4
0030d5 9300 05d8 	b16mov2 PgainRoll, PgainRollOrg, Temp
                 
0030d7 de9c      	rcall fli2
0030d8 dea5      	rcall fli5
0030d9 9100 0540
0030db 9300 05bb
0030dd 9100 0541
0030df 9300 05bc
0030e1 9100 0542
0030e3 9300 05bd 	b16mov PlimitRoll, Temp
                 
0030e5 de8e      	rcall fli2
0030e6 9100 0540
0030e8 9300 05df
0030ea 9100 0541
0030ec 9300 05e0
0030ee 9100 0542
0030f0 9300 05e1 	b16mov IgainRollOrg, Temp
0030f2 de36      	rcall TempDiv16
0030f3 9100 0540
0030f5 9300 05c4
0030f7 9100 0541
0030f9 9300 05c5
0030fb 9100 0542
0030fd 9300 05c6 	b16mov IgainRoll, Temp
                 
0030ff de74      	rcall fli2
003100 de7d      	rcall fli5
003101 9100 0540
003103 9300 05cd
003105 9100 0541
003107 9300 05ce
003109 9100 0542
00310b 9300 05cf 	b16mov IlimitRoll, Temp
                 
00310d 9100 076c
00310f 2300
003110 f412      	rvbrflagfalse flagRollPitchLink, lpt1
                 
003111 e4e4
003112 e0f0      	ldz EeParameterTable
                 
003113 de60      lpt1:	rcall fli2
003114 9100 0540
003116 9300 05b5
003118 9300 05d9
00311a 9100 0541
00311c 9300 05b6
00311e 9300 05da
003120 9100 0542
003122 9300 05b7
003124 9300 05db 	b16mov2 PgainPitch, PgainPitchOrg, Temp
                 
003126 de4d      	rcall fli2
003127 de56      	rcall fli5
003128 9100 0540
00312a 9300 05be
00312c 9100 0541
00312e 9300 05bf
003130 9100 0542
003132 9300 05c0 	b16mov PlimitPitch, Temp
                 
003134 de3f      	rcall fli2
003135 9100 0540
003137 9300 05e2
003139 9100 0541
00313b 9300 05e3
00313d 9100 0542
00313f 9300 05e4 	b16mov IgainPitchOrg, Temp
003141 dde7      	rcall TempDiv16
003142 9100 0540
003144 9300 05c7
003146 9100 0541
003148 9300 05c8
00314a 9100 0542
00314c 9300 05c9 	b16mov IgainPitch, Temp
                 
00314e de25      	rcall fli2
00314f de2e      	rcall fli5
003150 9100 0540
003152 9300 05d0
003154 9100 0541
003156 9300 05d1
003158 9100 0542
00315a 9300 05d2 	b16mov IlimitPitch, Temp
                 
00315c e5e4
00315d e0f0      	ldz 0x0054
00315e de15      	rcall fli2
00315f 9100 0540
003161 9300 05b8
003163 9300 05dc
003165 9100 0541
003167 9300 05b9
003169 9300 05dd
00316b 9100 0542
00316d 9300 05ba
00316f 9300 05de 	b16mov2 PgainYaw, PgainYawOrg, Temp
                 
003171 de02      	rcall fli2
003172 de0b      	rcall fli5
003173 9100 0540
003175 9300 05c1
003177 9100 0541
003179 9300 05c2
00317b 9100 0542
00317d 9300 05c3 	b16mov PlimitYaw, Temp
                 
00317f ddf4      	rcall fli2
003180 9100 0540
003182 9300 05e5
003184 9100 0541
003186 9300 05e6
003188 9100 0542
00318a 9300 05e7 	b16mov IgainYawOrg, Temp
00318c dd9c      	rcall TempDiv16
00318d 9100 0540
00318f 9300 05ca
003191 9100 0541
003193 9300 05cb
003195 9100 0542
003197 9300 05cc 	b16mov IgainYaw, Temp
                 
003199 ddda      	rcall fli2
00319a dde3      	rcall fli5
00319b 9100 0540
00319d 9300 05d3
00319f 9100 0541
0031a1 9300 05d4
0031a3 9100 0542
0031a5 9300 05d5 	b16mov IlimitYaw, Temp
0031a7 9508      	ret
                 
                 
                 
                 	;--- Load SL parameters from EEPROM ---
                 
                 LoadSelfLevelSettings:
                 
0031a8 e8e8
0031a9 e0f0      	ldz eeSelflevelPgain
0031aa ddc9      	rcall fli2
0031ab 9100 0540
0031ad 9300 0657
0031af 9300 065a
0031b1 9100 0541
0031b3 9300 0658
0031b5 9300 065b
0031b7 9100 0542
0031b9 9300 0659
0031bb 9300 065c 	b16mov2 SelflevelPgain, SelfLevelPgainOrg, Temp
                 
0031bd ddb6      	rcall fli2				;eeSelflevelPlimit
0031be e000
0031bf 9300 0546
0031c1 e00a
0031c2 9300 0547
0031c4 e000
0031c5 9300 0548 	b16ldi Temper, 10
0031c7 9110 0540
0031c9 9120 0541
0031cb 9130 0542
0031cd 9140 0546
0031cf 9150 0547
0031d1 9160 0548
0031d3 940e 4f3a
0031d5 9370 0660
0031d7 9380 0661
0031d9 9220 0662 	b16mul SelflevelPlimit, Temp, Temper
                 
0031db dd98      	rcall fli2				;eeAccTrimRoll
0031dc 9100 0540
0031de 9300 068a
0031e0 9100 0541
0031e2 9300 068b
0031e4 9100 0542
0031e6 9300 068c 	b16mov AccTrimRollOrg, Temp
0031e8 9160 0540
0031ea 9170 0541
0031ec 9180 0542
0031ee e002
0031ef 940e 4f2b
0031f1 9360 0540
0031f3 9370 0541
0031f5 9380 0542 	b16fdiv Temp, 2
0031f7 9100 0540
0031f9 9300 0684
0031fb 9100 0541
0031fd 9300 0685
0031ff 9100 0542
003201 9300 0686 	b16mov AccTrimRoll, Temp
                 
003203 dd70      	rcall fli2				;eeAccTrimPitch
003204 9100 0540
003206 9300 068d
003208 9100 0541
00320a 9300 068e
00320c 9100 0542
00320e 9300 068f 	b16mov AccTrimPitchOrg, Temp
003210 9160 0540
003212 9170 0541
003214 9180 0542
003216 e002
003217 940e 4f2b
003219 9360 0540
00321b 9370 0541
00321d 9380 0542 	b16fdiv Temp, 2
00321f 9100 0540
003221 9300 0687
003223 9100 0541
003225 9300 0688
003227 9100 0542
003229 9300 0689 	b16mov AccTrimPitch, Temp
                 
00322b dd48      	rcall fli2				;eeSlMixRate
00322c dd0c      	rcall TempDiv100
00322d 9100 0540
00322f 9300 065d
003231 9100 0541
003233 9300 065e
003235 9100 0542
003237 9300 065f 	b16mov SelflevelPgainRate, Temp
003239 9508      	ret
                 
                 
                 
                 	;--- Load gimbal settings from EEPROM ---
                 
                 LoadGimbalSettings:
                 
00323a ebe1
00323b e0f0      	ldz eeCamRollGain
00323c dd37      	rcall fli2
00323d 9100 0540
00323f 9300 06cf
003241 9100 0541
003243 9300 06d0
003245 9100 0542
003247 9300 06d1 	b16mov CamRollGainOrg, Temp
003249 dcdf      	rcall TempDiv16
00324a 9100 0540
00324c 9300 06b1
00324e 9100 0541
003250 9300 06b2
003252 9100 0542
003254 9300 06b3 	b16mov CamRollGain, Temp
                 
003256 dd1d      	rcall fli2				;eeCamRollOffset
003257 9100 0540
003259 9300 06b4
00325b 9100 0541
00325d 9300 06b5
00325f 9100 0542
003261 9300 06b6 	b16mov CamRollOffset, Temp
                 
003263 dd10      	rcall fli2				;eeCamPitchGain
003264 9100 0540
003266 9300 06d2
003268 9100 0541
00326a 9300 06d3
00326c 9100 0542
00326e 9300 06d4 	b16mov CamPitchGainOrg, Temp
003270 dcb8      	rcall TempDiv16
003271 9100 0540
003273 9300 06b7
003275 9100 0541
003277 9300 06b8
003279 9100 0542
00327b 9300 06b9 	b16mov CamPitchGain, Temp
                 
00327d dcf6      	rcall fli2				;eeCamPitchOffset
00327e 9100 0540
003280 9300 06ba
003282 9100 0541
003284 9300 06bb
003286 9100 0542
003288 9300 06bc 	b16mov CamPitchOffset, Temp
                 
00328a 940e 4eef 	call GetEePVariable8			;eeCamServoMixing
00328c 93a0 07a2 	sts CamServoMixing, xl
                 
00328e dce5      	rcall fli2				;eeCamRollHomePos
00328f 9100 0540
003291 9300 06c3
003293 9100 0541
003295 9300 06c4
003297 9100 0542
003299 9300 06c5 	b16mov CamRollHomePos, Temp
                 
00329b dcd8      	rcall fli2				;eeCamPitchHomePos
00329c 9100 0540
00329e 9300 06c6
0032a0 9100 0541
0032a2 9300 06c7
0032a4 9100 0542
0032a6 9300 06c8 	b16mov CamPitchHomePos, Temp
0032a8 9508      	ret
                 
                 
                 
                 	;--- Load ESC low limit setting from EEPROM ---
                 
                 LoadEscLowLimit:
                 
0032a9 e9e2
0032aa e0f0      	ldz eeEscLowLimit
0032ab dcc8      	rcall fli2
0032ac e000
0032ad 9300 0546
0032af e302
0032b0 9300 0547
0032b2 e000
0032b3 9300 0548 	b16ldi Temper, 50.0
0032b5 9110 0540
0032b7 9120 0541
0032b9 9130 0542
0032bb 9140 0546
0032bd 9150 0547
0032bf 9160 0548
0032c1 940e 4f3a
0032c3 9370 05ee
0032c5 9380 05ef
0032c7 9220 05f0 	b16mul EscLowLimit, Temp, Temper
0032c9 9508      	ret
                 
                 
                 
                 	;--- Load stick dead zone setting from EEPROM ---
                 
                 LoadStickDeadZone:
                 
0032ca e9e4
0032cb e0f0      	ldz eeStickDeadZone
0032cc dca7      	rcall fli2
0032cd 9100 0540
0032cf 9300 0606
0032d1 9100 0541
0032d3 9300 0607
0032d5 9100 0542
0032d7 9300 0608 	b16mov StickDeadZone, Temp
0032d9 9508      	ret
                 
                 
                 
                 	;--- Prepare the OutputRateBitmask and OutputTypeBitmask variables ---
                 
                 UpdateOutputTypeAndRate:
                 
0032da e0c8      	ldi yl, 8
0032db e0e0
0032dc e0f5      	ldz RamMixerTable
                 
0032dd 8105      otr1:	ldd t, z + MixvalueFlags
                 
0032de 9488      	clc
0032df fd01      	sbrc t, bMixerFlagRate
0032e0 9408      	sec
0032e1 95a7      	ror xl
                 
0032e2 9488      	clc
0032e3 fd00      	sbrc t, bMixerFlagType
0032e4 9408      	sec
0032e5 95b7      	ror xh
                 
0032e6 9638      	adiw z, 8
0032e7 95ca      	dec yl
0032e8 f7a1      	brne otr1
                 
0032e9 93a0 0768 	sts OutputRateBitmask, xl
0032eb 93b0 0769 	sts OutputTypeBitmask, xh
0032ed 9508      	ret
                 
                 
                 
                 	;--- Read the LinkRollPitch flag from EEPROM ---
                 
                 ReadLinkRollPitchFlag:
                 
0032ee eaec
0032ef e0f0      	ldz eeLinkRollPitch
0032f0 940e 4f13 	call ReadEepromP
0032f2 9300 076c 	sts flagRollPitchLink, t
0032f4 9508      	ret
                 
                 
                 
                 	;--- Read the S.Bus DG2 settings from EEPROM ---
                 
                 LoadDG2Settings:
                 
0032f5 ecee
0032f6 e0f0      	ldz eeDG2Functions
0032f7 940e 4f13 	call ReadEepromP
0032f9 9300 07d9 	sts DG2Functions, t
0032fb 9508      	ret
                 
                 .include "pieditor.asm"
                 
                 
                 
                 .def Item		= r17
                 .def Axis		= r18
                 .def ParameterIndex	= r19
                 
                 
                 
                 PiEditor:
                 
0032fc 2711      	clr Item
0032fd 2722      	clr Axis
                 
0032fe 940e 4d81 pie1:	call LcdClear6x8			;clear the LCD, select the 6x8 font and go to screen coordinates (0, 1)
                 
                 	;axis
003300 edea
003301 e6f6      	ldz pie2*2
003302 940e 4c2e 	call PrintString
003304 9100 076c
003306 2300
003307 f43a      	rvbrflagfalse flagRollPitchLink, pie16
                 
003308 3022      	cpi Axis, 2
003309 f029      	breq pie16
                 
00330a e4e0
00330b e9fc      	ldz ailele*2				;aileron and elevator linked
00330c 940e 4c2e 	call PrintString
00330e c005      	rjmp pie17
                 
00330f 2f02      pie16:	mov t, Axis
003310 e0e0
003311 e6f7      	ldz pie11*2
003312 940e 4c0f 	call PrintFromStringArray
                 
                 pie17:	;P Gain, P Limit, I Gain and I Limit
003314 e000
003315 9300 073f 	lrv X1, 0
003317 e00a
003318 9300 0740 	lrv Y1, 10
00331a 2700      	clr t
                 
00331b 930f      pie15:	push t
00331c efe8
00331d e6f6      	ldz pie10*2
00331e 940e 4c0f 	call PrintFromStringArray
003320 e20a
003321 9300 073f 	lrv X1, 42
003323 940e 4ba7 	call PrintColonAndSpace
003325 910f      	pop t
003326 930f      	push t
003327 2f30      	mov ParameterIndex, t
003328 d05a      	rcall GetParameter
003329 940e 4b88 	call PrintNumberLF
00332b e000
00332c 9300 073f 	lrv X1, 0
00332e 910f      	pop t
00332f 9503      	inc t
003330 3004      	cpi t, 4
003331 f34c      	brlt pie15
                 
                 	;footer
003332 940e 4bca 	call PrintStdFooter
                 
                 	;print selector
003334 eee4
003335 e6f6
003336 e004
003337 9f01
003338 0de0
003339 1df1      	ldzarray pie7*2, 4, Item
00333a 940e 4b0f 	call PrintSelector
                 
00333c 940e 4d2c 	call LcdUpdate
                 
00333e 940e 4ed1 	call GetButtonsBlocking
                 
003340 3008      	cpi t, 0x08		;BACK?
003341 f409      	brne Pie30
003342 9508      	ret
                 
003343 3004      pie30:	cpi t, 0x04		;PREV?
003344 f421      	brne pie31
                 
003345 951a      	dec Item
003346 f40a      	brpl pie34
                 
003347 e014      	ldi Item, 4
                 
003348 cfb5      pie34:	rjmp pie1
                 
003349 3002      pie31:	cpi t, 0x02		;NEXT?
00334a f429      	brne pie32
                 
00334b 9513      	inc Item
00334c 3015      	cpi item, 5
00334d f409      	brne pie35
                 
00334e e010      	ldi Item, 0
                 
00334f cfae      pie35:	rjmp pie1
                 
003350 3001      pie32:	cpi t, 0x01		;CHANGE?
003351 f7e9      	brne pie35
                 
003352 3010      	cpi Item, 0		;change Axis
003353 f461      	brne pie40
                 
003354 9523      	inc Axis
003355 3023      	cpi Axis, 3
003356 f409      	brne pie33
                 
003357 2722      	clr Axis
                 
003358 3021      pie33:	cpi Axis, 1
003359 f429      	brne pie36
                 
00335a 9100 076c
00335c 2300
00335d f40a      	rvbrflagfalse flagRollPitchLink, pie36
                 
00335e e022      	ldi Axis, 2
                 
00335f cf9e      pie36:	rjmp pie1
                 
003360 2f31      pie40:	mov ParameterIndex, Item;edit parameter
003361 953a      	dec ParameterIndex
003362 d020      	rcall GetParameter
003363 e0c0
003364 e0d0      	ldy 0			;lower limit
003365 e0e0
003366 e7fd      	ldz 32000		;upper limit
003367 940e 33a4 	call NumberEdit
003369 2da0      	mov xl, r0
00336a 2db1      	mov xh, r1
00336b d020      	rcall StoreParameter
00336c cf91      	rjmp pie1
                 
                 
                 
00336d 7841
00336e 7369
00336f 2020
003370 3a20
003371 0020      pie2:	.db "Axis   : ", 0
                 
003372 0034
003373 0967      pie7:	.db 52, 0, 103, 9
003374 0934
003375 124f      	.db 52, 9, 79, 18
003376 1234
003377 1b4f      	.db 52, 18, 79, 27
003378 1b34
003379 244f      	.db 52, 27, 79, 36
00337a 2434
00337b 2d4f      	.db 52, 36, 79, 45
                 
00337c 9c78
00337d 9c80
00337e 9c88
00337f 9c90      pie10:	.dw pgain*2, plimit*2, igain*2, ilimit*2
003380 9c48
003381 9c50
003382 9c5a      pie11:	.dw ail*2, ele*2, rudd*2
                 
                 
                 GetParameter:
003383 d011      	rcall paradd
003384 940e 4f13 	call ReadEepromP
003386 2fa0      	mov xl, t
003387 9631      	adiw z, 1
003388 940e 4f13 	call ReadEepromP
00338a 2fb0      	mov xh, t
00338b 9508      	ret
                 
                 StoreParameter:
00338c d008      	rcall paradd
00338d 2f0a      	mov t, xl
00338e 940e 4f1d 	call WriteEepromP
003390 9631      	adiw z, 1
003391 2f0b      	mov t, xh
003392 940e 4f1d 	call WriteEepromP
003394 9508      	ret
                 
003395 e4e4
003396 e0f0      paradd:	ldz EeParameterTable	;Z = *EeParameterTable + Axis * 8 + ParameterIndex * 2
003397 2f02      	mov t, Axis
003398 0f00      	lsl t
003399 0f00      	lsl t
00339a 0f00      	lsl t
00339b 0fe0      	add zl, t
00339c 2700      	clr t
00339d 1ff0      	adc zh, t
00339e 2f03      	mov t, ParameterIndex
00339f 0f00      	lsl t
0033a0 0fe0      	add zl, t
0033a1 2700      	clr t
0033a2 1ff0      	adc zh, t
                 	
0033a3 9508      	ret
                 	
                 
                 
                 .undef Item
                 .undef Axis
                 .undef ParameterIndex
                 .include "numedit.asm"
                 
                 .def 	TypRate = r17
                 .def	Counter = r18
                 
                 NumberEdit:
                 
0033a4 922f
0033a5 923f
0033a6 924f
0033a7 925f
0033a8 926f
0033a9 927f
0033aa 928f
0033ab 931f
0033ac 932f
0033ad 933f
0033ae 934f
0033af 935f
0033b0 936f
0033b1 937f
0033b2 938f
0033b3 939f
0033b4 93af
0033b5 93bf
0033b6 93cf
0033b7 93df
0033b8 93ef
0033b9 93ff      	PushAll
                 
0033ba e011      	ldi TypRate, 1
                 
                 	;print new footer
                 	
0033bb e002
0033bc 9300 0743 	lrv PixelType, 2
0033be e001
0033bf 9300 0744 	lrv FontSelector, f6x8
                 
0033c1 e000
0033c2 9300 073f 	lrv X1,0
0033c4 e308
0033c5 9300 0740 	lrv Y1,56
0033c7 e70f
0033c8 9300 0741 	lrv X2,127
0033ca e400
0033cb 9300 0742 	lrv Y2,64
0033cd 940e 4afd 	call HilightRectangle
                 
0033cf e001
0033d0 9300 0743 	lrv PixelType, 1
0033d2 e000
0033d3 9300 073f 	lrv X1, 0
0033d5 e309
0033d6 9300 0740 	lrv Y1, 57
0033d8 93ef
0033d9 93ff
0033da ede4
0033db e6f8
0033dc 940e 4c2e
0033de 91ff
0033df 91ef      	mPrintString num1	;macro cannot be replaced
                 
                 	;make window
                 .equ	wx1 = 30
                 .equ	wy1 = 19
                 .equ	wx2 = 98
                 .equ	wy2 = 42
                 
0033e0 e10e
0033e1 9300 073f num2:	lrv X1,wx1
0033e3 e103
0033e4 9300 0740 	lrv Y1,wy1
0033e6 e602
0033e7 9300 0741 	lrv X2,wx2
0033e9 e20a
0033ea 9300 0742 	lrv Y2,wy2
0033ec e002
0033ed 9300 0743 	lrv PixelType, 2
0033ef 940e 4afd 	call HilightRectangle
0033f1 e10e
0033f2 9300 073f 	lrv X1,wx1
0033f4 e103
0033f5 9300 0740 	lrv Y1,wy1
0033f7 e602
0033f8 9300 0741 	lrv X2,wx2
0033fa e20a
0033fb 9300 0742 	lrv Y2,wy2
0033fd e001
0033fe 9300 0743 	lrv PixelType, 1
003400 940e 4b20 	call Rectangle
003402 e10f
003403 9300 073f 	lrv X1,wx1+1
003405 e104
003406 9300 0740 	lrv Y1,wy1+1
003408 e601
003409 9300 0741 	lrv X2,wx2-1
00340b e209
00340c 9300 0742 	lrv Y2,wy2-1
00340e 940e 4b20 	call Rectangle
                 
                 	;print number
003410 e202
003411 9300 073f 	lrv X1, 34
003413 e108
003414 9300 0740 	lrv Y1, 24
003416 e003
003417 9300 0744 	lrv FontSelector, f12x16
003419 940e 4b47 	call Print16Signed
                 
00341b 940e 4d2c 	call LcdUpdate
                 
00341d e12e      	ldi Counter, 30
                 
00341e 940e 4eaf num3:	call GetButtons		;wait until button relesaed or time out
003420 3000      	cpi t, 0
003421 f011      	breq num4
                 
003422 952a      	dec Counter
003423 f7d1      	brne num3
                 
003424 3000      num4:	cpi t, 0
003425 f409      	brne num11
                 
003426 e011      	ldi TypRate, 1
                 
003427 940e 4eaf num11:	call GetButtons		;wait until button pressed
003429 3000      	cpi t, 0x00
00342a f3c9      	breq num4
                 
00342b 940e 1dd3 	call Beep
                 
00342d 3008      	cpi t, 0x08		;CLR?
00342e f439      	brne num5
                 
00342f e0a0
003430 e0b0      	ldx 0
003431 17ac      	cp xl, yl		;check if zero is below minimum value (this fixes a bug in the original firmware)
003432 07bd      	cpc xh, yh
003433 f40c      	brge num13
                 
003434 01de      	movw x, y		;set to lowest value instead of zero
                 
003435 cfaa      num13:	rjmp num2
                 
003436 3004      num5:	cpi t, 0x04		;DOWN?
003437 f461      	brne num7
                 
003438 1ba1      	sub xl, TypRate
003439 2700      	clr t
00343a 0bb0      	sbc xh, t
00343b 17ac      	cp xl, yl
00343c 07bd      	cpc xh, yh
00343d f40c      	brge num6
                 
00343e 01de      	movw x, y
                 
00343f 9513      num6:	inc TypRate
003440 3f1f      	cpi TypRate, 255
003441 f008      	brlo num12
                 
003442 ef1f      	ldi TypRate, 255
                 
003443 cf9c      num12:	rjmp num2
                 
003444 3002      num7:	cpi t, 0x02		;UP?
003445 f441      	brne num9
                 
003446 0fa1      	add xl, TypRate
003447 2700      	clr t
003448 1fb0      	adc xh, t
003449 17ae      	cp xl, zl
00344a 07bf      	cpc xh, zh
00344b f00c      	brlt num8
                 
00344c 01df      	movw x, z
                 
00344d cff1      num8:	rjmp num6
                 
00344e 3001      num9:	cpi t, 0x01		;DONE?
00344f f4c9      	brne num10
                 
003450 2e0a      	mov r0, xl
003451 2e1b      	mov r1, xh	
                 
003452 91ff
003453 91ef
003454 91df
003455 91cf
003456 91bf
003457 91af
003458 919f
003459 918f
00345a 917f
00345b 916f
00345c 915f
00345d 914f
00345e 913f
00345f 912f
003460 911f
003461 908f
003462 907f
003463 906f
003464 905f
003465 904f
003466 903f
003467 902f      	PopAll
003468 9508      	ret
                 
003469 cf76      num10:	rjmp num2
                 
                 .undef TypRate
                 .undef Counter
                 
                 
00346a 4c43
00346b 2052
00346c 4420
00346d 574f
00346e 204e
00346f 2020
003470 5055
003471 2020
003472 4420
003473 4e4f
003474 0045      num1:	.db "CLR  DOWN   UP   DONE", 0
                 
                 .include "mixedit.asm"
                 
                 .def Item		= r17
                 .def Channel		= r18
                 .def MixvalueIndex	= r19
                 
                 MixerEditor:
                 
003475 ebef
003476 e0f0      	ldz eeMotorLayoutOK	;refuse access if no motor layout is loaded
003477 940e 4f15 	call ReadEeprom
003479 2300
00347a f022      	brflagtrue t, med2
                 
00347b eeec
00347c e6fa      	ldz nadtxt1*2
00347d d0fc      	rcall ShowNoAccessDlg
00347e 9508      	ret
                 
00347f 9100 0803 med2:	lds t, UserProfile	;refuse access unless user profile #1 is selected
003481 2300      	tst t
003482 f021      	breq med3
                 
003483 efe0
003484 e6fa      	ldz nadtxt2*2
003485 d0f4      	rcall ShowNoAccessDlg
003486 9508      	ret
                 
003487 e010      med3:	ldi Item, 0
003488 2722      	clr Channel	
                 
003489 940e 4d81 med1:	call LcdClear6x8
                 
                 	;channel
00348b e606
00348c 9300 073f 	lrv X1,102
00348e e5ec
00348f e6fa      	ldz med7*2
003490 940e 4c2e 	call PrintString
                 
003492 2fa2      	mov xl, channel
003493 95a3      	inc xl
003494 27bb      	clr xh
003495 940e 4b47 	call Print16Signed 
                 
                 	;Throttle, Aileron, Elevator, Rudder and Offset (with values)
003497 e000
003498 9300 073f 	lrv X1, 0
00349a e001
00349b 9300 0740 	lrv Y1, 1
00349d 2700      	clr t
                 
00349e 930f      med50:	push t
00349f e8e0
0034a0 e6fa      	ldz med10*2
0034a1 940e 4c0f 	call PrintFromStringArray
0034a3 910f      	pop t
0034a4 930f      	push t
0034a5 2f30      	mov MixvalueIndex, t
0034a6 d0ea      	rcall GetMixervalue
0034a7 d0fd      	rcall extend
0034a8 e300
0034a9 9300 073f 	lrv X1, 48
0034ab 940e 4ba7 	call PrintColonAndSpace
0034ad 940e 4b88 	call PrintNumberLF
0034af e000
0034b0 9300 073f 	lrv X1, 0
0034b2 910f      	pop t
0034b3 9503      	inc t
0034b4 3005      	cpi t, 5
0034b5 f344      	brlt med50
                 
                 	;Type
0034b6 e000
0034b7 9300 073f 	lrv X1, 0
0034b9 e6e0
0034ba e6fa      	ldz med13*2
0034bb 940e 4c2e 	call PrintString
0034bd e035      	ldi MixvalueIndex, 5
0034be d0d2      	rcall GetMixervalue	;get value with bit flags for type and rate
0034bf 930f      	push t
0034c0 7001      	andi t, 0x01
0034c1 e8ea
0034c2 e6fa      	ldz type*2
0034c3 940e 4c0f 	call PrintFromStringArray
                 
                 	;Rate
0034c5 e408
0034c6 9300 073f 	lrv X1, 72
0034c8 e6e6
0034c9 e6fa      	ldz med14*2
0034ca 940e 4c2e 	call PrintString
0034cc 910f      	pop t
0034cd 9506      	lsr t
0034ce 7001      	andi t, 0x01
0034cf e8ee
0034d0 e6fa      	ldz rate*2
0034d1 940e 4c0f 	call PrintFromStringArray
                 
                 	;footer
0034d3 940e 4bca 	call PrintStdFooter
                 
                 	;print selector
0034d5 e3ec
0034d6 e6fa
0034d7 e004
0034d8 9f01
0034d9 0de0
0034da 1df1      	ldzarray selx*2, 4, Item
0034db 940e 4b0f 	call PrintSelector
                 
0034dd 940e 4d2c 	call LcdUpdate
                 
0034df 940e 4ed1 	call GetButtonsBlocking
                 
0034e1 3008      	cpi t, 0x08		;BACK?
0034e2 f409      	brne med30
                 
0034e3 9508      	ret
                 
0034e4 3004      med30:	cpi t, 0x04		;PREV?
0034e5 f419      	brne med31
                 
0034e6 951a      	dec Item
0034e7 7017      	andi item, 0x07
0034e8 cfa0      	rjmp med1
                 
0034e9 3002      med31:	cpi t, 0x02		;NEXT?
0034ea f419      	brne med32
                 
0034eb 9513      	inc Item
0034ec 7017      	andi Item, 0x07
0034ed cf9b      	rjmp med1
                 
0034ee 3001      med32:	cpi t, 0x01		;CHANGE?
0034ef f569      	brne med33
                 
0034f0 3010      	cpi Item, 0		;change channel
0034f1 f419      	brne med40
                 
0034f2 9523      	inc Channel
0034f3 7027      	andi Channel, 0x07
0034f4 cf94      	rjmp med1
                 
0034f5 3011      med40:	cpi Item, 1		;edit mixer value
0034f6 f078      	brlo med41
                 
0034f7 3016      	cpi Item, 6
0034f8 f468      	brsh med41
                 
0034f9 2f31      	mov MixvalueIndex, Item
0034fa 953a      	dec MixvalueIndex
0034fb d095      	rcall GetMixerValue
0034fc d0a8      	rcall Extend
0034fd e8c1
0034fe efdf      	ldy -127		;lower limit
0034ff e7ef
003500 e0f0      	ldz 127			;upper limit
003501 940e 33a4 	call NumberEdit
003503 2d00      	mov t, r0
003504 d08f      	rcall StoreMixerValue
003505 cf83      	rjmp med1
                 
003506 3016      med41:	cpi Item, 6		;toggle Type
003507 f461      	brne med42
                 
003508 940e 4126 	call StopPwmQuiet	;stop PWM output when output type is toggled
00350a e035      	ldi MixvalueIndex,5
00350b d085      	rcall GetMixervalue
00350c e0a1      	ldi xl, 1 << bMixerFlagType
00350d 270a      	eor t, xl
00350e fd00      	sbrc t, bMixerFlagType	;set rate to high if selected type is ESC
00350f 6002      	ori t, 1 << bMixerFlagRate
003510 d083      	rcall StoreMixervalue
003511 940e 4112 	call StartPwmQuiet	;enable PWM output again
003513 cf75      	rjmp med1
                 
003514 3017      med42:	cpi Item, 7		;toggle Rate
003515 f439      	brne med33
                 
003516 e035      	ldi MixvalueIndex,5
003517 d079      	rcall GetMixervalue
003518 e0a2      	ldi xl, 1 << bMixerFlagRate
003519 270a      	eor t, xl
00351a fd00      	sbrc t, bMixerFlagType	;set rate to high if selected type is ESC
00351b 6002      	ori t, 1 << bMixerFlagRate
00351c d077      	rcall StoreMixervalue
                 
00351d cf6b      med33:	rjmp med1
                 
                 
                 
                 
00351e 0078
00351f 097f      selx:	.db 120, 0, 127, 9
003520 003a
003521 0956      	.db 58, 0, 86, 9
003522 093a
003523 1256      	.db 58, 9, 86, 18
003524 123a
003525 1b56      	.db 58, 18, 86, 27
003526 1b3a
003527 2456      	.db 58, 27, 86, 36
003528 243a
003529 2d56      	.db 58, 36, 86, 45
00352a 2d1d
00352b 363d      	.db 29, 45, 61, 54
00352c 2d66
00352d 367e      	.db 102, 45, 126, 54
                 
                 
                 
                 
00352e 6843
00352f 003a      med7:	.db "Ch:",0
003530 7954
003531 6570
003532 003a      med13:	.db "Type:",0
003533 6152
003534 6574
003535 003a      med14:	.db "Rate:",0
003536 6553
003537 7672
003538 006f      med16:	.db "Servo",0
003539 5345
00353a 0043      med17:	.db "ESC",0
00353b 6948
00353c 6867
00353d 0000      med18:	.db "High",0,0
00353e 6f4c
00353f 0077      med19:	.db "Low",0
                 
                 
003540 9c62
003541 9c48
003542 9c50
003543 9c5a
003544 9c70      med10:	.dw thr*2, ail*2, ele*2, rudd*2, ofs*2
003545 6a6c
003546 6a72      type:	.dw med16*2, med17*2			;servo, ESC
003547 6a7c
003548 6a76      rate:	.dw med19*2, med18*2			;low, high
                 
003549 4f4e
00354a 4120
00354b 4343
00354c 5345
00354d 0053      nad1:	.db "NO ACCESS", 0
00354e 2041
00354f 6f4d
003550 6f74
003551 2072
003552 614c
003553 6f79
003554 7475
003555 6d20
003556 7375
003557 0074      nad3:	.db "A Motor Layout must", 0
003558 6562
003559 6c20
00355a 616f
00355b 6564
00355c 2064
00355d 6966
00355e 7372
00355f 2e74
003560 0000      nad4:	.db "be loaded first.", 0, 0
                 
003561 7355
003562 7265
003563 7020
003564 6f72
003565 6966
003566 656c
003567 2320
003568 2031
003569 756d
00356a 7473
00356b 0000      nad5:	.db "User profile #1 must", 0, 0
00356c 6562
00356d 7320
00356e 6c65
00356f 6365
003570 6574
003571 2064
003572 6966
003573 7372
003574 2e74
003575 0000      nad6:	.db "be selected first.", 0, 0
                 
003576 6a9c
003577 6ab0      nadtxt1:.dw nad3*2, nad4*2
003578 6ac2
003579 6ad8      nadtxt2:.dw nad5*2, nad6*2
                 
                 
                 
                 	;--- Show the "No access" dialogue ---
                 
                 ShowNoAccessDlg:
                 
00357a 93ef
00357b 93ff      	pushz				;register Z (input parameter) points to the string array to be used
                 
00357c 940e 4d8f 	call LcdClear12x16
                 
00357e e00a
00357f 9300 073f 	lrv X1, 10			;header
003581 e9e2
003582 e6fa      	ldz nad1*2
003583 940e 4b90 	call PrintHeader
                 
003585 e002      	ldi t, 2			;print two message lines
003586 91ff
003587 91ef      	popz
003588 940e 4c18 	call PrintStringArray
                 
                 	;footer
00358a 940e 4bf3 	call PrintOkFooter
                 
00358c 940e 4d2c 	call LcdUpdate
                 
00358e 940e 4ed8 	call WaitForOkButton
003590 9508      	ret
                 
                 
                 
                 	;---
                 
                 GetMixerValue:
                 
003591 d007      	rcall mixc
003592 940c 4f15 	jmp ReadEeprom			;for user profile #1 only
                 
                 
                 
                 	;---
                 
                 StoreMixerValue:
                 
003594 930f      	push t
003595 d003      	rcall mixc
003596 910f      	pop t
003597 940c 4f1f 	jmp WriteEeprom			;for user profile #1 only
                 
                 
                 
                 	;---
                 
                 Mixc:
                 
003599 e0e4
00359a e0f0      	ldz EeMixerTable		;Z = *EeMixerTable + Channel * 8 + MixvalueIndex
00359b 2f02      	mov t, Channel
00359c 0f00      	lsl t
00359d 0f00      	lsl t
00359e 0f00      	lsl t
00359f 0fe0      	add zl, t
0035a0 2700      	clr t
0035a1 1ff0      	adc zh, t
0035a2 0fe3      	add zl, MixvalueIndex
0035a3 1ff0      	adc zh, t
0035a4 9508      	ret
                 
                 
                 
                 	;---
                 
                 Extend:
                 
0035a5 2fa0      	mov xl, t			;extend sign
0035a6 27bb      	clr xh
0035a7 23aa      	tst xl
0035a8 f40a      	brpl med12
0035a9 efbf      	ser xh
0035aa 9508      med12:	ret
                 	
                 
                 .undef Item
                 .undef Channel
                 .undef MixvalueIndex
                 
                 .include "mixer2.asm"
                 
                 
                 
                 Mixer:					;mixer ratio at 100% mixvalue is 0.390625. To give a full trottle signal the input must be 12800.0
                 
0035ab e000
0035ac 9300 060c
0035ae e302
0035af 9300 060d
0035b1 e000
0035b2 9300 060e 	b16ldi MixValueFactor, 50	;scale Mixvalue from -100 100 to -5000 5000 
                 
0035b4 e0e0
0035b5 e0f5      	ldz RamMixerTable + 0		;channel 1
0035b6 d0d6      	rcall mix1
0035b7 9100 0609
0035b9 9300 063f
0035bb 9100 060a
0035bd 9300 0640
0035bf 9100 060b
0035c1 9300 0641 	b16mov Offset1, Mixvalue
0035c3 9100 0540
0035c5 9300 060f
0035c7 9100 0541
0035c9 9300 0610
0035cb 9100 0542
0035cd 9300 0611 	b16mov Out1, Temp
                 
0035cf e0e8
0035d0 e0f5      	ldz RamMixerTable + 8		;channel 2
0035d1 d0bb      	rcall mix1
0035d2 9100 0609
0035d4 9300 0642
0035d6 9100 060a
0035d8 9300 0643
0035da 9100 060b
0035dc 9300 0644 	b16mov Offset2, Mixvalue
0035de 9100 0540
0035e0 9300 0612
0035e2 9100 0541
0035e4 9300 0613
0035e6 9100 0542
0035e8 9300 0614 	b16mov Out2, Temp
                 
0035ea e1e0
0035eb e0f5      	ldz RamMixerTable + 16		;channel 3
0035ec d0a0      	rcall mix1
0035ed 9100 0609
0035ef 9300 0645
0035f1 9100 060a
0035f3 9300 0646
0035f5 9100 060b
0035f7 9300 0647 	b16mov Offset3, Mixvalue
0035f9 9100 0540
0035fb 9300 0615
0035fd 9100 0541
0035ff 9300 0616
003601 9100 0542
003603 9300 0617 	b16mov Out3, Temp
                 
003605 e1e8
003606 e0f5      	ldz RamMixerTable + 24		;channel 4
003607 d085      	rcall mix1
003608 9100 0609
00360a 9300 0648
00360c 9100 060a
00360e 9300 0649
003610 9100 060b
003612 9300 064a 	b16mov Offset4, Mixvalue
003614 9100 0540
003616 9300 0618
003618 9100 0541
00361a 9300 0619
00361c 9100 0542
00361e 9300 061a 	b16mov Out4, Temp
                 
003620 e2e0
003621 e0f5      	ldz RamMixerTable + 32		;channel 5
003622 d06a      	rcall mix1
003623 9100 0609
003625 9300 064b
003627 9100 060a
003629 9300 064c
00362b 9100 060b
00362d 9300 064d 	b16mov Offset5, Mixvalue
00362f 9100 0540
003631 9300 061b
003633 9100 0541
003635 9300 061c
003637 9100 0542
003639 9300 061d 	b16mov Out5, Temp
                 
00363b e2e8
00363c e0f5      	ldz RamMixerTable + 40		;channel 6
00363d d04f      	rcall mix1
00363e 9100 0609
003640 9300 064e
003642 9100 060a
003644 9300 064f
003646 9100 060b
003648 9300 0650 	b16mov Offset6, Mixvalue
00364a 9100 0540
00364c 9300 061e
00364e 9100 0541
003650 9300 061f
003652 9100 0542
003654 9300 0620 	b16mov Out6, Temp
                 
003656 e3e0
003657 e0f5      	ldz RamMixerTable + 48		;channel 7
003658 d034      	rcall mix1
003659 9100 0609
00365b 9300 0651
00365d 9100 060a
00365f 9300 0652
003661 9100 060b
003663 9300 0653 	b16mov Offset7, Mixvalue
003665 9100 0540
003667 9300 0621
003669 9100 0541
00366b 9300 0622
00366d 9100 0542
00366f 9300 0623 	b16mov Out7, Temp
                 
003671 e3e8
003672 e0f5      	ldz RamMixerTable + 56		;channel 8
003673 d019      	rcall mix1
003674 9100 0609
003676 9300 0654
003678 9100 060a
00367a 9300 0655
00367c 9100 060b
00367e 9300 0656 	b16mov Offset8, Mixvalue
003680 9100 0540
003682 9300 0624
003684 9100 0541
003686 9300 0625
003688 9100 0542
00368a 9300 0626 	b16mov Out8, Temp
                 
00368c 9508      	ret
                 
                 
                 
00368d 27dd      mix1:	clr yh
00368e 81a4      	ldd xl, Z + MixvalueOffset
00368f 27bb      	clr xh
                 
003690 23aa      	tst xl		;extend sign
003691 f412      	brpl mix2
003692 efdf      	ser yh
003693 efbf      	ser xh
                 
003694 93b0 0609
003696 93a0 060a
003698 93d0 060b mix2:	b16store MixValue
                 
00369a 9110 0609
00369c 9120 060a
00369e 9130 060b
0036a0 9140 060c
0036a2 9150 060d
0036a4 9160 060e
0036a6 940e 4f3a
0036a8 9370 0609
0036aa 9380 060a
0036ac 9220 060b 	b16mul Mixvalue, MixValue, MixValueFactor
                 	
0036ae 91b0 0609
0036b0 91a0 060a
0036b2 91d0 060b 	b16load MixValue
                 
0036b4 8100      	ldd t, Z + MixValueThrottle
0036b5 9130 0552
0036b7 9140 0553
0036b9 9150 0554
0036bb 940e 4f80 	b16mac RxThrottle
                 	 
0036bd 8101      	ldd t, Z + MixValueRoll
0036be 9130 059d
0036c0 9140 059e
0036c2 9150 059f
0036c4 940e 4f80 	b16mac CommandRoll
                 
0036c6 8102      	ldd t, Z + MixValuePitch
0036c7 9130 05a0
0036c9 9140 05a1
0036cb 9150 05a2
0036cd 940e 4f80 	b16mac CommandPitch
                 
0036cf 8103      	ldd t, Z + MixValueYaw
0036d0 9130 05a3
0036d2 9140 05a4
0036d4 9150 05a5
0036d6 940e 4f80 	b16mac CommandYaw
                 
0036d8 93b0 0540
0036da 93a0 0541
0036dc 93d0 0542 	b16store Temp
0036de 9508      	ret
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 .include "imu.asm"
                 
                 Imu:	;--- SL mixing ---
                 
0036df 9100 077c
0036e1 2300
0036e2 f00a      	rvbrflagtrue flagSlStickMixing, im50		;skip this section if SL Stick Mixing is off
0036e3 c0bd      	rjmp im55
                 
0036e4 e000
0036e5 9300 0540
0036e7 9300 0541
0036e9 9300 0542 im50:	b16clr Temp					;is the roll stick value positive?
0036eb 9100 054c
0036ed 9300 0546
0036ef 9100 054d
0036f1 9300 0547
0036f3 9100 054e
0036f5 9300 0548 	b16mov Temper, RxRoll
0036f7 9130 0546
0036f9 9140 0547
0036fb 9150 0548
0036fd 9160 0540
0036ff 9170 0541
003701 9180 0542
003703 1758
003704 0747
003705 0736      	b16cmp Temper, Temp
003706 f494      	brge im51
                 
003707 9160 0546
003709 9170 0547
00370b 9180 0548
00370d 2755
00370e 2744
00370f 2733
003710 1b58
003711 0b47
003712 0b36
003713 9330 0546
003715 9340 0547
003717 9350 0548 	b16neg Temper					;no, make it positive
                 
003719 9130 054f
00371b 9140 0550
00371d 9150 0551
00371f 9160 0540
003721 9170 0541
003723 9180 0542
003725 1758
003726 0747
003727 0736      im51:	b16cmp RxPitch, Temp				;is the pitch stick value positive?
003728 f06c      	brlt im52
                 
003729 9100 054f
00372b 9300 0540
00372d 9100 0550
00372f 9300 0541
003731 9100 0551
003733 9300 0542 	b16mov Temp, RxPitch				;yes
003735 c01e      	rjmp im53
                 
003736 9100 054f
003738 9300 0540
00373a 9100 0550
00373c 9300 0541
00373e 9100 0551
003740 9300 0542 im52:	b16mov Temp, RxPitch				;no, make it positive
003742 9160 0540
003744 9170 0541
003746 9180 0542
003748 2755
003749 2744
00374a 2733
00374b 1b58
00374c 0b47
00374d 0b36
00374e 9330 0540
003750 9340 0541
003752 9350 0542 	b16neg Temp
                 
003754 9130 0546
003756 9140 0547
003758 9150 0548
00375a 9160 0540
00375c 9170 0541
00375e 9180 0542
003760 1758
003761 0747
003762 0736      im53:	b16cmp Temper, Temp				;compare the absolute roll and pitch values
003763 f464      	brge im54
                 	
003764 9100 0540
003766 9300 0546
003768 9100 0541
00376a 9300 0547
00376c 9100 0542
00376e 9300 0548 	b16mov Temper, Temp				;SL P gain will be reduced based on the highest value
003770 9110 0546
003772 9120 0547
003774 9130 0548
003776 9140 065d
003778 9150 065e
00377a 9160 065f
00377c 940e 4f3a
00377e 9370 0540
003780 9380 0541
003782 9220 0542 im54:	b16mul Temp, Temper, SelflevelPgainRate
003784 9130 065a
003786 9140 065b
003788 9150 065c
00378a 9160 0540
00378c 9170 0541
00378e 9180 0542
003790 1b58
003791 0b47
003792 0b36
003793 9330 0657
003795 9340 0658
003797 9350 0659 	b16sub SelfLevelPgain, SelfLevelPgainOrg, Temp
003799 f43c      	brge im55
                 
00379a e000
00379b 9300 0657
00379d 9300 0658
00379f 9300 0659 	b16clr SelfLevelPgain				;cannot use negative gain values
                 im55:
                 
                 
                 	;--- Get sensor data ---
                 
0037a1 940e 479b 	call ReadSensors
                 
                 
                 	;--- ACC trim ---
                 
0037a3 9130 057c
0037a5 9140 057d
0037a7 9150 057e
0037a9 9160 0687
0037ab 9170 0688
0037ad 9180 0689
0037af 0f58
0037b0 1f47
0037b1 1f36
0037b2 9330 057c
0037b4 9340 057d
0037b6 9350 057e 	b16add AccX, AccX, AccTrimPitch			;add trim
0037b8 9130 057f
0037ba 9140 0580
0037bc 9150 0581
0037be 9160 0684
0037c0 9170 0685
0037c2 9180 0686
0037c4 0f58
0037c5 1f47
0037c6 1f36
0037c7 9330 057f
0037c9 9340 0580
0037cb 9350 0581 	b16add AccY, AccY, AccTrimRoll
                 
                 
                 	;SF LP filter the accelerometers.  Acc SW Filter / 256 = 8 / 256 = 0.03125 as default
0037cd 9130 057c
0037cf 9140 057d
0037d1 9150 057e
0037d3 9160 06a8
0037d5 9170 06a9
0037d7 9180 06aa
0037d9 1b58
0037da 0b47
0037db 0b36
0037dc 9330 05af
0037de 9340 05b0
0037e0 9350 05b1 	b16sub Error, AccX, AccXfilter
0037e2 9110 05af
0037e4 9120 05b0
0037e6 9130 05b1
0037e8 9140 0666
0037ea 9150 0667
0037ec 9160 0668
0037ee 940e 4f3a
0037f0 9370 05af
0037f2 9380 05b0
0037f4 9220 05b1 	b16mul Error, Error, AccSWFilter
0037f6 9130 06a8
0037f8 9140 06a9
0037fa 9150 06aa
0037fc 9160 05af
0037fe 9170 05b0
003800 9180 05b1
003802 0f58
003803 1f47
003804 1f36
003805 9330 06a8
003807 9340 06a9
003809 9350 06aa 	b16add AccXfilter, AccXfilter, Error
                 
00380b 9130 057f
00380d 9140 0580
00380f 9150 0581
003811 9160 06ab
003813 9170 06ac
003815 9180 06ad
003817 1b58
003818 0b47
003819 0b36
00381a 9330 05af
00381c 9340 05b0
00381e 9350 05b1 	b16sub Error, AccY, AccYfilter
003820 9110 05af
003822 9120 05b0
003824 9130 05b1
003826 9140 0666
003828 9150 0667
00382a 9160 0668
00382c 940e 4f3a
00382e 9370 05af
003830 9380 05b0
003832 9220 05b1 	b16mul Error, Error, AccSWFilter
003834 9130 06ab
003836 9140 06ac
003838 9150 06ad
00383a 9160 05af
00383c 9170 05b0
00383e 9180 05b1
003840 0f58
003841 1f47
003842 1f36
003843 9330 06ab
003845 9340 06ac
003847 9350 06ad 	b16add AccYfilter, AccYfilter, Error
                 
003849 9130 0582
00384b 9140 0583
00384d 9150 0584
00384f 9160 06ae
003851 9170 06af
003853 9180 06b0
003855 1b58
003856 0b47
003857 0b36
003858 9330 05af
00385a 9340 05b0
00385c 9350 05b1 	b16sub Error, AccZ, AccZfilter
00385e 9110 05af
003860 9120 05b0
003862 9130 05b1
003864 9140 0666
003866 9150 0667
003868 9160 0668
00386a 940e 4f3a
00386c 9370 05af
00386e 9380 05b0
003870 9220 05b1 	b16mul Error, Error, AccSWFilter
003872 9130 06ae
003874 9140 06af
003876 9150 06b0
003878 9160 05af
00387a 9170 05b0
00387c 9180 05b1
00387e 0f58
00387f 1f47
003880 1f36
003881 9330 06ae
003883 9340 06af
003885 9350 06b0 	b16add AccZfilter, AccZfilter, Error
                 
                 
                 	;---  Calculate tilt angle with the acc. (this approximation is good to about 20 degrees) ---
                 
003887 9110 06ab
003889 9120 06ac
00388b 9130 06ad
00388d 9140 06db
00388f 9150 06dc
003891 9160 06dd
003893 940e 4f3a
003895 9370 0669
003897 9380 066a
003899 9220 066b 	b16mul AccAngleRoll, AccYfilter, TiltAngMult
00389b 9110 06a8
00389d 9120 06a9
00389f 9130 06aa
0038a1 9140 06db
0038a3 9150 06dc
0038a5 9160 06dd
0038a7 940e 4f3a
0038a9 9370 066c
0038ab 9380 066d
0038ad 9220 066e 	b16mul AccAnglePitch, AccXfilter, TiltAngMult
                 
                 
                 	;--- Code to change values of GyroRoll, GyroPitch and GyroYaw instead of changing PI gains and stick scaling ---
                 
0038af 9100 073c 	lds t, MpuGyroCfg
0038b1 3000      	cpi t, MpuGyro250
0038b2 f571      	brne im20
                 
0038b3 9160 0564
0038b5 9170 0565
0038b7 9180 0566
0038b9 e001
0038ba 940e 4f2b
0038bc 9360 0564
0038be 9370 0565
0038c0 9380 0566 	b16fdiv GyroRoll, 1				;250 deg/s
0038c2 9160 0567
0038c4 9170 0568
0038c6 9180 0569
0038c8 e001
0038c9 940e 4f2b
0038cb 9360 0567
0038cd 9370 0568
0038cf 9380 0569 	b16fdiv GyroPitch, 1
0038d1 9160 056a
0038d3 9170 056b
0038d5 9180 056c
0038d7 e001
0038d8 940e 4f2b
0038da 9360 056a
0038dc 9370 056b
0038de 9380 056c 	b16fdiv GyroYaw, 1
0038e0 c05f      	rjmp im25
                 
0038e1 3100      im20:	cpi t, MpuGyro1000
0038e2 f571      	brne im21
                 
0038e3 9160 0564
0038e5 9170 0565
0038e7 9180 0566
0038e9 e001
0038ea 940e 4f34
0038ec 9360 0564
0038ee 9370 0565
0038f0 9380 0566 	b16fmul GyroRoll, 1				;1000 deg/s
0038f2 9160 0567
0038f4 9170 0568
0038f6 9180 0569
0038f8 e001
0038f9 940e 4f34
0038fb 9360 0567
0038fd 9370 0568
0038ff 9380 0569 	b16fmul GyroPitch, 1
003901 9160 056a
003903 9170 056b
003905 9180 056c
003907 e001
003908 940e 4f34
00390a 9360 056a
00390c 9370 056b
00390e 9380 056c 	b16fmul GyroYaw, 1
003910 c02f      	rjmp im25
                 
003911 3108      im21:	cpi t, MpuGyro2000
003912 f569      	brne im25
                 
003913 9160 0564
003915 9170 0565
003917 9180 0566
003919 e002
00391a 940e 4f34
00391c 9360 0564
00391e 9370 0565
003920 9380 0566 	b16fmul GyroRoll, 2				;2000 deg/s
003922 9160 0567
003924 9170 0568
003926 9180 0569
003928 e002
003929 940e 4f34
00392b 9360 0567
00392d 9370 0568
00392f 9380 0569 	b16fmul GyroPitch, 2
003931 9160 056a
003933 9170 056b
003935 9180 056c
003937 e002
003938 940e 4f34
00393a 9360 056a
00393c 9370 056b
00393e 9380 056c 	b16fmul GyroYaw, 2
                 
                 im25:
                 
                 	;--- Add correction data to gyro inputs based on difference between Euler angles and acc angles ---
                 
003940 9100 0564
003942 9300 0576
003944 9100 0565
003946 9300 0577
003948 9100 0566
00394a 9300 0578 	b16mov GyroRollVC, GyroRoll			;fork gyrovalues to be used in 3D vector calc.
00394c 9100 0567
00394e 9300 0579
003950 9100 0568
003952 9300 057a
003954 9100 0569
003956 9300 057b 	b16mov GyroPitchVC, GyroPitch
                 
003958 e000
003959 9300 0540
00395b e104
00395c 9300 0541
00395e e000
00395f 9300 0542 	b16ldi Temp, 20					;skip correction at angles greater than +-20
003961 9130 066c
003963 9140 066d
003965 9150 066e
003967 9160 0540
003969 9170 0541
00396b 9180 0542
00396d 1758
00396e 0747
00396f 0736      	b16cmp AccAnglePitch, Temp
003970 f00c
003971 c0f7      	longbrge im41
003972 9130 0669
003974 9140 066a
003976 9150 066b
003978 9160 0540
00397a 9170 0541
00397c 9180 0542
00397e 1758
00397f 0747
003980 0736      	b16cmp AccAngleRoll, Temp
003981 f00c
003982 c0e6      	longbrge im41
                 
003983 9160 0540
003985 9170 0541
003987 9180 0542
003989 2755
00398a 2744
00398b 2733
00398c 1b58
00398d 0b47
00398e 0b36
00398f 9330 0540
003991 9340 0541
003993 9350 0542 	b16neg Temp
003995 9130 066c
003997 9140 066d
003999 9150 066e
00399b 9160 0540
00399d 9170 0541
00399f 9180 0542
0039a1 1758
0039a2 0747
0039a3 0736      	b16cmp AccAnglePitch, Temp
0039a4 f40c
0039a5 c0c3      	longbrlt im41
0039a6 9130 0669
0039a8 9140 066a
0039aa 9150 066b
0039ac 9160 0540
0039ae 9170 0541
0039b0 9180 0542
0039b2 1758
0039b3 0747
0039b4 0736      	b16cmp AccAngleRoll, Temp
0039b5 f40c
0039b6 c0b2      	longbrlt im41
                 
0039b7 9100 06d8
0039b9 9300 0540
0039bb 9100 06d9
0039bd 9300 0541
0039bf 9100 06da
0039c1 9300 0542 	b16mov Temp, AccZTest
0039c3 9130 06ae
0039c5 9140 06af
0039c7 9150 06b0
0039c9 9160 0540
0039cb 9170 0541
0039cd 9180 0542
0039cf 1758
0039d0 0747
0039d1 0736      	b16cmp AccZfilter, Temp				;skip correction if vertical accelleration is outside 0.5 to 1.5 G
0039d2 f00c
0039d3 c095      	longbrge im41					; 2g = 128 : 4g = 64 : 8g = 32 : 16g = 16
                 
0039d4 9160 0540
0039d6 9170 0541
0039d8 9180 0542
0039da 2755
0039db 2744
0039dc 2733
0039dd 1b58
0039de 0b47
0039df 0b36
0039e0 9330 0540
0039e2 9340 0541
0039e4 9350 0542 	b16neg Temp
0039e6 9130 06ae
0039e8 9140 06af
0039ea 9150 06b0
0039ec 9160 0540
0039ee 9170 0541
0039f0 9180 0542
0039f2 1758
0039f3 0747
0039f4 0736      	b16cmp AccZfilter, Temp
0039f5 f40c
0039f6 c072      	longbrlt im41
                 	 
0039f7 9130 069f
0039f9 9140 06a0
0039fb 9150 06a1
0039fd 9160 0669
0039ff 9170 066a
003a01 9180 066b
003a03 1b58
003a04 0b47
003a05 0b36
003a06 9330 0540
003a08 9340 0541
003a0a 9350 0542 	b16sub Temp, EulerAngleRoll, AccAngleRoll	;add roll correction
003a0c 9160 0540
003a0e 9170 0541
003a10 9180 0542
003a12 e002
003a13 940e 4f2b
003a15 9360 0540
003a17 9370 0541
003a19 9380 0542 	b16fdiv Temp, 2
003a1b 9130 0576
003a1d 9140 0577
003a1f 9150 0578
003a21 9160 0540
003a23 9170 0541
003a25 9180 0542
003a27 0f58
003a28 1f47
003a29 1f36
003a2a 9330 0576
003a2c 9340 0577
003a2e 9350 0578 	b16add GyroRollVC, GyroRollVC, Temp
                 
003a30 9130 06a2
003a32 9140 06a3
003a34 9150 06a4
003a36 9160 066c
003a38 9170 066d
003a3a 9180 066e
003a3c 1b58
003a3d 0b47
003a3e 0b36
003a3f 9330 0540
003a41 9340 0541
003a43 9350 0542 	b16sub Temp, EulerAnglePitch, AccAnglePitch	;add pitch correction
003a45 9160 0540
003a47 9170 0541
003a49 9180 0542
003a4b e002
003a4c 940e 4f2b
003a4e 9360 0540
003a50 9370 0541
003a52 9380 0542 	b16fdiv Temp, 2
003a54 9130 0579
003a56 9140 057a
003a58 9150 057b
003a5a 9160 0540
003a5c 9170 0541
003a5e 9180 0542
003a60 0f58
003a61 1f47
003a62 1f36
003a63 9330 0579
003a65 9340 057a
003a67 9350 057b 	b16add GyroPitchVC, GyroPitchVC, Temp
                 
                 im41:
                 
                 	;--- Rotate up-direction 3D vector with gyro inputs ---
                 
003a69 940e 19ed 	call Rotate3dVector
                 
003a6b 940e 1b48 	call Lenght3dVector
                 	
003a6d 940e 1bef 	call ExtractEulerAngles
                 
                 
                 
                 	;--- Calculate Stick and Gyro  ---
                 
003a6f 9100 0773
003a71 2300
003a72 f49a      	rvbrflagfalse flagThrottleZero, im7	;reset integrals if throttle closed 
003a73 e000
003a74 9300 05a6
003a76 9300 05a7
003a78 9300 05a8 	b16clr IntegralRoll
003a7a 9300 05a9
003a7c 9300 05aa
003a7e 9300 05ab 	b16set IntegralPitch
003a80 9300 05ac
003a82 9300 05ad
003a84 9300 05ae 	b16set IntegralYaw
                 
003a86 9160 054c
003a88 9170 054d
003a8a 9180 054e
003a8c e004
003a8d 940e 4f2b
003a8f 9360 054c
003a91 9370 054d
003a93 9380 054e im7:	b16fdiv RxRoll, 4			;right align to the 16.4 multiply usable bit limit
003a95 9160 054f
003a97 9170 0550
003a99 9180 0551
003a9b e004
003a9c 940e 4f2b
003a9e 9360 054f
003aa0 9370 0550
003aa2 9380 0551 	b16fdiv RxPitch, 4
003aa4 9160 0555
003aa6 9170 0556
003aa8 9180 0557
003aaa e004
003aab 940e 4f2b
003aad 9360 0555
003aaf 9370 0556
003ab1 9380 0557 	b16fdiv RxYaw, 4
                 
003ab3 9110 054c
003ab5 9120 054d
003ab7 9130 054e
003ab9 9140 05f1
003abb 9150 05f2
003abd 9160 05f3
003abf 940e 4f3a
003ac1 9370 054c
003ac3 9380 054d
003ac5 9220 054e 	b16mul RxRoll, RxRoll, StickScaleRoll	;scale stick inputs
003ac7 9110 054f
003ac9 9120 0550
003acb 9130 0551
003acd 9140 05f4
003acf 9150 05f5
003ad1 9160 05f6
003ad3 940e 4f3a
003ad5 9370 054f
003ad7 9380 0550
003ad9 9220 0551 	b16mul RxPitch, RxPitch, StickScalePitch
003adb 9110 0555
003add 9120 0556
003adf 9130 0557
003ae1 9140 05f7
003ae3 9150 05f8
003ae5 9160 05f9
003ae7 940e 4f3a
003ae9 9370 0555
003aeb 9380 0556
003aed 9220 0557 	b16mul RxYaw, RxYaw, StickScaleYaw
003aef 9110 0552
003af1 9120 0553
003af3 9130 0554
003af5 9140 05fa
003af7 9150 05fb
003af9 9160 05fc
003afb 940e 4f3a
003afd 9370 0552
003aff 9380 0553
003b01 9220 0554 	b16mul RxThrottle, RxThrottle, StickScaleThrottle
                 
                 
                 	;----- Self level ----
                 
003b03 9100 077b
003b05 2300
003b06 f16a      	rvbrflagtrue flagSlOn, im60		;jump if normal SL mode is active
003b07 9100 077c
003b09 2300
003b0a f00a      	rvbrflagtrue flagSlStickMixing, im31	;jump if SL Stick Mixing mode is active
003b0b c158      	rjmp im30				;jump if both SL modes are inactive
                 
                 
                 im31:	;--- SL Stick Mixing, Pt. 2 ---
                 
003b0c 9110 054c
003b0e 9120 054d
003b10 9130 054e
003b12 9140 05fd
003b14 9150 05fe
003b16 9160 05ff
003b18 940e 4f3a
003b1a 9370 059d
003b1c 9380 059e
003b1e 9220 059f 	b16mul CommandRoll, RxRoll, MixFactor	;manipulate pitch and roll inputs using the special "Stick Scaling" factor (1.0 = 100%)
003b20 9110 054f
003b22 9120 0550
003b24 9130 0551
003b26 9140 05fd
003b28 9150 05fe
003b2a 9160 05ff
003b2c 940e 4f3a
003b2e 9370 05a0
003b30 9380 05a1
003b32 9220 05a2 	b16mul CommandPitch, RxPitch, MixFactor
                 
                 
                 im60:	;--- Roll Axis Self-level P ---
                 
003b34 9160 054c
003b36 9170 054d
003b38 9180 054e
003b3a 2755
003b3b 2744
003b3c 2733
003b3d 1b58
003b3e 0b47
003b3f 0b36
003b40 9330 054c
003b42 9340 054d
003b44 9350 054e 	b16neg RxRoll
                 	
003b46 9160 054c
003b48 9170 054d
003b4a 9180 054e
003b4c e001
003b4d 940e 4f2b
003b4f 9360 054c
003b51 9370 054d
003b53 9380 054e 	b16fdiv RxRoll, 1
                 
003b55 9130 069f
003b57 9140 06a0
003b59 9150 06a1
003b5b 9160 054c
003b5d 9170 054d
003b5f 9180 054e
003b61 1b58
003b62 0b47
003b63 0b36
003b64 9330 05af
003b66 9340 05b0
003b68 9350 05b1 	b16sub Error, EulerAngleRoll, RxRoll	;calculate error
003b6a 9160 05af
003b6c 9170 05b0
003b6e 9180 05b1
003b70 e004
003b71 940e 4f2b
003b73 9360 05af
003b75 9370 05b0
003b77 9380 05b1 	b16fdiv Error, 4
                 
003b79 9110 05af
003b7b 9120 05b0
003b7d 9130 05b1
003b7f 9140 0657
003b81 9150 0658
003b83 9160 0659
003b85 940e 4f3a
003b87 9370 0672
003b89 9380 0673
003b8b 9220 0674 	b16mul Value, Error, SelflevelPgain	;Proportional gain
                 
003b8d 9100 0660
003b8f 9300 066f
003b91 9100 0661
003b93 9300 0670
003b95 9100 0662
003b97 9300 0671 	b16mov LimitV, SelflevelPlimit		;Proportional limit
003b99 d2f0      	rcall Limiter
003b9a 9100 0672
003b9c 9300 054c
003b9e 9100 0673
003ba0 9300 054d
003ba2 9100 0674
003ba4 9300 054e 	b16mov RxRoll, Value
                 
003ba6 9160 054c
003ba8 9170 054d
003baa 9180 054e
003bac e001
003bad 940e 4f2b
003baf 9360 054c
003bb1 9370 054d
003bb3 9380 054e 	b16fdiv RxRoll, 1
                 
                 
                 	;--- Pitch Axis Self-level P ---
                 
003bb5 9160 054f
003bb7 9170 0550
003bb9 9180 0551
003bbb 2755
003bbc 2744
003bbd 2733
003bbe 1b58
003bbf 0b47
003bc0 0b36
003bc1 9330 054f
003bc3 9340 0550
003bc5 9350 0551 	b16neg RxPitch
                 	
003bc7 9160 054f
003bc9 9170 0550
003bcb 9180 0551
003bcd e001
003bce 940e 4f2b
003bd0 9360 054f
003bd2 9370 0550
003bd4 9380 0551 	b16fdiv RxPitch, 1
                 
003bd6 9130 06a2
003bd8 9140 06a3
003bda 9150 06a4
003bdc 9160 054f
003bde 9170 0550
003be0 9180 0551
003be2 1b58
003be3 0b47
003be4 0b36
003be5 9330 05af
003be7 9340 05b0
003be9 9350 05b1 	b16sub Error, EulerAnglePitch, RxPitch	;calculate error
003beb 9160 05af
003bed 9170 05b0
003bef 9180 05b1
003bf1 e004
003bf2 940e 4f2b
003bf4 9360 05af
003bf6 9370 05b0
003bf8 9380 05b1 	b16fdiv Error, 4
                 
003bfa 9110 05af
003bfc 9120 05b0
003bfe 9130 05b1
003c00 9140 0657
003c02 9150 0658
003c04 9160 0659
003c06 940e 4f3a
003c08 9370 0672
003c0a 9380 0673
003c0c 9220 0674 	b16mul Value, Error, SelflevelPgain	;Proportional gain
                 
003c0e 9100 0660
003c10 9300 066f
003c12 9100 0661
003c14 9300 0670
003c16 9100 0662
003c18 9300 0671 	b16mov LimitV, SelflevelPlimit		;Proportional limit
003c1a d26f      	rcall Limiter
003c1b 9100 0672
003c1d 9300 054f
003c1f 9100 0673
003c21 9300 0550
003c23 9100 0674
003c25 9300 0551 	b16mov RxPitch, Value
                 
003c27 9160 054f
003c29 9170 0550
003c2b 9180 0551
003c2d e001
003c2e 940e 4f2b
003c30 9360 054f
003c32 9370 0550
003c34 9380 0551 	b16fdiv RxPitch, 1
                 
                 
                 	;--- SL Stick Mixing, Pt. 3 ---
                 
003c36 9100 077c
003c38 2300
003c39 f552      	rvbrflagfalse flagSlStickMixing, im30
                 
003c3a 9130 054c
003c3c 9140 054d
003c3e 9150 054e
003c40 9160 059d
003c42 9170 059e
003c44 9180 059f
003c46 0f58
003c47 1f47
003c48 1f36
003c49 9330 054c
003c4b 9340 054d
003c4d 9350 054e 	b16add RxRoll, RxRoll, CommandRoll	;final SL stick mixing
003c4f 9130 054f
003c51 9140 0550
003c53 9150 0551
003c55 9160 05a0
003c57 9170 05a1
003c59 9180 05a2
003c5b 0f58
003c5c 1f47
003c5d 1f36
003c5e 9330 054f
003c60 9340 0550
003c62 9350 0551 	b16add RxPitch, RxPitch, CommandPitch
                 
                 
                 im30:	;--- Roll Axis PI ---
                 
003c64 9130 0564
003c66 9140 0565
003c68 9150 0566
003c6a 9160 054c
003c6c 9170 054d
003c6e 9180 054e
003c70 1b58
003c71 0b47
003c72 0b36
003c73 9330 05af
003c75 9340 05b0
003c77 9350 05b1 	b16sub Error, GyroRoll, RxRoll		;calculate error
003c79 9160 05af
003c7b 9170 05b0
003c7d 9180 05b1
003c7f e001
003c80 940e 4f2b
003c82 9360 05af
003c84 9370 05b0
003c86 9380 05b1 	b16fdiv Error, 1
                 
003c88 9110 05af
003c8a 9120 05b0
003c8c 9130 05b1
003c8e 9140 05b2
003c90 9150 05b3
003c92 9160 05b4
003c94 940e 4f3a
003c96 9370 0672
003c98 9380 0673
003c9a 9220 0674 	b16mul Value, Error, PgainRoll		;Proportional gain
                 
003c9c 9100 05bb
003c9e 9300 066f
003ca0 9100 05bc
003ca2 9300 0670
003ca4 9100 05bd
003ca6 9300 0671 	b16mov LimitV, PlimitRoll		;Proportional limit
003ca8 d1e1      	rcall Limiter
003ca9 9100 0672
003cab 9300 059d
003cad 9100 0673
003caf 9300 059e
003cb1 9100 0674
003cb3 9300 059f 	b16mov CommandRoll, Value
                 
003cb5 9160 05af
003cb7 9170 05b0
003cb9 9180 05b1
003cbb e003
003cbc 940e 4f2b
003cbe 9360 05af
003cc0 9370 05b0
003cc2 9380 05b1 	b16fdiv Error, 3
003cc4 9110 05af
003cc6 9120 05b0
003cc8 9130 05b1
003cca 9140 05c4
003ccc 9150 05c5
003cce 9160 05c6
003cd0 940e 4f3a
003cd2 9370 0540
003cd4 9380 0541
003cd6 9220 0542 	b16mul Temp, Error, IgainRoll		;Integral gain
003cd8 9130 05a6
003cda 9140 05a7
003cdc 9150 05a8
003cde 9160 0540
003ce0 9170 0541
003ce2 9180 0542
003ce4 0f58
003ce5 1f47
003ce6 1f36
003ce7 9330 0672
003ce9 9340 0673
003ceb 9350 0674 	b16add Value, IntegralRoll, Temp
                 
003ced 9100 05cd
003cef 9300 066f
003cf1 9100 05ce
003cf3 9300 0670
003cf5 9100 05cf
003cf7 9300 0671 	b16mov LimitV, IlimitRoll 		;Integral limit
003cf9 d190      	rcall Limiter
003cfa 9100 0672
003cfc 9300 05a6
003cfe 9100 0673
003d00 9300 05a7
003d02 9100 0674
003d04 9300 05a8 	b16mov IntegralRoll, Value
                 
003d06 9130 059d
003d08 9140 059e
003d0a 9150 059f
003d0c 9160 05a6
003d0e 9170 05a7
003d10 9180 05a8
003d12 0f58
003d13 1f47
003d14 1f36
003d15 9330 059d
003d17 9340 059e
003d19 9350 059f 	b16add CommandRoll, CommandRoll, IntegralRoll
                 
                 
                 	;--- Pitch Axis PI ---
                 
003d1b 9130 054f
003d1d 9140 0550
003d1f 9150 0551
003d21 9160 0567
003d23 9170 0568
003d25 9180 0569
003d27 1b58
003d28 0b47
003d29 0b36
003d2a 9330 05af
003d2c 9340 05b0
003d2e 9350 05b1 	b16sub Error, RxPitch, GyroPitch	;calculate error
003d30 9160 05af
003d32 9170 05b0
003d34 9180 05b1
003d36 e001
003d37 940e 4f2b
003d39 9360 05af
003d3b 9370 05b0
003d3d 9380 05b1 	b16fdiv Error, 1
                 
003d3f 9110 05af
003d41 9120 05b0
003d43 9130 05b1
003d45 9140 05b5
003d47 9150 05b6
003d49 9160 05b7
003d4b 940e 4f3a
003d4d 9370 0672
003d4f 9380 0673
003d51 9220 0674 	b16mul Value, Error, PgainPitch		;Proportional gain
                 
003d53 9100 05be
003d55 9300 066f
003d57 9100 05bf
003d59 9300 0670
003d5b 9100 05c0
003d5d 9300 0671 	b16mov LimitV, PlimitPitch		;Proportional limit
003d5f d12a      	rcall Limiter
003d60 9100 0672
003d62 9300 05a0
003d64 9100 0673
003d66 9300 05a1
003d68 9100 0674
003d6a 9300 05a2 	b16mov CommandPitch, Value
                 
003d6c 9160 05af
003d6e 9170 05b0
003d70 9180 05b1
003d72 e003
003d73 940e 4f2b
003d75 9360 05af
003d77 9370 05b0
003d79 9380 05b1 	b16fdiv Error, 3
003d7b 9110 05af
003d7d 9120 05b0
003d7f 9130 05b1
003d81 9140 05c7
003d83 9150 05c8
003d85 9160 05c9
003d87 940e 4f3a
003d89 9370 0540
003d8b 9380 0541
003d8d 9220 0542 	b16mul Temp, Error, IgainPitch		;Integral gain
003d8f 9130 05a9
003d91 9140 05aa
003d93 9150 05ab
003d95 9160 0540
003d97 9170 0541
003d99 9180 0542
003d9b 0f58
003d9c 1f47
003d9d 1f36
003d9e 9330 0672
003da0 9340 0673
003da2 9350 0674 	b16add Value, IntegralPitch, Temp
                 
003da4 9100 05d0
003da6 9300 066f
003da8 9100 05d1
003daa 9300 0670
003dac 9100 05d2
003dae 9300 0671 	b16mov LimitV, IlimitPitch 		;Integral limit
003db0 d0d9      	rcall Limiter
003db1 9100 0672
003db3 9300 05a9
003db5 9100 0673
003db7 9300 05aa
003db9 9100 0674
003dbb 9300 05ab 	b16mov IntegralPitch, Value
                 
003dbd 9130 05a0
003dbf 9140 05a1
003dc1 9150 05a2
003dc3 9160 05a9
003dc5 9170 05aa
003dc7 9180 05ab
003dc9 0f58
003dca 1f47
003dcb 1f36
003dcc 9330 05a0
003dce 9340 05a1
003dd0 9350 05a2 	b16add CommandPitch, CommandPitch, IntegralPitch
                 
                 
                 	;--- Yaw Axis PI ---
                 
003dd2 9130 0555
003dd4 9140 0556
003dd6 9150 0557
003dd8 9160 056a
003dda 9170 056b
003ddc 9180 056c
003dde 1b58
003ddf 0b47
003de0 0b36
003de1 9330 05af
003de3 9340 05b0
003de5 9350 05b1 	b16sub Error, RxYaw, GyroYaw		;calculate error
003de7 9160 05af
003de9 9170 05b0
003deb 9180 05b1
003ded e001
003dee 940e 4f2b
003df0 9360 05af
003df2 9370 05b0
003df4 9380 05b1 	b16fdiv Error, 1
                 
003df6 9110 05af
003df8 9120 05b0
003dfa 9130 05b1
003dfc 9140 05b8
003dfe 9150 05b9
003e00 9160 05ba
003e02 940e 4f3a
003e04 9370 0672
003e06 9380 0673
003e08 9220 0674 	b16mul Value, Error, PgainYaw		;Proportional gain
                 
003e0a 9100 05c1
003e0c 9300 066f
003e0e 9100 05c2
003e10 9300 0670
003e12 9100 05c3
003e14 9300 0671 	b16mov LimitV, PlimitYaw		;Proportional limit
003e16 d073      	rcall Limiter
003e17 9100 0672
003e19 9300 05a3
003e1b 9100 0673
003e1d 9300 05a4
003e1f 9100 0674
003e21 9300 05a5 	b16mov CommandYaw, Value
                 
003e23 9160 05af
003e25 9170 05b0
003e27 9180 05b1
003e29 e003
003e2a 940e 4f2b
003e2c 9360 05af
003e2e 9370 05b0
003e30 9380 05b1 	b16fdiv Error, 3
003e32 9110 05af
003e34 9120 05b0
003e36 9130 05b1
003e38 9140 05ca
003e3a 9150 05cb
003e3c 9160 05cc
003e3e 940e 4f3a
003e40 9370 0540
003e42 9380 0541
003e44 9220 0542 	b16mul Temp, Error, IgainYaw		;Integral gain
003e46 9130 05ac
003e48 9140 05ad
003e4a 9150 05ae
003e4c 9160 0540
003e4e 9170 0541
003e50 9180 0542
003e52 0f58
003e53 1f47
003e54 1f36
003e55 9330 0672
003e57 9340 0673
003e59 9350 0674 	b16add Value, IntegralYaw, Temp
                 
003e5b 9100 05d3
003e5d 9300 066f
003e5f 9100 05d4
003e61 9300 0670
003e63 9100 05d5
003e65 9300 0671 	b16mov LimitV, IlimitYaw 		;Integral limit
003e67 d022      	rcall Limiter
003e68 9100 0672
003e6a 9300 05ac
003e6c 9100 0673
003e6e 9300 05ad
003e70 9100 0674
003e72 9300 05ae 	b16mov IntegralYaw, Value
                 
003e74 9130 05a3
003e76 9140 05a4
003e78 9150 05a5
003e7a 9160 05ac
003e7c 9170 05ad
003e7e 9180 05ae
003e80 0f58
003e81 1f47
003e82 1f36
003e83 9330 05a3
003e85 9340 05a4
003e87 9350 05a5 	b16add CommandYaw, CommandYaw, IntegralYaw
003e89 9508      	ret
                 
                 
                 
                 	;--- Limiter ---
                 
                 Limiter:
                 
003e8a 9130 0672
003e8c 9140 0673
003e8e 9150 0674
003e90 9160 066f
003e92 9170 0670
003e94 9180 0671
003e96 1758
003e97 0747
003e98 0736      	b16cmp Value, LimitV	;high limit
003e99 f064      	brlt lim5
003e9a 9100 066f
003e9c 9300 0672
003e9e 9100 0670
003ea0 9300 0673
003ea2 9100 0671
003ea4 9300 0674 	b16mov Value, LimitV
                 
003ea6 9160 066f
003ea8 9170 0670
003eaa 9180 0671
003eac 2755
003ead 2744
003eae 2733
003eaf 1b58
003eb0 0b47
003eb1 0b36
003eb2 9330 066f
003eb4 9340 0670
003eb6 9350 0671 lim5:	b16neg LimitV		;low limit
003eb8 9130 0672
003eba 9140 0673
003ebc 9150 0674
003ebe 9160 066f
003ec0 9170 0670
003ec2 9180 0671
003ec4 1758
003ec5 0747
003ec6 0736      	b16cmp Value, LimitV
003ec7 f464      	brge lim6
003ec8 9100 066f
003eca 9300 0672
003ecc 9100 0670
003ece 9300 0673
003ed0 9100 0671
003ed2 9300 0674 	b16mov Value, LimitV
                 
003ed4 9508      lim6:	ret
                 
                 
                 
                 
                 .include "pwmgen.asm"
                 
                 
                 
                 PwmStart:
                 
                 //	sbi DebugOutputPin		// DEBUGGING
                 
                 	;set OCR1A to current time + 0.5ms
                 
003ed5 94f8      	cli
003ed6 91a0 0084 	load xl, tcnt1l
003ed8 91b0 0085 	load xh, tcnt1h
003eda 9478      	sei
                 
003edb ee02      	ldi t, low(1250)
003edc 0fa0      	add xl, t
003edd e004      	ldi t, high(1250)
003ede 1fb0      	adc xh, t
                 
003edf 94f8      	cli
003ee0 93b0 0089 	store ocr1ah, xh
003ee2 93a0 0088 	store ocr1al, xl
003ee4 9478      	sei
                 
                 	;set OCR1B to current time + 1.5ms
                 
003ee5 ec04      	ldi t, low(2500)
003ee6 0fa0      	add xl, t
003ee7 e009      	ldi t, high(2500)
003ee8 1fb0      	adc xh, t
                 
003ee9 94f8      	cli
003eea 93b0 008b 	store ocr1bh, xh
003eec 93a0 008a 	store ocr1bl, xl
003eee 9478      	sei
                 
                 	;turn on OC1a and b interrupt
                 
                 	;       76543210
003eef e006      	ldi t,0b00000110
003ef0 9300 006f 	store timsk1, t
                 
003ef2 2700      	clr t
003ef3 9300 076e 	sts flagPwmGen, t
003ef5 9300 076d 	sts flagPwmEnd, t
003ef7 9508      	ret
                 
                 
                 
                 IsrPwmStart:
                 
                 	;generate the rising edge of servo/esc pulses
003ef8 939f        push tt
003ef9 b6ff      	load SregSaver, sreg
                 
003efa 9190 076e 	lds tt, flagPwmGen		;check for PWM generator state
003efc 2399      	tst tt
003efd f011      	breq pwm1a
                 
003efe 9845      	cbi OutputPin7			;set M7 output low
003eff c02a      	rjmp pwm12
                 
003f00 9190 07a0 pwm1a:	lds tt, flagMutePwm
003f02 2399      	tst tt
003f03 f132      	brmi pwm12
                 
003f04 9408      	sec
                 
003f05 9190 076b 	lds tt, OutputRateDividerCounter
003f07 959a      	dec tt
003f08 f419      	brne pwm1
                 
003f09 9190 076a 	lds tt, OutputRateDivider
003f0b 9488      	clc	
                 
003f0c 9390 076b pwm1:	sts OutputRateDividerCounter, tt
                 	
003f0e ef9f      	ldi tt, 0xff			;bit pattern for fast and slow update rate
003f0f f410      	brcc pwm2
003f10 9190 0768 	lds tt, OutputRateBitmask	;bit pattern for fast update rate
                 
003f12 9596      pwm2:	lsr tt				;stagger the pin switching to avoid up to 8 pins switching at the same time
003f13 f408      	brcc pwm3
003f14 9a46      	sbi OutputPin1
003f15 9596      pwm3:	lsr tt
003f16 f408      	brcc pwm4
003f17 9a44      	sbi OutputPin2
003f18 9596      pwm4:	lsr tt
003f19 f408      	brcc pwm5
003f1a 9a42      	sbi OutputPin3
003f1b 9596      pwm5:	lsr tt
003f1c f408      	brcc pwm6
003f1d 9a43      	sbi OutputPin4
003f1e 9596      pwm6:	lsr tt
003f1f f408      	brcc pwm7
003f20 9a14      	sbi OutputPin5
003f21 9596      pwm7:	lsr tt
003f22 f408      	brcc pwm8
003f23 9a15      	sbi OutputPin6
003f24 9596      pwm8:	lsr tt
003f25 f408      	brcc pwm9
003f26 9a45      	sbi OutputPin7
003f27 9596      pwm9:	lsr tt
003f28 f408      	brcc pwm12
003f29 9a47      	sbi OutputPin8
                 
                 pwm12:	
003f2a 919f        pop tt
003f2b beff        store sreg, SregSaver
003f2c 9518      	reti
                 
                 
                 
                 
                 
                 IsrPwmEnd:
                 
003f2d 939f        push tt
003f2e b6ff      	load SregSaver, sreg
                 
003f2f 9190 076e 	lds tt, flagPwmGen		;check for PWM generator state
003f31 2399      	tst tt
003f32 f011      	breq ipe1
                 
003f33 9847      	cbi OutputPin8			;set M8 output low
003f34 c003      	rjmp ipe2
                 
003f35 ef9f      ipe1:	ldi tt, 0xff
003f36 9390 076d 	sts flagPwmEnd, tt
                 
                 ipe2:	
003f38 919f        pop tt
003f39 beff        store sreg, SregSaver
003f3a 9518      	reti
                 
                 
                 
                 
                 
                 PwmEnd:
                 
003f3b e003
003f3c 9300 0540
003f3e ee09
003f3f 9300 0541
003f41 e000
003f42 9300 0542 	b16ldi Temp, 1001		;make sure the EscLowLimit is not too high. (hardcoded limit of 20%)
003f44 9130 05ee
003f46 9140 05ef
003f48 9150 05f0
003f4a 9160 0540
003f4c 9170 0541
003f4e 9180 0542
003f50 1758
003f51 0747
003f52 0736      	b16cmp EscLowLimit, Temp
003f53 f064      	brlt pwm58
                 
003f54 9100 0540
003f56 9300 05ee
003f58 9100 0541
003f5a 9300 05ef
003f5c 9100 0542
003f5e 9300 05f0 	b16mov EscLowLimit, Temp
                 
                 pwm58:	;loop setup
                 
003f60 e000
003f61 9300 0795 	lrv Index, 0		
                 
003f63 9100 0769 	lds t, OutputTypeBitmask
003f65 9300 0798 	sts OutputTypeBitmaskCopy, t
                 
003f67 9000 0770
003f69 9400
003f6a 9200 0799 	rvflagnot flagInactive, flagArmed	;flagInactive is set to true if outputs should be in inactive state
003f6c 9000 0799
003f6e 9010 0773
003f70 2801
003f71 9200 0799 	rvflagor flagInactive, flagInactive, flagThrottleZero
                 	
                 	;loop body
                 
003f73 93ef
003f74 93ff
003f75 e0ef
003f76 e0f6
003f77 9160 0795
003f79 e003
003f7a 9f60
003f7b 0de0
003f7c 1df1
003f7d 9131
003f7e 9141
003f7f 9151
003f80 9330 0678
003f82 9340 0679
003f84 9350 067a
003f86 91ff
003f87 91ef      pwm50:	b16load_array PwmOutput, Out1
                 
003f88 9100 0798 	lds t, OutputTypeBitmaskCopy		;ESC or SERVO?
003f8a 9506      	lsr t
003f8b 9300 0798 	sts OutputTypeBitmaskCopy, t
003f8d f408      	brcc pwm51fix
                 
003f8e c088      	rjmp pwm51
                 
                 pwm51fix:
                 
                 	;---
                 
003f8f 9100 077a
003f91 2300
003f92 f02a      	rvbrflagtrue flagGimbalMode, pwm52fix	;SERVO, run servo filter when gimbal mode is active
003f93 9100 0799
003f95 2300
003f96 f40a      	rvbrflagfalse flagInactive, pwm52fix	;active or inactive?
003f97 c069      	rjmp pwm52
                 
                 pwm52fix:
003f98 93ef
003f99 93ff
003f9a e2e7
003f9b e0f6
003f9c 9160 0795
003f9e e003
003f9f 9f60
003fa0 0de0
003fa1 1df1
003fa2 9131
003fa3 9141
003fa4 9151
003fa5 9330 0540
003fa7 9340 0541
003fa9 9350 0542
003fab 91ff
003fac 91ef      	b16load_array Temp, FilteredOut1 	;servo active, apply low pass filter
003fad 9130 0678
003faf 9140 0679
003fb1 9150 067a
003fb3 9160 0540
003fb5 9170 0541
003fb7 9180 0542
003fb9 1b58
003fba 0b47
003fbb 0b36
003fbc 9330 05af
003fbe 9340 05b0
003fc0 9350 05b1 	b16sub Error, PwmOutput, Temp
                 
003fc2 9110 05af
003fc4 9120 05b0
003fc6 9130 05b1
003fc8 9140 067b
003fca 9150 067c
003fcc 9160 067d
003fce 940e 4f3a
003fd0 9370 05af
003fd2 9380 05b0
003fd4 9220 05b1 	b16mul Error, Error, ServoFilter
                 
003fd6 9130 0540
003fd8 9140 0541
003fda 9150 0542
003fdc 9160 05af
003fde 9170 05b0
003fe0 9180 05b1
003fe2 0f58
003fe3 1f47
003fe4 1f36
003fe5 9330 0678
003fe7 9340 0679
003fe9 9350 067a 	b16add PwmOutput, Temp, Error
003feb 93ef
003fec 93ff
003fed 9130 0678
003fef 9140 0679
003ff1 9150 067a
003ff3 e2e7
003ff4 e0f6
003ff5 9160 0795
003ff7 e003
003ff8 9f60
003ff9 0de0
003ffa 1df1
003ffb 9331
003ffc 9341
003ffd 9351
003ffe 91ff
003fff 91ef      	b16store_array FilteredOut1, PwmOutput
                 
004000 c03e      	rjmp pwm55
                 
004001 93ef
004002 93ff
004003 e3ef
004004 e0f6
004005 9160 0795
004007 e003
004008 9f60
004009 0de0
00400a 1df1
00400b 9131
00400c 9141
00400d 9151
00400e 9330 0678
004010 9340 0679
004012 9350 067a
004014 91ff
004015 91ef      pwm52:	b16load_array PwmOutput, Offset1	;servo inactive, set to offset value
004016 c028      	rjmp pwm55
                 
                 	;---
                 
004017 9100 0799
004019 2300
00401a f0ea      pwm51:	rvbrflagtrue flagInactive, pwm54	;ESC, active or inactive?
                 
00401b 9130 0678
00401d 9140 0679
00401f 9150 067a
004021 9160 05ee
004023 9170 05ef
004025 9180 05f0
004027 1758
004028 0747
004029 0736      	b16cmp PwmOutput, EscLowLimit		;ESC active, limit to EscLowLimit
00402a f464      	brge pwm56
00402b 9100 05ee
00402d 9300 0678
00402f 9100 05ef
004031 9300 0679
004033 9100 05f0
004035 9300 067a 	b16mov PwmOutput, EscLowLimit
                 pwm56:
004037 c007      	rjmp pwm55
                 
004038 e000
004039 9300 0678
00403b 9300 0679
00403d 9300 067a pwm54:	b16clr PwmOutput			;ESC inactive, set to zero 
                 
                 	;---
                 
00403f 93ef
004040 93ff
004041 9130 0678
004043 9140 0679
004045 9150 067a
004047 e0ef
004048 e0f6
004049 9160 0795
00404b e003
00404c 9f60
00404d 0de0
00404e 1df1
00404f 9331
004050 9341
004051 9351
004052 91ff
004053 91ef      pwm55:	b16store_array Out1, PwmOutput
                 
                 
                 	;loop looper
                 
004054 9100 0795
004056 9503
004057 9300 0795 	rvinc Index
004059 9100 0795
00405b 3008      	rvcpi Index, 8
00405c f009      	breq pwm57
00405d cf15      	rjmp pwm50
                 pwm57:
                 
                 
                 
                 .def O1L=r0
                 .def O1H=r1
                 .def O2L=r2
                 .def O2H=r3
                 .def O3L=r4
                 .def O3H=r5
                 .def O4L=r6
                 .def O4H=r7
                 .def O5L=r8
                 .def O5H=r17
                 .def O6L=r18
                 .def O6H=r19
                 .def O7L=r20
                 .def O7H=r21
                 .def O8L=r22
                 .def O8H=r23
                 	
                 	
                 	;condition the output values
                 
00405e 91b0 060f
004060 91a0 0610
004062 91d0 0611 	b16load Out1
004064 d087      	rcall PwmCond
004065 2e0a      	mov O1L, xl
004066 2e1b      	mov O1H, xh
                 
004067 91b0 0612
004069 91a0 0613
00406b 91d0 0614 	b16load Out2
00406d d07e      	rcall PwmCond
00406e 2e2a      	mov O2L, xl
00406f 2e3b      	mov O2H, xh
                 
004070 91b0 0615
004072 91a0 0616
004074 91d0 0617 	b16load Out3
004076 d075      	rcall PwmCond
004077 2e4a      	mov O3L, xl
004078 2e5b      	mov O3H, xh
                 
004079 91b0 0618
00407b 91a0 0619
00407d 91d0 061a 	b16load Out4
00407f d06c      	rcall PwmCond
004080 2e6a      	mov O4L, xl
004081 2e7b      	mov O4H, xh
                 
004082 91b0 061b
004084 91a0 061c
004086 91d0 061d 	b16load Out5
004088 d063      	rcall PwmCond
004089 2e8a      	mov O5L, xl
00408a 2f1b      	mov O5H, xh
                 
00408b 91b0 061e
00408d 91a0 061f
00408f 91d0 0620 	b16load Out6
004091 d05a      	rcall PwmCond
004092 2f2a      	mov O6L, xl
004093 2f3b      	mov O6H, xh
                 
004094 91b0 0621
004096 91a0 0622
004098 91d0 0623 	b16load Out7
00409a d066      	rcall PwmCondForTimer
00409b 2f4a      	mov O7L, xl
00409c 2f5b      	mov O7H, xh
                 
00409d 91b0 0624
00409f 91a0 0625
0040a1 91d0 0626 	b16load Out8
0040a3 d05d      	rcall PwmCondForTimer
0040a4 2f6a      	mov O8L, xl
0040a5 2f7b      	mov O8H, xh
                 
                 
                 //	cbi DebugOutputPin		// DEBUGGING
                 
                 
                 	;generate the end of the PWM signal, this part is blocking.
                 
0040a6 9100 076d
0040a8 2300
0040a9 f40a      	rvbrflagfalse flagPwmEnd, pwm29
                 ;	ldi t, 0				;if IsrPwmEnd is true here, the start of PWM pulse end generation is missed
                 ;	call LogError				;log error
0040aa 9508      	ret					;and return without generating the end of pwm pulse
                 
0040ab 9100 076d
0040ad 2300
0040ae f7e2      pwm29:	rvbrflagfalse flagPwmEnd, pwm29		;wait until IsrPwmEnd has run (flagPwmEnd == true)
                 
                 
                 	;prepare timer for jitter-free channels
                 
0040af ef0f      	ser t
0040b0 9300 076e 	sts flagPwmGen, t
                 
0040b2 94f8      	cli
0040b3 91a0 0084 	load xl, tcnt1l
0040b5 91b0 0085 	load xh, tcnt1h
0040b7 9478      	sei
                 
0040b8 01ed      	movw y, x
                 
0040b9 0fa4      	add xl, O7L
0040ba 1fb5      	adc xh, O7H
0040bb 0fc6      	add yl, O8L
0040bc 1fd7      	adc yh, O8H
                 
0040bd 94f8      	cli
0040be 93b0 0089 	store ocr1ah, xh
0040c0 93a0 0088 	store ocr1al, xl
0040c2 93d0 008b 	store ocr1bh, yh
0040c4 93c0 008a 	store ocr1bl, yl
0040c6 9478      	sei
                 
                 
                 	;generate the varying 1ms part of the pwm signal
                 
0040c7 e0a1
0040c8 e0b0      	ldx 1
0040c9 e7c2
0040ca e0d2      	ldy 626
                 	
0040cb 1a0a      pwm13:	sub O1L, xl
0040cc 0a1b      	sbc O1H, xh
0040cd f408      	brcc pwm14
0040ce 9846      	cbi OutputPin1
0040cf 1a2a      pwm14:	sub O2L, xl
0040d0 0a3b      	sbc O2H, xh
0040d1 f408      	brcc pwm15
0040d2 9844      	cbi OutputPin2
0040d3 1a4a      pwm15:	sub O3L, xl
0040d4 0a5b      	sbc O3H, xh
0040d5 f408      	brcc pwm16
0040d6 9842      	cbi OutputPin3
0040d7 1a6a      pwm16:	sub O4L, xl
0040d8 0a7b      	sbc O4H, xh
0040d9 f408      	brcc pwm17
0040da 9843      	cbi OutputPin4
0040db 1a8a      pwm17:	sub O5L, xl
0040dc 0b1b      	sbc O5H, xh
0040dd f408      	brcc pwm18
0040de 9814      	cbi OutputPin5
0040df 1b2a      pwm18:	sub O6L, xl
0040e0 0b3b      	sbc O6H, xh
0040e1 f408      	brcc pwm19
0040e2 9815      	cbi OutputPin6
                 
0040e3 0000      pwm19:	nop
0040e4 0000      	nop
0040e5 0000      	nop
0040e6 0000      	nop
0040e7 9721      	sbiw y, 1
0040e8 f710      	brcc pwm13
                 
0040e9 9845      	cbi OutputPin7	;for safety
0040ea 9847      	cbi OutputPin8
0040eb 9508      	ret
                 
                 
                 
                 
                 .undef O1L
                 .undef O1H
                 .undef O2L
                 .undef O2H
                 .undef O3L
                 .undef O3H
                 .undef O4L
                 .undef O4H
                 .undef O5L
                 .undef O5H
                 .undef O6L
                 .undef O6H
                 .undef O7L
                 .undef O7H
                 .undef O8L
                 .undef O8H
                 
                 
                 
                 
                 PwmCond:
                 
0040ec 95b5      	asr xh		;divide by 8
0040ed 95a7      	ror xl
0040ee 95b5      	asr xh
0040ef 95a7      	ror xl
0040f0 95b5      	asr xh
0040f1 95a7      	ror xl
                 
0040f2 e0c0
0040f3 e0d0      	ldy 0		;x < 0?
0040f4 17ac      	cp  xl, yl
0040f5 07bd      	cpc xh, yh
0040f6 f414      	brge pwc1
                 
0040f7 e0a0
0040f8 e0b0      	ldx 0		;yes, set to zero
                 
0040f9 e7c2
0040fa e0d2      pwc1:	ldy 626		;x >= 626?
0040fb 17ac      	cp  xl, yl
0040fc 07bd      	cpc xh, yh
0040fd f014      	brlt pwc2
                 
0040fe e7a1
0040ff e0b2      	ldx 625		;yes, set to 625
                 
004100 9508      pwc2:	ret
                 
                 
                 
                 PwmCondForTimer:
                 
004101 95b5      	asr xh		;divide by 2
004102 95a7      	ror xl
                 
004103 e0c3
004104 e0d0      	ldy 3		;x < 3?
004105 17ac      	cp  xl, yl
004106 07bd      	cpc xh, yh
004107 f414      	brge pft1
                 
004108 e0a3
004109 e0b0      	ldx 3		;yes, set to 3 (cannot use smaller values because then the timer won't trigger)
                 
00410a ecc5
00410b e0d9      pft1:	ldy 2501	;x >= 2501?
00410c 17ac      	cp  xl, yl
00410d 07bd      	cpc xh, yh
00410e f014      	brlt pft2
                 
00410f eca4
004110 e0b9      	ldx 2500	;yes, set to 2500
                 
004111 9508      pft2:	ret
                 
                 
                 
                 	;--- Run ESCs at minimum output (1.0ms) while navigating the menus ---
                 
                 StartPwmQuiet:
                 
004112 2700      	clr t				;all PWM outputs are low
004113 9300 076f 	sts flagPwmState, t
                 
004115 940e 30b6 	call LoadMixerTable		;load the mixer table in case some settings were changed
004117 940e 32da 	call UpdateOutputTypeAndRate
                 
004119 ed09      	ldi t, 217			;set timer2 to generate an interrupt 0.5ms from now (256 - 39 = 217)
00411a 9300 00b2 	store tcnt2, t
                 
                 	;       76543210
00411c e000      	ldi t,0b00000000		;set timer2 to normal mode
00411d 9300 00b0 	store tccr2a, t
                 
                 	;       76543210
00411f e006      	ldi t,0b00000110		;clk/256 prescaler
004120 9300 00b1 	store tccr2b, t
                 
                 	;       76543210
004122 e001      	ldi t,0b00000001		;enable timer2 overflow interrupt
004123 9300 0070 	store timsk2, t
004125 9508      	ret
                 
                 
                 
                 StopPwmQuiet:
                 
004126 9100 076f 	lds t, flagPwmState		;wait for PWM output state to become false
004128 2300      	tst t
004129 f7e1      	brne StopPwmQuiet
                 
                 	;       76543210
00412a e000      	ldi t,0b00000000		;disable timer2 overflow interrupt
00412b 9300 0070 	store timsk2, t
                 
00412d 93cf      	push yl				;wait 1.0ms to compensate for the "varying" part of the PWM pulse
00412e 93af
00412f 93bf      	pushx
004130 e0a1
004131 e0b0      	ldx 1
004132 940e 4e9c 	call WaitXms
004134 91bf
004135 91af      	popx
004136 91cf      	pop yl
004137 9508      	ret
                 
                 
                 
                 IsrPwmQuiet:
                 
004138 939f        push tt
004139 b6ff      	load SregSaver, sreg
                 
00413a 9190 076f 	lds tt, flagPwmState		;toggle output state
00413c 9590      	com tt
00413d 9390 076f 	sts flagPwmState, tt
                 
00413f 2399      	tst tt				;prepare for next interrupt. Set high or low output level?
004140 f021      	breq ipq10
                 
004141 eb92      	ldi tt, 178			;high. The next interrupt will occur in 1ms from now (256 - 78 = 178)
004142 9390 00b2 	store tcnt2, tt
004144 c00c      	rjmp ipq11
                 
004145 e89b      ipq10:	ldi tt, 139			;low. The next interrupt will occur in 1.5ms from now (256 - 117 = 139)
004146 9390 00b2 	store tcnt2, tt
                 
004148 9846      	cbi OutputPin1			;set all outpots low
004149 9844      	cbi OutputPin2
00414a 9842      	cbi OutputPin3
00414b 9843      	cbi OutputPin4
00414c 9814      	cbi OutputPin5
00414d 9815      	cbi OutputPin6
00414e 9845      	cbi OutputPin7
00414f 9847      	cbi OutputPin8
004150 c01a      	rjmp ipq20
                 
004151 9190 0769 ipq11:	lds tt, OutputTypeBitmask	;set outputs high according to mask
004153 9596      	lsr tt
004154 f408      	brcc ipq12
                 
004155 9a46      	sbi OutputPin1
                 
004156 9596      ipq12:	lsr tt
004157 f408      	brcc ipq13
                 
004158 9a44      	sbi OutputPin2
                 
004159 9596      ipq13:	lsr tt
00415a f408      	brcc ipq14
                 
00415b 9a42      	sbi OutputPin3
                 
00415c 9596      ipq14:	lsr tt
00415d f408      	brcc ipq15
                 
00415e 9a43      	sbi OutputPin4
                 
00415f 9596      ipq15:	lsr tt
004160 f408      	brcc ipq16
                 
004161 9a14      	sbi OutputPin5
                 
004162 9596      ipq16:	lsr tt
004163 f408      	brcc ipq17
                 
004164 9a15      	sbi OutputPin6
                 
004165 9596      ipq17:	lsr tt
004166 f408      	brcc ipq18
                 
004167 9a45      	sbi OutputPin7
                 
004168 9596      ipq18:	lsr tt
004169 f408      	brcc ipq20
                 
00416a 9a47      	sbi OutputPin8
                 
                 ipq20:	
00416b 919f        pop tt
00416c beff        store sreg, SregSaver
00416d 9518      	reti
                 .include "rxtest.asm"
                 
                 .set xoff = 85					;X position for the channel value texts
                 
                 
                 RxTest:
                 
00416e 9100 074d 	lds t, RxMode
004170 3001      	cpi t, RxModeCppm
004171 f491      	brne rxt2
                 
004172 ef0f      	ser t					;CPPM mode
004173 9300 0762 	sts flagRollValid, t
004175 9300 0763 	sts flagPitchValid, t
004177 9300 0764 	sts flagThrottleValid, t
004179 9300 0765 	sts flagYawValid, t
00417b 9300 0766 	sts flagAuxValid, t
                 
00417d 9100 07db
00417f 2300
004180 f01a      	rvbrflagtrue RxFrameValid, rxt2		;display a "NO SIGNAL" message if CPPM signal is absent
                 
004181 940e 079a 	call ShowNoCppmSignalDlg
004183 9508      	ret
                 
004184 e002
004185 9300 0767 rxt2:	lrv RxTimeoutLimit, 2
                 
004187 940e 4434 rxt1:	call GetRxChannels
004189 d171      	rcall ScaleInputValues			;divide RX values by 10
                 
00418a 940e 4d81 	call LcdClear6x8
                 
00418c e005      	ldi t, 5				;print all channel labels first
00418d e2ee
00418e e9fd      	ldz rxch*2
00418f 940e 4c18 	call PrintStringArray
                 
004191 e001
004192 9300 0740 	lrv Y1, 1				;aileron
004194 91b0 054c
004196 91a0 054d
004198 91d0 054e 	b16load RxRoll
00419a e3e0
00419b e8f5      	ldz ailtxt*2
00419c 91c0 0762 	lds yl, flagRollValid
00419e d115      	rcall PrintRxValue
                 
00419f 91b0 054f
0041a1 91a0 0550
0041a3 91d0 0551 	b16load RxPitch				;elevator
0041a5 e3e6
0041a6 e8f5      	ldz eletxt*2
0041a7 91c0 0763 	lds yl, flagPitchValid
0041a9 d10a      	rcall PrintRxValue
                 
0041aa d137      	rcall PrintRxColon			;throttle (needs special attention)
0041ab 9100 0764
0041ad 2300
0041ae f032      	rvbrflagtrue flagThrottleValid, rxt14
                 
0041af efe0
0041b0 e8f4      	ldz rxt8*2				;no throttle input
0041b1 940e 4c2e 	call PrintString
0041b3 d128      	rcall UpdateRxCursorPos
0041b4 c01b      	rjmp rxt13
                 
0041b5 91b0 0552
0041b7 91a0 0553
0041b9 91d0 0554 rxt14:	b16load RxThrottle
0041bb 940e 4b47 	call Print16Signed
0041bd e505
0041be 9300 073f 	lrv X1, xoff
0041c0 9100 0773
0041c2 2300
0041c3 f412      	rvbrflagfalse flagThrottleZero, rxt4
                 
0041c4 27aa      	clr xl					;idle
0041c5 c007      	rjmp rxt6
                 
0041c6 e5ea
0041c7 e0f0      rxt4:	ldz 90
0041c8 d128      	rcall CompareXZ
0041c9 f414      	brge rxt5
                 
0041ca e0a1      	ldi xl, 1				;1 - 90%
0041cb c001      	rjmp rxt6
                 
0041cc e0a2      rxt5:	ldi xl, 2				;full
                 	
0041cd e3ec
0041ce e8f5      rxt6:	ldz thrtxt*2
0041cf d109      	rcall PrintRxText
                 
0041d0 91b0 0555
0041d2 91a0 0556
0041d4 91d0 0557 rxt13:	b16load RxYaw				;rudder
0041d6 e4e2
0041d7 e8f5      	ldz rudtxt*2
0041d8 91c0 0765 	lds yl, flagYawValid
0041da d0d9      	rcall PrintRxValue
                 
0041db d106      	rcall PrintRxColon			;aux (needs special attention)
0041dc 9100 0766
0041de 2300
0041df f02a      	rvbrflagtrue flagAuxValid, rxt11
                 
0041e0 efe0
0041e1 e8f4      	ldz rxt8*2				;no aux input
0041e2 940e 4c2e 	call PrintString
0041e4 c011      	rjmp rxt12
                 
0041e5 91b0 0558
0041e7 91a0 0559
0041e9 91d0 055a rxt11:	b16load RxAux
0041eb 940e 4b47 	call Print16Signed
0041ed e505
0041ee 9300 073f 	lrv X1, xoff
0041f0 9100 0781 	lds t, AuxSwitchPosition
0041f2 e0ee
0041f3 e9fd      	ldz auxtxt*2
0041f4 940e 4c0f 	call PrintFromStringArray
                 
                 rxt12:	;footer
0041f6 e000
0041f7 9300 073f 	lrv X1, 0
0041f9 e309
0041fa 9300 0740 	lrv Y1, 57
0041fc eaec
0041fd e9fb      	ldz bckmore*2
0041fe 940e 4c2e 	call PrintString
                 
004200 940e 4d2c 	call LcdUpdate
                 
004202 d0f1      	rcall RxPollDelay
                 
004203 940e 4eaf 	call GetButtons
                 
004205 3008      	cpi t, 0x08				;BACK?
004206 f409      	brne rxt35
                 
004207 9508      	ret
                 
004208 3004      rxt35:	cpi t, 0x04				;MORE?
004209 f419      	brne rxt7
                 
00420a 940e 1dd3 	call Beep				;go to the second screen
00420c d001      	rcall RxTest2
                 
00420d cf79      rxt7:	rjmp rxt1
                 
                 
                 
                 	;--- Second screen ---
                 
                 RxTest2:
                 
00420e 940e 4434 	call GetRxChannels
                 
004210 9100 074d 	lds t, RxMode				;skip ahead if not serial input mode. This section is needed for Stand-alone Gimbal mode
004212 3002      	cpi t, RxModeSBus
004213 f064      	brlt rxt204
                 
004214 9100 07fa 	lds t, RxBufferState			;update the display only when we have new data
004216 3003      	cpi t, 3
004217 f041      	breq rxt204
                 
004218 e1c9      	ldi yl, 25				;wait 2.5ms
004219 940e 4ea1 	call wms
                 
00421b 9100 07db
00421d 2300
00421e f40a      	rvbrflagfalse RxFrameValid, rxt204	;update the display also when RX data has become invalid
                 
00421f c04e      	rjmp rxt203				;skip display update
                 
004220 940e 0736 rxt204:	call ScaleAuxInputValues		;divide RX values by 10
004222 9110 0561
004224 9120 0562
004226 9130 0563
004228 9140 0540
00422a 9150 0541
00422c 9160 0542
00422e 940e 4f3a
004230 9370 0561
004232 9380 0562
004234 9220 0563 	b16mul RxAux4, RxAux4, Temp		;TEMP was set to 0.1 in ScaleAuxInputValues
                 
004236 940e 4d81 	call LcdClear6x8
                 
004238 27bb      	clr xh					;print all channel labels first
004239 d06a      	rcall PrintAuxLabels
                 
00423a e001
00423b 9300 0740 	lrv Y1, 1				;aux2
00423d 91b0 055b
00423f 91a0 055c
004241 91d0 055d 	b16load RxAux2
004243 e2ea
004244 e8f5      	ldz notext*2
004245 efcf      	ser yl
004246 940e 42b4 	call PrintRxValue
                 
004248 91b0 055e
00424a 91a0 055f
00424c 91d0 0560 	b16load RxAux3				;aux3
00424e e2ea
00424f e8f5      	ldz notext*2
004250 efcf      	ser yl
004251 940e 42b4 	call PrintRxValue
                 
004253 d08e      	rcall PrintRxColon			;aux4
004254 91b0 0561
004256 91a0 0562
004258 91d0 0563 	b16load RxAux4
00425a 940e 4b47 	call Print16Signed
00425c e505
00425d 9300 073f 	lrv X1, xoff
00425f 9100 078e 	lds t, Aux4SwitchPosition
004261 e2e8
004262 e9fd      	ldz aux4txt*2
004263 940e 4c0f 	call PrintFromStringArray
                 
                 	;footer
004265 940e 4bdb 	call PrintBackFooter
                 
004267 940e 4d2c 	call LcdUpdate
                 
004269 9100 074d 	lds t, RxMode				;skip delay if serial input mode. This is needed for Stand-alone Gimbal mode
00426b 3002      	cpi t, RxModeSBus
00426c f40c      	brge rxt203
                 
00426d d086      	rcall RxPollDelay
                 
00426e 940e 4eaf rxt203:	call GetButtons
                 
004270 3008      	cpi t, 0x08				;BACK?
004271 f429      	brne rxt202
                 
004272 940e 1dd3 	call Beep				;return to the first RX test screen
004274 940e 4ecd 	call ReleaseButtons
004276 9508      	ret
                 
004277 cf96      rxt202:	rjmp rxTest2
                 
                 
                 
                 
004278 6f4e
004279 7320
00427a 6769
00427b 616e
00427c 006c      rxt8:	.db "No signal", 0
                 
00427d 0000      null:	.db 0, 0
00427e 654c
00427f 7466
004280 0000      left:	.db "Left", 0, 0
004281 6952
004282 6867
004283 0074      right:	.db "Right", 0
004284 6f46
004285 7772
004286 7261
004287 0064      fwd:	.db "Forward", 0
004288 6142
004289 6b63
00428a 0000      rev:	.db "Back", 0, 0
00428b 6449
00428c 656c
00428d 0000      idle:	.db "Idle", 0, 0
00428e 7546
00428f 6c6c
004290 0000      full:	.db "Full", 0, 0
004291 6543
004292 746e
004293 7265
004294 0000      center:	.db "Center", 0, 0
                 
004295 84fa
004296 84fa
004297 84fa      notext:	.dw null*2, null*2, null*2
004298 84fc
004299 84fa
00429a 8502      ailtxt:	.dw left*2, null*2, right*2
00429b 8508
00429c 84fa
00429d 8510      eletxt:	.dw fwd*2, null*2, rev*2
00429e 8516
00429f 84fa
0042a0 851c      thrtxt:	.dw idle*2, null*2, full*2
0042a1 8502
0042a2 84fa
0042a3 84fc      rudtxt:	.dw right*2, null*2, left*2
                 
                 
                 
                 	;--- Print AUX labels at specified X offset ---
                 
                 PrintAuxLabels:
                 
0042a4 e3a2      	ldi xl, '2'
                 
0042a5 93b0 073f pal1:	sts X1, xh				;register XH (input parameter) holds the X offset
0042a7 e6ec
0042a8 e9fc      	ldz aux*2
0042a9 940e 4c2e 	call PrintString
0042ab 2f0a      	mov t, xl
0042ac 940e 4c35 	call PrintChar
0042ae 940e 4b89 	call LineFeed
0042b0 95a3      	inc xl
0042b1 33a5      	cpi xl, '5'
0042b2 f791      	brne pal1
                 
0042b3 9508      	ret
                 
                 
                 
                 	;--- Print RX channel value and text ---
                 
                 PrintRxValue:
                 
0042b4 d02d      	rcall PrintRxColon
0042b5 23cc
0042b6 f02a      	brflagtrue yl, prt6			;register YL (input parameter) holds the "Valid Signal" flag
                 
0042b7 efe0
0042b8 e8f4      	ldz rxt8*2				;no signal
0042b9 940e 4c2e 	call PrintString
0042bb c020      	rjmp UpdateRxCursorPos
                 
0042bc 93ef
0042bd 93ff      prt6:	pushz					;register Z (input parameter) points to the string array that will be used
0042be 940e 4b47 	call Print16Signed			;register X and YH (input parameter) holds the RX channel value
0042c0 e505
0042c1 9300 073f 	lrv X1, xoff
                 
0042c3 23aa      	tst xl					;print "Center" when value is zero
0042c4 f449      	brne prt5
                 
0042c5 23dd      	tst yh
0042c6 f439      	brne prt5
                 
0042c7 e2e2
0042c8 e8f5      	ldz center*2
0042c9 940e 4c2e 	call PrintString
0042cb 91ff
0042cc 91ef      	popz
0042cd c011      	rjmp prt4
                 
0042ce d01d      prt5:	rcall CompareXZminus10			;print specified text when value is below -10 and above 10
0042cf f414      	brge prt1
                 
0042d0 27aa      	clr xl
0042d1 c005      	rjmp prt3
                 
0042d2 d01c      prt1:	rcall CompareXZplus10
0042d3 f414      	brge prt2
                 
0042d4 e0a1      	ldi xl, 1				;close to center
0042d5 c001      	rjmp prt3
                 
0042d6 e0a2      prt2:	ldi xl, 2
                 
0042d7 91ff
0042d8 91ef      prt3:	popz
                 
                 PrintRxText:
                 
0042d9 2f0a      	mov t, xl
0042da 940e 4c0f 	call PrintFromStringArray
                 
                 UpdateRxCursorPos:
                 
0042dc e309
0042dd 9300 073f 	lrv X1, 57
                 
0042df 940e 4b89 prt4:	call LineFeed
0042e1 9508      	ret
                 
                 
                 
                 	;--- Print a colon (:) ---
                 
                 PrintRxColon:
                 
0042e2 e300
0042e3 9300 073f 	lrv X1, 48
0042e5 e30a      	ldi t, ':'
0042e6 940e 4c35 	call PrintChar
0042e8 e309
0042e9 9300 073f 	lrv X1, 57
0042eb 9508      	ret
                 
                 
                 
                 	;--- Check if stick input exceeds 10% ---
                 
                 CompareXZminus10:
                 
0042ec efe6
0042ed efff      	ldz -10
0042ee c002      	rjmp CompareXZ
                 
                 CompareXZplus10:
                 
0042ef e0ea
0042f0 e0f0      	ldz 10
                 
                 CompareXZ:
                 
0042f1 17ae      	cp  xl, zl
0042f2 07bf      	cpc xh, zh
0042f3 9508      	ret
                 
                 
                 
                 	;--- Delay for RX polling ---
                 
                 RxPollDelay:
                 
0042f4 e0d5      	ldi yh, 5				;128ms delay
                 
0042f5 e0c0      rpd1:	ldi yl, 0
0042f6 940e 4ea1 	call wms
0042f8 95da      	dec yh
0042f9 f7d9      	brne rpd1
                 
0042fa 9508      	ret
                 
                 
                 
                 	;--- Scale inputs (divide by 10) ---
                 
                 ScaleInputValues:
                 
0042fb e000
0042fc 9300 0540
0042fe e000
0042ff 9300 0541
004301 e109
004302 9300 0542 	b16ldi Temp, 0.1
004304 9110 054c
004306 9120 054d
004308 9130 054e
00430a 9140 0540
00430c 9150 0541
00430e 9160 0542
004310 940e 4f3a
004312 9370 054c
004314 9380 054d
004316 9220 054e 	b16mul RxRoll, RxRoll, Temp
004318 9110 054f
00431a 9120 0550
00431c 9130 0551
00431e 9140 0540
004320 9150 0541
004322 9160 0542
004324 940e 4f3a
004326 9370 054f
004328 9380 0550
00432a 9220 0551 	b16mul RxPitch, RxPitch, Temp
00432c 9110 0555
00432e 9120 0556
004330 9130 0557
004332 9140 0540
004334 9150 0541
004336 9160 0542
004338 940e 4f3a
00433a 9370 0555
00433c 9380 0556
00433e 9220 0557 	b16mul RxYaw, RxYaw, Temp
004340 9110 0558
004342 9120 0559
004344 9130 055a
004346 9140 0540
004348 9150 0541
00434a 9160 0542
00434c 940e 4f3a
00434e 9370 0558
004350 9380 0559
004352 9220 055a 	b16mul RxAux, RxAux, Temp
                 
004354 e000
004355 9300 0540
004357 e000
004358 9300 0541
00435a e00d
00435b 9300 0542 	b16ldi Temp, 0.053
00435d 9110 0552
00435f 9120 0553
004361 9130 0554
004363 9140 0540
004365 9150 0541
004367 9160 0542
004369 940e 4f3a
00436b 9370 0552
00436d 9380 0553
00436f 9220 0554 	b16mul RxThrottle, RxThrottle, Temp
004371 9508      	ret
                 
                 .include "readrx.asm"
                 
                 
                 
                 
                 IsrRoll:
                 
004372 939f        push tt
004373 b6ff      	in SregSaver, sreg
                 
004374 9b4b      	sbis pind,3			;rising or falling?
004375 c00e      	rjmp rx1
                 
004376 9190 0084 	lds tt, tcnt1l			;rising, store the start value
004378 9390 074e 	sts RollStartL, tt
00437a 9190 0085 	lds tt, tcnt1h
00437c 9390 074f 	sts RollStartH, tt
                 	
00437e 2799      	clr tt
00437f 9390 075a 	sts RollDcnt, tt
                 
004381 919f        pop tt
004382 beff      	out sreg, SregSaver		;exit	
004383 9518      	reti
                 
004384 9190 0084 rx1:	lds tt, tcnt1l			;falling, calculate the pulse length
004386 90e0 074e 	lds treg, RollStartL
004388 199e      	sub tt, treg
004389 9390 07b0 	sts Channel1L, tt
                 
00438b 9190 0085 	lds tt, tcnt1h
00438d 90e0 074f 	lds treg, RollStartH
00438f 099e      	sbc tt, treg
004390 9390 07b1 	sts Channel1H, tt
                 
004392 919f        pop tt
004393 beff      	out sreg, SregSaver		;exit	
004394 9518      	reti
                 
                 
                 
                 IsrPitch:
                 
004395 939f        push tt
004396 b6ff      	in SregSaver, sreg
                 
004397 9b4a      	sbis pind,2			;rising or falling?
004398 c00e      	rjmp rx2
                 
004399 9190 0084 	lds tt, tcnt1l			;rising, store the start value
00439b 9390 0750 	sts PitchStartL, tt
00439d 9190 0085 	lds tt, tcnt1h
00439f 9390 0751 	sts PitchStartH, tt
                 
0043a1 2799      	clr tt
0043a2 9390 075b 	sts PitchDcnt, tt
                 	
0043a4 919f        pop tt
0043a5 beff      	out sreg, SregSaver		;exit	
0043a6 9518      	reti
                 
0043a7 9190 0084 rx2:	lds tt, tcnt1l			;falling, calculate the pulse length
0043a9 90e0 0750 	lds treg, PitchStartL
0043ab 199e      	sub tt, treg
0043ac 9390 07b2 	sts Channel2L, tt
                 
0043ae 9190 0085 	lds tt, tcnt1h
0043b0 90e0 0751 	lds treg, PitchStartH
0043b2 099e      	sbc tt, treg
0043b3 9390 07b3 	sts Channel2H, tt
                 
0043b5 919f        pop tt
0043b6 beff      	out sreg, SregSaver		;exit	
0043b7 9518      	reti
                 
                 
                 
                 IsrThrottleCppm:
                 
0043b8 939f        push tt
0043b9 b6ff      	in SregSaver, sreg
                 
0043ba 9190 074d 	lds tt, RxMode			;CPPM?
0043bc 3091      	cpi tt, RxModeCppm
0043bd f431      	brne IsrThrottle
                 
0043be 9948      	sbic pind, 0			;yes, rising or falling?
                 
0043bf 940c 0608 	jmp IsrCppm
                 
0043c1 919f        pop tt
0043c2 beff      	out sreg, SregSaver		;falling, exit	
0043c3 9518      	reti
                 
                 
                 
                 IsrThrottle:
                 
0043c4 9b48      	sbis pind,0			;rising or falling?
0043c5 c00e      	rjmp rx3
                 
0043c6 9190 0084 	lds tt, tcnt1l			;rising, store the start value
0043c8 9390 0752 	sts ThrottleStartL, tt
0043ca 9190 0085 	lds tt, tcnt1h
0043cc 9390 0753 	sts ThrottleStartH, tt
                 	
0043ce 2799      	clr tt
0043cf 9390 075c 	sts ThrottleDcnt, tt
                 
0043d1 919f        pop tt
0043d2 beff      	out sreg, SregSaver		;exit	
0043d3 9518      	reti
                 
0043d4 9190 0084 rx3:	lds tt, tcnt1l			;falling, calculate the pulse length
0043d6 90e0 0752 	lds treg, ThrottleStartL
0043d8 199e      	sub tt, treg
0043d9 9390 07b4 	sts Channel3L, tt
                 
0043db 9190 0085 	lds tt, tcnt1h
0043dd 90e0 0753 	lds treg, ThrottleStartH
0043df 099e      	sbc tt, treg
0043e0 9390 07b5 	sts Channel3H, tt
                 
0043e2 919f        pop tt
0043e3 beff      	out sreg, SregSaver		;exit	
0043e4 9518      	reti
                 
                 
                 
                 	;--- Common interrupt routine section for yaw and aux input ---
                 
                 IsrYawAux:
                 
0043e5 939f        push tt
0043e6 b6ff      	in SregSaver, sreg
                 
0043e7 93af      	push xl				;save the current time stamp
0043e8 93bf      	push xh
0043e9 91a0 0084 	lds xl, tcnt1l
0043eb 91b0 0085 	lds xh, tcnt1h
                 
0043ed d006      	rcall IsrYaw
0043ee d025      	rcall IsrAux
                 
0043ef 91bf      	pop xh				;exit
0043f0 91af      	pop xl
0043f1 919f        pop tt
0043f2 beff      	out sreg, SregSaver
0043f3 9518      	reti
                 
                 
                 
                 	;--- Rudder ISR ---
                 
                 IsrYaw:
                 
0043f4 b193      	in tt, pinb			;check for pin state change
0043f5 7094      	andi tt, 0x04
0043f6 90e0 0758 	lds treg, RudderRxPinState
0043f8 9390 0758 	sts RudderRxPinState, tt
0043fa 159e      	cp tt, treg
0043fb f409      	brne iyaw1
                 
0043fc 9508      	ret
                 
0043fd 9b1a      iyaw1:	sbis pinb, 2			;rising or falling?
0043fe c008      	rjmp iyaw2
                 
0043ff 93a0 0754 	sts YawStartL, xl		;rising, store the start value
004401 93b0 0755 	sts YawStartH, xh
                 
004403 2799      	clr tt				;clear timeout counter
004404 9390 075d 	sts YawDcnt, tt
004406 9508      	ret
                 
004407 2f9a      iyaw2:	mov tt, xl			;falling, calculate the pulse length
004408 90e0 0754 	lds treg, YawStartL
00440a 199e      	sub tt, treg
00440b 9390 07b6 	sts Channel4L, tt
                 
00440d 2f9b      	mov tt, xh
00440e 90e0 0755 	lds treg, YawStartH
004410 099e      	sbc tt, treg
004411 9390 07b7 	sts Channel4H, tt
004413 9508      	ret
                 
                 
                 
                 	;--- Aux ISR ---
                 
                 IsrAux:
                 
004414 b193      	in tt, pinb			;check for pin state change
004415 7091      	andi tt, 0x01
004416 90e0 0759 	lds treg, AuxRxPinState
004418 9390 0759 	sts AuxRxPinState, tt
00441a 159e      	cp tt, treg
00441b f409      	brne iaux1
                 
00441c 9508      	ret
                 
00441d 9b18      iaux1:	sbis pinb, 0			;rising or falling?
00441e c008      	rjmp iaux2
                 
00441f 93a0 0756 	sts AuxStartL, xl		;rising, store the start value
004421 93b0 0757 	sts AuxStartH, xh
                 
004423 2799      	clr tt				;clear timeout counter
004424 9390 075e 	sts AuxDcnt, tt
004426 9508      	ret
                 
004427 2f9a      iaux2:	mov tt, xl			;falling, calculate the pulse length
004428 90e0 0756 	lds treg, AuxStartL
00442a 199e      	sub tt, treg
00442b 9390 07b8 	sts Channel5L, tt
                 
00442d 2f9b      	mov tt, xh
00442e 90e0 0757 	lds treg, AuxStartH
004430 099e      	sbc tt, treg
004431 9390 07b9 	sts Channel5H, tt
004433 9508      	ret
                 
                 
                 
                 	;--- Jump to the correct RX routine based on selected RX mode ---
                 
                 GetRxChannels:				;OBSERVE: This routine should only be called from GUI code!
                 
004434 9100 074d 	lds t, RxMode
004436 3000      	cpi t, RxModeStandard
004437 f409      	brne grx1
                 
004438 c00a      	rjmp GetStdRxChannels
                 
004439 3001      grx1:	cpi t, RxModeCppm
00443a f411      	brne grx2
                 
00443b 940c 0655 	jmp GetCppmChannels
                 
00443d 3002      grx2:	cpi t, RxModeSBus
00443e f411      	brne grx3
                 
00443f 940c 0a3c 	jmp GetSBusChannels
                 
004441 940c 0e88 grx3:	jmp GetSatChannels
                 
                 
                 
                 	;--- Retrieve channel values for standard RX ---
                 
                 GetStdRxChannels:
                 
                 	;--- Roll ---
                 
004443 9000 07c2 	lds r0, MappedChannel1		;get aileron channel value
004445 d121      	rcall GetSafeChannelValue
004446 d12b      	rcall Sanitize
004447 d146      	rcall DeadZone
                 
004448 27dd      	clr yh
004449 93b0 054c
00444b 93a0 054d
00444d 93d0 054e 	b16store RxRoll
00444f d150      	rcall IsChannelCentered
004450 93c0 0774 	sts flagAileronCentered, yl
                 
                 	
                 	;--- Pitch ---
                 
004452 9000 07c3 	lds r0, MappedChannel2		;get elevator channel value
004454 d112      	rcall GetSafeChannelValue
004455 d11c      	rcall Sanitize
004456 d137      	rcall DeadZone
                 
004457 27dd      	clr yh
004458 93b0 054f
00445a 93a0 0550
00445c 93d0 0551 	b16store RxPitch
00445e d141      	rcall IsChannelCentered
00445f 93c0 0775 	sts flagElevatorCentered, yl
                 
                 
                 	;--- Throttle ---
                 
004461 9000 07c4 	lds r0, MappedChannel3		;get throttle channel value
004463 d103      	rcall GetSafeChannelValue
                 
004464 2700
004465 9300 0773 	rvsetflagfalse flagThrottleZero
                 
004467 d11d      	rcall Xabs			;X = ABS(X)
                 
004468 e3eb
004469 e0fb      	ldz 2875			;X = X - 2875 (1.15ms)
00446a 1bae      	sub xl, zl
00446b 0bbf      	sbc xh, zh
                 
00446c e0e0
00446d e0f0      	ldz 0				;X < 0 ?
00446e 17ae      	cp xl, zl
00446f 07bf      	cpc xh, zh
004470 f40c      	brge rx32
                 
004471 c005      	rjmp rx30			;yes, set to zero
                 
004472 e3e5
004473 e0fc      rx32:	ldz 3125			;X > 3125? (1.25ms)
004474 17ae      	cp xl, zl
004475 07bf      	cpc xh, zh
004476 f02c      	brlt rx33
                 
004477 e0a0
004478 e0b0      rx30:	ldx 0				;yes, set to zero
004479 ef0f
00447a 9300 0773 	rvsetflagtrue flagThrottleZero
                 
00447c 27dd      rx33:	clr yh
00447d 93b0 0552
00447f 93a0 0553
004481 93d0 0554 	b16store RxThrottle
                 
                 
                 	;--- Yaw ---
                 
004483 9000 07c5 	lds r0, MappedChannel4		;get rudder channel value
004485 d0e1      	rcall GetSafeChannelValue
004486 d0eb      	rcall Sanitize
004487 d106      	rcall DeadZone
                 
004488 27dd      	clr yh
004489 93b0 0555
00448b 93a0 0556
00448d 93d0 0557 	b16store RxYaw
                 
                 
                 	;--- AUX ---
                 
00448f 9000 07c6 	lds r0, MappedChannel5		;get aux channel value
004491 d0d5      	rcall GetSafeChannelValue
004492 d0df      	rcall Sanitize
                 
004493 27cc      	clr yl				;position #1
004494 eae8
004495 effd      	ldz -600
004496 17ae      	cp xl, zl
004497 07bf      	cpc xh, zh
004498 f09c      	brlt rx35
                 
004499 95c3      	inc yl				;position #2
00449a e3e8
00449b efff      	ldz -200
00449c 17ae      	cp xl, zl
00449d 07bf      	cpc xh, zh
00449e f06c      	brlt rx35
                 
00449f 95c3      	inc yl				;position #3
0044a0 ece8
0044a1 e0f0      	ldz 200
0044a2 17ae      	cp xl, zl
0044a3 07bf      	cpc xh, zh
0044a4 f03c      	brlt rx35
                 
0044a5 95c3      	inc yl				;position #4
0044a6 e5e8
0044a7 e0f2      	ldz 600
0044a8 17ae      	cp xl, zl
0044a9 07bf      	cpc xh, zh
0044aa f00c      	brlt rx35
                 
0044ab 95c3      	inc yl				;position #5
                 
0044ac 9100 0766
0044ae 2300
0044af f44a      rx35:	rvbrflagfalse flagAuxValid, rx24;won't update aux switch position while the input is invalid
                 
0044b0 93c0 0781 	sts AuxSwitchPosition, yl
0044b2 27dd      	clr yh
0044b3 93b0 0558
0044b5 93a0 0559
0044b7 93d0 055a 	b16store RxAux
                 
                 
                 rx24:	;--- AUX2 ---
                 
0044b9 9000 07c7 	lds r0, MappedChannel6		;get aux2 channel value
0044bb d0ab      	rcall GetSafeChannelValue
0044bc d0b5      	rcall Sanitize
                 
0044bd 27dd      	clr yh
0044be 93b0 055b
0044c0 93a0 055c
0044c2 93d0 055d 	b16store RxAux2
                 
                 
                 	;--- AUX3 ---
                 
0044c4 9000 07c8 	lds r0, MappedChannel7		;get aux3 channel value
0044c6 d0a0      	rcall GetSafeChannelValue
0044c7 d0aa      	rcall Sanitize
                 
0044c8 27dd      	clr yh
0044c9 93b0 055e
0044cb 93a0 055f
0044cd 93d0 0560 	b16store RxAux3
                 
                 
                 	;--- AUX4 ---
                 
0044cf 9000 07c9 	lds r0, MappedChannel8		;get aux4 channel value
0044d1 940e 4567 	call GetSafeChannelValue
0044d3 940e 4572 	call Sanitize
                 
0044d5 27cc      	clr yl				;position #1
0044d6 e7e0
0044d7 effe      	ldz -400
0044d8 17ae      	cp  xl, zl
0044d9 07bf      	cpc xh, zh
0044da f03c      	brlt rx38
                 
0044db 95c3      	inc yl				;position #2
0044dc e9e0
0044dd e0f1      	ldz 400
0044de 17ae      	cp  xl, zl
0044df 07bf      	cpc xh, zh
0044e0 f00c      	brlt rx38
                 
0044e1 95c3      	inc yl				;position #3
                 
0044e2 93c0 078e rx38:	sts Aux4SwitchPosition, yl
                 
0044e4 27dd      	clr yh
0044e5 93b0 0561
0044e7 93a0 0562
0044e9 93d0 0563 	b16store RxAux4
                 
                 
                 	;--- Check RX ---
                 
0044eb 9100 079d 	lds t, StatusBits			;clear the upper status bits to tag the aileron, elevator, throttle and rudder inputs as OK
0044ed 700f      	andi t, 0x0F
0044ee 9300 079d 	sts StatusBits, t
                 
0044f0 91a0 07c2 	lds xl, MappedChannel1			;aileron signal timed out?
0044f2 d063      	rcall CheckRxTimeout
0044f3 93b0 0762 	sts flagRollValid, xh
0044f5 f430      	brcc rx25
                 
0044f6 d045      	rcall CutThrottle			;yes, cut throttle
0044f7 9100 079d
0044f9 6100
0044fa 9300 079d 	setstatusbit NoAileronInput
                 
0044fc 91a0 07c3 rx25:	lds xl, MappedChannel2			;elevator signal timed out?
0044fe d057      	rcall CheckRxTimeout
0044ff 93b0 0763 	sts flagPitchValid, xh
004501 f430      	brcc rx26
                 
004502 d039      	rcall CutThrottle			;yes, cut throttle
004503 9100 079d
004505 6200
004506 9300 079d 	setstatusbit NoElevatorInput
                 
004508 91a0 07c4 rx26:	lds xl, MappedChannel3			;throttle signal timed out?
00450a d04b      	rcall CheckRxTimeout
00450b 93b0 0764 	sts flagThrottleValid, xh
00450d f430      	brcc rx27
                 
00450e d02d      	rcall CutThrottle			;yes, cut throttle
00450f 9100 079d
004511 6400
004512 9300 079d 	setstatusbit NoThrottleInput
                 
004514 91a0 07c5 rx27:	lds xl, MappedChannel4			;rudder signal timed out?
004516 d03f      	rcall CheckRxTimeout
004517 93b0 0765 	sts flagYawValid, xh
004519 f488      	brcc rx28
                 
00451a 9100 079d
00451c 6800
00451d 9300 079d 	setstatusbit NoRudderInput		;yes, set rudder value to zero
00451f e000
004520 9300 0555
004522 9300 0556
004524 9300 0557 	b16clr RxYaw
004526 9100 0770
004528 2300
004529 f40a      	rvbrflagfalse flagArmed, rx28
                 
00452a d01f      	rcall LostSignal
                 
00452b 91a0 07c6 rx28:	lds xl, MappedChannel5			;aux signal timed out?
00452d d028      	rcall CheckRxTimeout
00452e 93b0 0766 	sts flagAuxValid, xh
004530 f450      	brcc rx29
                 
004531 9100 0781 	lds t, AuxSwitchPosition		;yes, select AUX function #3 (if not already selected)
004533 3002      	cpi t, 2
004534 f031      	breq rx29
                 
004535 e002      	ldi t, 2
004536 9300 0781 	sts AuxSwitchPosition, t
004538 ef0f      	ser t					;make sure the AUX switch function will be updated
004539 9300 0782 	sts AuxSwitchPositionOld, t
                 
00453b 9508      rx29:	ret
                 
                 
                 
                 	;--- Cut throttle and set the RxSignalLost status bit ---
                 
                 CutThrottle:
                 
00453c e000
00453d 9300 0552
00453f 9300 0553
004541 9300 0554 	b16clr RxThrottle
004543 ef0f
004544 9300 0773 	rvsetflagtrue flagThrottleZero
004546 9100 0770
004548 2300
004549 f45a      	rvbrflagfalse flagArmed, cth1
                 
                 LostSignal:
                 
00454a 9100 079d
00454c 6003
00454d 9300 079d 	setstatusbit RxSignalLost		;set status bit for "Signal Lost" and activate the Lost Model alarm only when armed
00454f ef0f
004550 9300 077e 	rvsetflagtrue flagAlarmOverride
                 
004552 e0a1      	ldi xl, ErrorSignalLost
004553 940e 1573 	call LogError
                 
004555 9508      cth1:	ret
                 
                 
                 
                 	;--- Check for RX timeout ---
                 
                 CheckRxTimeout:
                 
004556 e5ca
004557 e0d7      	ldy RollDcnt				;find the mapped timeout counter
004558 27bb      	clr xh					;register XH (output value) will return the "valid" flag (0 = timeout)
004559 0fca      	add yl, xl				;register XL (input parameter) holds the mapped channel ID
00455a 1fdb      	adc yh, xh
                 
00455b 81e8      	ld zl, y				;load and increment counter
00455c 95e3      	inc zl
                 
00455d 9100 0767 	lds t, RxTimeoutLimit			;timeout?
00455f 17e0      	cp zl, t
004560 f010      	brlo rto2
                 
004561 9408      	sec					;yes, timer won't be updated (to prevent wrap-around)
004562 9508      	ret
                 
004563 efbf      rto2:	ser xh					;no timeout. Set the "valid" flag (output value) and save timer value before leaving
004564 83e8      	st y, zl
004565 9488      	clc
004566 9508      	ret
                 
                 
                 
                 	;--- Get channel value (blocking interrupts) ---
                 
                 GetSafeChannelValue:
                 
004567 ebe0
004568 e0f7
004569 e002
00456a 9d00
00456b 0de0
00456c 1df1      	ldzarray Channel1L, 2, r0		;register R0 (input parameter) holds the mapped channel ID
00456d 94f8      	cli
00456e 91a1      	ld xl, z+
00456f 81b0      	ld xh, z
004570 9478      	sei
                 
004571 9508      	ret
                 
                 
                 
                 	;--- Sanitize RX input ---
                 
                 Sanitize:
                 
004572 d012      	rcall Xabs	;X = ABS(X)
                 
004573 eae6
004574 e0fe      	ldz 3750	;X = X - 3750 (1.5ms)
004575 1bae      	sub xl, zl
004576 0bbf      	sbc xh, zh
                 
004577 e2ea
004578 eff9      	ldz -1750	;X < -1750?  (0.7ms)
004579 17ae      	cp xl, zl
00457a 07bf      	cpc xh, zh
00457b f034      	brlt sa2
                 
00457c ede6
00457d e0f6      	ldz 1750	;X > 1750?
00457e 17ae      	cp xl, zl
00457f 07bf      	cpc xh, zh
004580 f40c      	brge sa2
                 
004581 9508      	ret		;no, exit
                 
004582 e0a0
004583 e0b0      sa2:	ldx 0		;yes, set to zero
004584 9508      	ret
                 
                 
                 
                 	;--- Abs(X) ---
                 
                 Xabs:
                 
004585 23bb      	tst xh		;X = ABS(X)
004586 f432      	brpl xa1
                 
004587 95a0      	com xl
004588 95b0      	com xh
                 	
004589 e001      	ldi t, 1
00458a 0fa0      	add xl, t
00458b 2700      	clr t
00458c 1fb0      	adc xh, t
                 
00458d 9508      xa1:	ret
                 
                 
                 
                 	;--- Dead zone adjustment ---
                 
                 DeadZone:
                 
00458e 91f0 0606
004590 91e0 0607 	b16loadz StickDeadZone
                 
004592 23bb      	tst xh
004593 f422      	brpl dz1
                 
004594 0fae      	add xl, zl		;stick input is negative
004595 1fbf      	adc xh, zh
004596 f42a      	brpl dz2
                 
004597 9508      	ret
                 
004598 1bae      dz1:	sub xl, zl		;stick input is positive
004599 0bbf      	sbc xh, zh
00459a f00a      	brmi dz2
                 
00459b 9508      	ret
                 
00459c 27aa      dz2:	clr xl			;set stick input to zero
00459d 27bb      	clr xh
00459e 27dd      	clr yh
00459f 9508      	ret
                 
                 
                 
                 	;--- Check if input channel is centered ---
                 
                 IsChannelCentered:
                 
0045a0 e1e9
0045a1 e0f0      	ldz 25
0045a2 17ae      	cp xl, zl
0045a3 07bf      	cpc xh, zh
0045a4 f43c      	brge icc1
                 
0045a5 eee7
0045a6 efff      	ldz -25
0045a7 17ae      	cp xl, zl
0045a8 07bf      	cpc xh, zh
0045a9 f014      	brlt icc1
                 
0045aa efcf      	ser yl		;centered
0045ab 9508      	ret
                 
0045ac 27cc      icc1:	clr yl		;not centered
0045ad 9508      	ret
                 
                 .include "mainmenu.asm"
                 
                 
                 MainMenu:
                 
0045ae eac4
0045af e8db      men23:	ldy men1 * 2
                 
0045b0 91a0 0746 	lds xl, MainMenuListYposSave
0045b2 91b0 0745 	lds xh, MainMenuCursorYposSave
                 
0045b4 e102      	ldi t, 18		;number of menu items
                 #ifndef IN_FLIGHT_TUNING
0045b5 950a        dec t
                 #endif
                 
0045b6 940e 1de9 	call Menu
                 
0045b8 93c0 0746 	sts MainMenuListYposSave, yl
0045ba 93d0 0745 	sts MainMenuCursorYposSave, yh
                 
0045bc f008      	brcs men22		;BACK pressed?
0045bd 9508      	ret			;Yes, return
                 	
0045be 0faa      men22:	lsl xl			;No, calculate index    Z = *men18 * 2 + xl * 2
0045bf efe8
0045c0 e8fc      	ldz men18 * 2
0045c1 0fea      	add zl, xl
0045c2 2700      	clr t
0045c3 1ff0      	adc zh, t
                 
0045c4 91a5      	lpm xl, z+		;x = (Z)
0045c5 91b4      	lpm xh, z
                 	
0045c6 01fd      	movw z, x		;z = x
                 	
0045c7 9509      	icall			;go to choosen menu item code  (sound like an apple product!  lawlz)
                 
0045c8 940e 1dd3 	call Beep
                 
0045ca 940e 4d70 	call LcdClear		;blank screen
0045cc 940e 4d2c 	call LcdUpdate	
                 
0045ce 940e 4ecd 	call ReleaseButtons
                 	
0045d0 940c 45ae 	jmp men23
                 
                 
                 
                 
                 men1:	
                 #ifdef IN_FLIGHT_TUNING
                 #endif
0045d2 4950
0045d3 4520
0045d4 6964
0045d5 6f74
0045d6 2072
0045d7 2020
0045d8 2020
0045d9 2020
0045da 2020
0045db 2020      	.db "PI Editor           "
0045dc 6553
0045dd 666c
0045de 6c2d
0045df 7665
0045e0 6c65
0045e1 5320
0045e2 7465
0045e3 6974
0045e4 676e
0045e5 2073      	.db "Self-level Settings "
0045e6 7453
0045e7 6369
0045e8 206b
0045e9 6353
0045ea 6c61
0045eb 6e69
0045ec 2067
0045ed 2020
0045ee 2020
0045ef 2020      	.db "Stick Scaling       "
0045f0 6f4d
0045f1 6564
0045f2 5320
0045f3 7465
0045f4 6974
0045f5 676e
0045f6 2073
0045f7 2020
0045f8 2020
0045f9 2020      	.db "Mode Settings       "
0045fa 694d
0045fb 6373
0045fc 202e
0045fd 6553
0045fe 7474
0045ff 6e69
004600 7367
004601 2020
004602 2020
004603 2020      	.db "Misc. Settings      "
004604 6947
004605 626d
004606 6c61
004607 5320
004608 7465
004609 6974
00460a 676e
00460b 2073
00460c 2020
00460d 2020      	.db "Gimbal Settings     "
00460e 6441
00460f 6176
004610 636e
004611 6465
004612 5320
004613 7465
004614 6974
004615 676e
004616 2073
004617 2020      	.db "Advanced Settings   "
004618 5541
004619 2058
00461a 7753
00461b 7469
00461c 6863
00461d 5320
00461e 7465
00461f 7075
004620 2020
004621 2020      	.db "AUX Switch Setup    "
004622 6e49
004623 7469
004624 6169
004625 206c
004626 6553
004627 7574
004628 2070
004629 2020
00462a 2020
00462b 2020      	.db "Initial Setup       "
00462c 6552
00462d 6563
00462e 7669
00462f 7265
004630 5420
004631 7365
004632 2074
004633 2020
004634 2020
004635 2020      	.db "Receiver Test       "
004636 6553
004637 736e
004638 726f
004639 5420
00463a 7365
00463b 2074
00463c 2020
00463d 2020
00463e 2020
00463f 2020      	.db "Sensor Test         "
004640 6853
004641 776f
004642 4d20
004643 746f
004644 726f
004645 4c20
004646 7961
004647 756f
004648 2074
004649 2020      	.db "Show Motor Layout   "
00464a 7355
00464b 7265
00464c 5020
00464d 6f72
00464e 6966
00464f 656c
004650 2020
004651 2020
004652 2020
004653 2020      	.db "User Profile        "
004654 7845
004655 7274
004656 2061
004657 6546
004658 7461
004659 7275
00465a 7365
00465b 2020
00465c 2020
00465d 2020      	.db "Extra Features      "
00465e 5345
00465f 2043
004660 6143
004661 696c
004662 7262
004663 7461
004664 6f69
004665 206e
004666 2020
004667 2020      	.db "ESC Calibration     "
004668 6556
004669 7372
00466a 6f69
00466b 206e
00466c 6e49
00466d 6f66
00466e 6d72
00466f 7461
004670 6f69
004671 206e      	.db "Version Information "
004672 434c
004673 2044
004674 6f43
004675 746e
004676 6172
004677 7473
004678 2020
004679 2020
00467a 2020
00467b 2020      	.db "LCD Contrast        "
                 
                 
                 men18:	
                 #ifdef IN_FLIGHT_TUNING
                 #endif
00467c 32fc      	.dw PiEditor
00467d 58f3      	.dw SelflevelSettings
00467e 5938      	.dw StickScaling
00467f 5869      	.dw ModeSettings
004680 597d      	.dw MiscSettings
004681 1035      	.dw GimbalSettings
004682 5784      	.dw AdvancedSettings
004683 2048      	.dw AuxSwitchSetup
004684 5ae6      	.dw InitialSetup
004685 416e      	.dw RxTest
004686 468d      	.dw SensorTest
004687 5a07      	.dw MotorLayout
004688 16da      	.dw UserProfileSetup
004689 5824      	.dw ExtraFeatures
00468a 5692      	.dw EscCalWarning
00468b 571b      	.dw ShowVersion
00468c 57c9      	.dw Contrast
                 
                 
                 .include "sensortest.asm"
                 
                 
                 
                 SensorTest:
                 
00468d 940e 2856 	call GyroCal			;calibrate gyro since the gyro settings (MPU6050) may have been changed
                 
00468f 940e 479b sen1:	call ReadSensors
                 
004691 940e 4d81 	call LcdClear6x8
                 
                 	;labels
004693 e006      	ldi t, 6
004694 edee
004695 e8fe      	ldz sen19*2
004696 940e 4c18 	call PrintStringArray
                 
                 	;values
004698 9468      	set				;set the T flag to indicate that sensor test is running
                 
004699 e001
00469a 9300 0740 	lrv Y1, 1			;gyro X
00469c 91b0 0567
00469e 91a0 0568
0046a0 91d0 0569 	b16load GyroPitch
0046a2 d079      	rcall PrintGyroValue
                 	
0046a3 91b0 0564
0046a5 91a0 0565
0046a7 91d0 0566 	b16load GyroRoll		;gyro Y
0046a9 d072      	rcall PrintGyroValue
                 
0046aa 91b0 056a
0046ac 91a0 056b
0046ae 91d0 056c 	b16load GyroYaw			;gyro Z
0046b0 d06b      	rcall PrintGyroValue
                 
0046b1 91b0 057c
0046b3 91a0 057d
0046b5 91d0 057e 	b16load AccX			;acc X
0046b7 eeee
0046b8 e8fe      	ldz sen21*2
0046b9 d06a      	rcall PrintAccValue
                 
0046ba 91b0 057f
0046bc 91a0 0580
0046be 91d0 0581 	b16load AccY			;acc Y
0046c0 efe4
0046c1 e8fe      	ldz sen22*2
0046c2 d061      	rcall PrintAccValue
                 
0046c3 91b0 0582
0046c5 91a0 0583
0046c7 91d0 0584 	b16load AccZ			;acc Z
0046c9 e2ea
0046ca e8f5      	ldz notext*2
0046cb d058      	rcall PrintAccValue
                 
                 	;footer
0046cc 940e 4bdb 	call PrintBackFooter
                 
0046ce 940e 4d2c 	call LcdUpdate
                 
0046d0 e0d5      	ldi yh, 5
0046d1 e0c0      sen10:	ldi yl, 0
0046d2 940e 4ea1 	call wms
0046d4 95da      	dec yh
0046d5 f7d9      	brne sen10
                 	
0046d6 940e 4eaf 	call GetButtons
0046d8 3008      	cpi t, 0x08			;BACK?
0046d9 f409      	brne sen16
                 
0046da 9508      	ret	
                 
0046db 940c 468f sen16:	jmp sen1
                 
                 
                 
                 
                 
                 GyroCheck:
                 
0046dd e8c8
0046de efdf      	ldy GyroLowLimit
0046df d050      	rcall GetGyroLimit16		;compensate for selected gyro configuration
0046e0 940e 4eac 	call CmpXy
0046e2 f0b4      	brlt sen14
                 
0046e3 e7c8
0046e4 e0d0      	ldy GyroHighLimit
0046e5 d04a      	rcall GetGyroLimit16		;compensate for selected gyro configuration
0046e6 940e 4eac 	call CmpXy
0046e8 f484      	brge sen14
                 
0046e9 e001      	ldi t, 1			;OK
0046ea c011      	rjmp sen15
                 
                 AccCheck:
                 
0046eb e8c8
0046ec efdf      	ldy AccLowLimit
0046ed d04e      	rcall GetAccLimit16		;compensate for selected ACC configuration
0046ee 940e 4eac 	call CmpXy
0046f0 f044      	brlt sen14
                 
0046f1 e4ca
0046f2 e0d1      	ldy AccZHighLimit
0046f3 d048      	rcall GetAccLimit16		;compensate for selected ACC configuration
0046f4 940e 4eac 	call CmpXy
0046f6 f414      	brge sen14
                 
0046f7 e001      	ldi t, 1			;OK
0046f8 c003      	rjmp sen15
                 
0046f9 2700      sen14:	clr t				;not OK
0046fa 9300 0792 	sts flagSensorsOk, t
                 
0046fc e4ac      sen15:	ldi xl, 76
0046fd 93a0 073f 	sts X1, xl
0046ff eeea
004700 e8fe      	ldz sen20*2
004701 940e 4c0f 	call PrintFromStringArray
004703 9508      	ret
                 
                 
                 
                 AccDirectionText:
                 
004704 e2c0      	ldi yl, 32			;will print text (Forward, Back, Left and Right) when the board is slightly tilted
004705 d042      	rcall GetAccLimit8		;compensate for selected ACC configuration
004706 e001      	ldi t, 1
                 
004707 940e 4eac 	call CmpXy			;positive tilt limit (32, 16, 8 or 4, corresponding to 2g, 4g, 8g and 16g) for text display
004709 f43c      	brge sen17
                 
00470a 95c1      	neg yl				;negative tilt limit
00470b 95c3      	inc yl
00470c efdf      	ser yh
00470d 940e 4eac 	call CmpXy
00470f f014      	brlt sen18
                 
004710 9508      	ret				;no text is printed when the board isn't tilted enough
                 
004711 2700      sen17:	clr t
                 
004712 91a0 0749 sen18:	lds xl, BoardOrientation	;compensate for +/- 90 degrees board rotation
004714 70a1      	andi xl, 0x01
004715 0f0a      	add t, xl			;normal (XL=0) or reversed (XL=1) axis
                 
004716 e4ac      	ldi xl, 76
004717 93a0 073f 	sts X1, xl
004719 940e 4c0f 	call PrintFromStringArray
00471b 9508      	ret
                 
                 
                 
                 PrintGyroValue:
                 
00471c e300
00471d 9300 073f 	lrv X1, 48
00471f 940e 4b47 	call Print16Signed
004721 f05e      	brts pav1
                 
004722 dfba      	rcall GyroCheck			;print "OK" or "Not OK" only during sensor calibration
004723 c009      	rjmp pav1
                 
                 PrintAccValue:
                 
004724 e300
004725 9300 073f 	lrv X1, 48
004727 940e 4b47 	call Print16Signed
004729 f016      	brts pav2
                 
00472a dfc0      	rcall AccCheck			;print "OK" or "Not OK" only during sensor calibration
00472b c001      	rjmp pav1
                 
00472c dfd7      pav2:	rcall AccDirectionText		;print tilt direction during sensor test only
                 
00472d 940e 4b89 pav1:	call LineFeed
00472f 9508      	ret
                 
                 
                 
                 	;--- Calculate 16 bit gyro limit based on the current configuration ---
                 
                 GetGyroLimit16:
                 
004730 9100 073c 	lds t, MpuGyroCfg
004732 9506      	lsr t
004733 9506      	lsr t
004734 9506      	lsr t
004735 f409      	brne ggl10
                 
004736 9508      	ret
                 
004737 95d5      ggl10:	asr yh				;register Y (input/output) initially holds the limit to be used for 250 degrees/s
004738 95c7      	ror yl
004739 950a      	dec t
00473a f7e1      	brne ggl10
                 
00473b 9508      	ret				;register Y holds the output value
                 
                 
                 
                 	;--- Calculate 16 bit accelerometer limit based on the current configuration ---
                 
                 GetAccLimit16:
                 
00473c 9100 073b 	lds t, MpuAccCfg
00473e 9506      	lsr t
00473f 9506      	lsr t
004740 9506      	lsr t
004741 f409      	brne gal10
                 
004742 9508      	ret				;current ACC setting is 2g so no calculation is necessary
                 
004743 95d5      gal10:	asr yh				;register Y (input/output) initially holds the limit to be used for 2g
004744 95c7      	ror yl
004745 950a      	dec t
004746 f7e1      	brne gal10
                 
004747 9508      	ret				;register Y holds the output value
                 
                 
                 
                 	;--- Calculate 8 bit accelerometer limit based on the current configuration ---
                 
                 GetAccLimit8:
                 
004748 91d0 073b 	lds yh, MpuAccCfg
00474a 95d6      	lsr yh
00474b 95d6      	lsr yh
00474c 95d6      	lsr yh
00474d f409      	brne gal1
                 
00474e 9508      	ret				;current ACC setting is 2g so no calculation is necessary
                 
00474f 95c6      gal1:	lsr yl				;register YL (input/output) initially holds the limit to be used for 2g
004750 95da      	dec yh
004751 f7e9      	brne gal1
                 
004752 9508      	ret				;register YL holds the output value
                 
                 
                 
004753 7947
004754 6f72
004755 5820
004756 003a      sen2:	.db "Gyro X:", 0
004757 7947
004758 6f72
004759 5920
00475a 003a      sen3:	.db "Gyro Y:", 0
00475b 7947
00475c 6f72
00475d 5a20
00475e 003a      sen4:	.db "Gyro Z:", 0
00475f 6341
004760 2063
004761 2058
004762 003a      sen5:	.db "Acc X :", 0
004763 6341
004764 2063
004765 2059
004766 003a      sen6:	.db "Acc Y :", 0
004767 6341
004768 2063
004769 205a
00476a 003a      sen7:	.db "Acc Z :", 0
00476b 6f4e
00476c 2074
00476d 4b4f
00476e 0000      sen13:	.db "Not OK", 0, 0
                 
00476f 8ea6
004770 8eae
004771 8eb6
004772 8ebe
004773 8ec6
004774 8ece      sen19:	.dw sen2*2, sen3*2, sen4*2, sen5*2, sen6*2, sen7*2
004775 8ed6
004776 9bda      sen20:	.dw sen13*2, ok*2
                 
004777 8508
004778 8510
004779 8508      sen21:	.dw fwd*2, rev*2, fwd*2		;normal and reversed tilt directions
00477a 84fc
00477b 8502
00477c 84fc      sen22:	.dw left*2, right*2, left*2
                 
                 
                 .include "sensorreading.asm"
                 
                 .def	twidata	=r18
                 
                 
                 AdcRead:
                 ReadBatteryVoltage:
                 
                 	;--- ADC pt. 1 ---
                 
00477d e003      	ldi t, 3
00477e 9300 007c 	store admux, t			;channel to be read
                 
                 	;        76543210
004780 ec07      	ldi t, 0b11000111
004781 9300 007a 	store adcsra, t			;start ADC
                 
                 
                 	;--- Read MPU6050 registers while waiting for ADC to complete ---
                 
004783 e30b      	ldi t, 0x3B			;read MPU6050 from 0x3B
004784 9300 0738 	sts TWI_address, t
004786 e02e      	ldi twidata, 14			;read 14 addresses
004787 940e 4998 	call i2c_read_adr_d
                 
                 
                 	;--- ADC pt. 2 ---
                 	
004789 91a0 0078 	load xl, adcl			;X = ADC
00478b 91b0 0079 	load xh, adch
                 
00478d 91d0 0591 	lds yh, BatteryVoltageOffset	;add offset
00478f 91c0 0592 	lds yl, BatteryVoltageOffset + 1
004791 0fac      	add xl, yl
004792 1fbd      	adc xh, yh
                 
004793 27dd      	clr yh
004794 93b0 058e
004796 93a0 058f
004798 93d0 0590 	b16store BatteryVoltage
00479a 9508      	ret
                 
                 
                 
                 	;--- Read sensors and adjust sensor values ---
                 
                 ReadSensors:
                 
00479b dfe1      	rcall AdcRead
                 
00479c 9130 0564
00479e 9140 0565
0047a0 9150 0566
0047a2 9160 056d
0047a4 9170 056e
0047a6 9180 056f
0047a8 1b58
0047a9 0b47
0047aa 0b36
0047ab 9330 0564
0047ad 9340 0565
0047af 9350 0566 	b16sub GyroRoll, GyroRoll, GyroRollZero
0047b1 9130 0567
0047b3 9140 0568
0047b5 9150 0569
0047b7 9160 0570
0047b9 9170 0571
0047bb 9180 0572
0047bd 1b58
0047be 0b47
0047bf 0b36
0047c0 9330 0567
0047c2 9340 0568
0047c4 9350 0569 	b16sub GyroPitch, GyroPitch, GyroPitchZero
0047c6 9130 056a
0047c8 9140 056b
0047ca 9150 056c
0047cc 9160 0573
0047ce 9170 0574
0047d0 9180 0575
0047d2 1b58
0047d3 0b47
0047d4 0b36
0047d5 9330 056a
0047d7 9340 056b
0047d9 9350 056c 	b16sub GyroYaw, GyroYaw, GyroYawZero
                 
0047db 9130 057c
0047dd 9140 057d
0047df 9150 057e
0047e1 9160 0585
0047e3 9170 0586
0047e5 9180 0587
0047e7 1b58
0047e8 0b47
0047e9 0b36
0047ea 9330 057c
0047ec 9340 057d
0047ee 9350 057e 	b16sub AccX, AccX, AccXZero			;remove offset from Acc
0047f0 9130 057f
0047f2 9140 0580
0047f4 9150 0581
0047f6 9160 0588
0047f8 9170 0589
0047fa 9180 058a
0047fc 1b58
0047fd 0b47
0047fe 0b36
0047ff 9330 057f
004801 9340 0580
004803 9350 0581 	b16sub AccY, AccY, AccYZero
004805 9130 0582
004807 9140 0583
004809 9150 0584
00480b 9160 058b
00480d 9170 058c
00480f 9180 058d
004811 1b58
004812 0b47
004813 0b36
004814 9330 0582
004816 9340 0583
004818 9350 0584 	b16sub AccZ, AccZ, AccZZero
                 
                 
                 	;--- Board orientation ---
                 
00481a 9100 0749 	lds t, BoardOrientation
00481c 3001      	cpi t, 1
00481d f009      	breq bo1
                 
00481e c055      	rjmp bo2
                 
00481f 9100 0564
004821 9300 0540
004823 9100 0565
004825 9300 0541
004827 9100 0566
004829 9300 0542 bo1:	b16mov Temp, GyroRoll				;90 degrees
                 //	b16neg GyroPitch
00482b 9160 0567
00482d 9170 0568
00482f 9180 0569
004831 2755
004832 2744
004833 2733
004834 1b58
004835 0b47
004836 0b36
004837 9330 0564
004839 9340 0565
00483b 9350 0566 	b16nmov GyroRoll, GyroPitch
00483d 9100 0540
00483f 9300 0567
004841 9100 0541
004843 9300 0568
004845 9100 0542
004847 9300 0569 	b16mov GyroPitch, Temp
                 
004849 9100 057c
00484b 9300 0540
00484d 9100 057d
00484f 9300 0541
004851 9100 057e
004853 9300 0542 	b16mov Temp, AccX
                 //	b16neg AccY
004855 9160 057f
004857 9170 0580
004859 9180 0581
00485b 2755
00485c 2744
00485d 2733
00485e 1b58
00485f 0b47
004860 0b36
004861 9330 057c
004863 9340 057d
004865 9350 057e 	b16nmov AccX, AccY
004867 9100 0540
004869 9300 057f
00486b 9100 0541
00486d 9300 0580
00486f 9100 0542
004871 9300 0581 	b16mov AccY, Temp
004873 9508      	ret
                 
004874 3002      bo2:	cpi t, 2
004875 f009      	breq bo3
                 
004876 c049      	rjmp bo4
                 
004877 9160 0567
004879 9170 0568
00487b 9180 0569
00487d 2755
00487e 2744
00487f 2733
004880 1b58
004881 0b47
004882 0b36
004883 9330 0567
004885 9340 0568
004887 9350 0569 bo3:	b16neg GyroPitch				;180 degrees
004889 9160 0564
00488b 9170 0565
00488d 9180 0566
00488f 2755
004890 2744
004891 2733
004892 1b58
004893 0b47
004894 0b36
004895 9330 0564
004897 9340 0565
004899 9350 0566 	b16neg GyroRoll
00489b 9160 057c
00489d 9170 057d
00489f 9180 057e
0048a1 2755
0048a2 2744
0048a3 2733
0048a4 1b58
0048a5 0b47
0048a6 0b36
0048a7 9330 057c
0048a9 9340 057d
0048ab 9350 057e 	b16neg AccX
0048ad 9160 057f
0048af 9170 0580
0048b1 9180 0581
0048b3 2755
0048b4 2744
0048b5 2733
0048b6 1b58
0048b7 0b47
0048b8 0b36
0048b9 9330 057f
0048bb 9340 0580
0048bd 9350 0581 	b16neg AccY
0048bf 9508      	ret
                 
0048c0 3003      bo4:	cpi t, 3
0048c1 f009      	breq bo5
                 
0048c2 9508      	ret
                 
0048c3 9100 0567
0048c5 9300 0540
0048c7 9100 0568
0048c9 9300 0541
0048cb 9100 0569
0048cd 9300 0542 bo5:	b16mov Temp, GyroPitch				;270 degrees
                 //	b16neg GyroRoll
0048cf 9160 0564
0048d1 9170 0565
0048d3 9180 0566
0048d5 2755
0048d6 2744
0048d7 2733
0048d8 1b58
0048d9 0b47
0048da 0b36
0048db 9330 0567
0048dd 9340 0568
0048df 9350 0569 	b16nmov GyroPitch, GyroRoll
0048e1 9100 0540
0048e3 9300 0564
0048e5 9100 0541
0048e7 9300 0565
0048e9 9100 0542
0048eb 9300 0566 	b16mov GyroRoll, Temp
                 
0048ed 9100 057f
0048ef 9300 0540
0048f1 9100 0580
0048f3 9300 0541
0048f5 9100 0581
0048f7 9300 0542 	b16mov Temp, AccY
                 //	b16neg AccX
0048f9 9160 057c
0048fb 9170 057d
0048fd 9180 057e
0048ff 2755
004900 2744
004901 2733
004902 1b58
004903 0b47
004904 0b36
004905 9330 057f
004907 9340 0580
004909 9350 0581 	b16nmov AccY, AccX
00490b 9100 0540
00490d 9300 057c
00490f 9100 0541
004911 9300 057d
004913 9100 0542
004915 9300 057e 	b16mov AccX, Temp
004917 9508      	ret
                 
                 
                 
                 // i2c_start command==========================
                 
                 i2c_start:
004918 e012      	ldi		i,2		// try 2times for test TWI communcation
                 i2c_start2:
004919 ea04      	ldi		t, (1<<TWINT) | (1 << TWEN) | (1 << TWSTA)
00491a 9300 00bc 	store	TWCR, t
                 
00491c d19b          rcall   i2c_wait
                 
00491d 9100 00b9 	lds	t, TWSR
                 
00491f 7f08      	andi   	t,0xF8   //Mask TWSR value
004920 3008         	cpi   	t,0x08   //check if TW_START
004921 f021          breq   	i2c_start3
004922 3100         	cpi   	t,0x10   //check if TW_REP_START
004923 f011          breq  	i2c_start3	
004924 9488      	clc
004925 9508      	ret				//leave if TWI not free
                 
                 i2c_start3:
004926 ed00         	ldi 	t,0xD0   //device name with write command
004927 9300 00bb    	store  	TWDR, t
                  
004929 e804         	ldi   	t,(1<<TWINT)|(1<<TWEN)
00492a 9300 00bc    	store   TWCR,t 
                  
00492c d18b      	rcall   i2c_wait
                 
00492d 9100 00b9 	lds		t,TWSR
00492f 7f08      	andi   	t,0xF8   //Mask
004930 3108      	cpi		t,0x18		//check if slave ack
004931 f039      	breq   	i2c_start_ok
004932 951a      	dec		i
004933 3010      	cpi		i,0
004934 f011      	breq	i2c_start_err    //leave if slave not ack for 2 times
004935 3200      	cpi		t,0x20     //try again if reply with slave not ack 
004936 f311      	breq	i2c_start2
                 
                 i2c_start_err:	
004937 9488      	clc		// clear carry if error
004938 9508      	ret
                 
                 i2c_start_ok:
004939 9408      	sec		// set carry if start ok
00493a 9508       	ret
                 
                 // End i2c_start ==========================
                 
                 
                 // i2c_read_command =================
                 i2c_read:
00493b e012      	ldi		i,2		// try 2times for test TWI communcation
                 i2c_read2:
00493c ea04      	ldi		t, (1<<TWINT) | (1 << TWEN) | (1 << TWSTA)
00493d 9300 00bc 	store	TWCR, t
                 
00493f d178          rcall   i2c_wait
                 
004940 9100 00b9 	lds		t, TWSR
                 
004942 7f08      	andi   	t,0xF8   //Mask TWSR value
004943 3008          cpi   	t,0x08   //check if TW_START
004944 f021          breq   	i2c_read3 
004945 3100          cpi   	t,0x10   //check if TW_REP_START
004946 f011          breq  	i2c_read3	
004947 9488      	clc
004948 9508      	ret				//leave if TWI not free
                 
                 i2c_read3:
004949 ed01         	ldi 	t,0xD1   //device name with read command
                 
00494a 9300 00bb    	store 	TWDR, t
                  
00494c e804         	ldi   	t,(1<<TWINT)|(1<<TWEN)
00494d 9300 00bc    	store    TWCR,t 
                  
00494f d168      	rcall   i2c_wait
                 
004950 9100 00b9 	lds		t,TWSR
004952 7f08      	andi   	t,0xF8   	//Mask
004953 3400      	cpi		t,0x40		//check if read slave ack
004954 f039      	breq   	i2c_read_ok
004955 951a      	dec		i
004956 3010      	cpi		i,0
004957 f011      	breq	i2c_read_err    //leave if read slave not ack for 2 times
004958 3408      	cpi		t,0x48     	//try again if reply with read slave not ack 
004959 f311      	breq	i2c_read2
                 
                 i2c_read_err:	
00495a 9488      	clc		// clear carry if error
00495b 9508      	ret
                 
                 i2c_read_ok:
00495c 9408      	sec		// set carry if start ok
00495d 9508      	ret
                 // End i2c_read_command =================
                 
                 
                 // Send read with start command ================
                 i2c_read_adr:
00495e 940e 4918 	call	i2c_start
004960 f008      	brcs	i2c_read_adr2
004961 9508      	ret
                 	 
                 i2c_read_adr2:
004962 9100 0738 	lds		t, TWI_address
004964 940e 4989 	call	i2c_write_address
004966 f008      	brcs	go_read
004967 9508      	ret
                 
                 go_read:
004968 940e 493b  	call	i2c_read
00496a f008      	brcs	go_load_data
00496b 9508      	ret
                     
                 go_load_data:
00496c e012      	ldi		i,2
00496d 940e 4976 	call	i2c_get_data
00496f f420      	brcc	no_data			
004970 9100 00bb 	lds		t,TWDR
004972 9408      	sec
004973 9508      	ret
                 
                 no_data:
004974 9488      	clc
004975 9508      	ret
                 // End Send read with start command ================
                 
                 
                 // i2c_get_data_command =================
                 i2c_get_data:
004976 e804      	ldi   	t,(1<<TWINT)|(1<<TWEN)   // last data for read
                    	
                 i2c_get_data2:	
004977 9300 00bc 	store   TWCR,t 
004979 d13e      	rcall   i2c_wait
                 
00497a 9100 00b9 	lds		t,TWSR
00497c 7f08      	andi   	t,0xF8   //Mask
00497d 3500       	cpi   	t,0x50   // check if start
00497e f031          breq   	i2c_data_ok
00497f 3508          cpi   	t,0x58   // check if restart
004980 f021          breq  	i2c_data_ok
004981 9488       	clc
004982 3010      	cpi		i,0
004983 f791      	brne	i2c_get_data
004984 9508      	ret
                 
                 i2c_data_ok:
004985 940e 4abd 	call	i2c_stop
004987 9408      	sec
004988 9508      	ret
                 // End i2c_get_data_command =================
                 
                 
                 // i2c_write_address =================
                 i2c_write_address:
004989 9300 00bb 	store  	TWDR, t
                 
00498b e804      	ldi   	t,(1<<TWINT)|(1<<TWEN)
00498c 9300 00bc    	store   TWCR,t 
                  
00498e d129      	rcall   i2c_wait
                 
00498f 9100 00b9 	lds		t, TWSR
004991 7f08      	andi   	t,0xF8   //Mask
004992 3208      	cpi		t,0x28	 //check if data ack
004993 f011      	breq   	i2c_write_address_ok
004994 9488      	clc		//false if data not ack
004995 9508      	ret
                 
                 i2c_write_address_ok:
004996 9408      	sec
004997 9508      	ret
                 // End i2c_write_address =================
                 
                 
                 //Send_start ================
                 ;**************************** 
                 ;func: .cs = I2C_Start(void) // .cs if free 
                 ;**************************** 
                 //I2C_Start: 
                 i2c_read_adr_d:
004998 940e 4918 	call	i2c_start
00499a f008      	brcs	i2c_read_adr2_d
00499b 9508      	ret
                 	 
                 i2c_read_adr2_d:
00499c 9100 0738 	lds		t, TWI_address
00499e 940e 4989 	call	i2c_write_address
0049a0 f008      	brcs	go_read_d
0049a1 9508      	ret
                 
                 go_read_d:
0049a2 940e 493b  	call	i2c_read
0049a4 f008      	brcs	go_load_data_d
0049a5 9508      	ret
                   
                 go_load_data_d:
0049a6 e012      	ldi		i,2
0049a7 d005      	rcall	i2c_get_data_d
0049a8 f410      	brcc	no_data_d			
0049a9 9408      	sec
0049aa 9508      	ret
                 
                 no_data_d:
0049ab 9488      	clc
0049ac 9508      	ret
                 //Send_start ================
                 
                 
                 //i2c_get_data_command =================
                 i2c_get_data_d:
0049ad 952a      	dec		twidata
0049ae 3020      	cpi		twidata,0
0049af f011      	breq	last_data_d
                 
0049b0 ec04      	ldi   	t,(1<<TWINT)|(1<<TWEN)|(1<<TWEA)
0049b1 c001      	rjmp	i2c_get_data2_d
                 
                 last_data_d:
0049b2 e804      	ldi   	t,(1<<TWINT)|(1<<TWEN)
                 
                    	
                 i2c_get_data2_d:	
0049b3 9300 00bc 	store   TWCR,t 
0049b5 940e 4ab8 	call   i2c_wait
                 
0049b7 9100 00b9 	lds		t,TWSR
0049b9 7f08      	andi   	t,0xF8   //Mask
0049ba 3500       	cpi   	t,0x50   // check if start
0049bb f021          breq   	I2C_data_ok_d
0049bc 3508          cpi   	t,0x58   // check if restart
0049bd f011          breq  	I2C_data_ok_d
0049be 9488       	clc
0049bf 9508      	ret
                 
                 I2C_data_ok_d:	
                 
0049c0 27dd      	clr		yh					; cleared for 16.8 register stores below
                 
0049c1 302d      	cpi		twidata,13			; ACCY_H
0049c2 f419      	brne	data2
0049c3 91b0 00bb 	load	xh,twdr				; data1 save
0049c5 c0da      	rjmp	check_last
                 
                 data2:
0049c6 302c      	cpi		twidata,12			; ACCY_L
0049c7 f409      	brne	data3a
0049c8 c002      	rjmp	data2_1
                 data3a:
0049c9 940c 49e3 	jmp		data3
                 data2_1:
0049cb 91a0 00bb 	load	xl,twdr				; data2 save
0049cd 93b0 057f
0049cf 93a0 0580
0049d1 93d0 0581 	b16store AccY
0049d3 9160 057f
0049d5 9170 0580
0049d7 9180 0581
0049d9 e006
0049da 940e 4f2b
0049dc 9360 057f
0049de 9370 0580
0049e0 9380 0581 	b16fdiv AccY,6				; shift 6 bits
0049e2 c0bd      	rjmp	check_last
                 
                 data3:
0049e3 302b      	cpi		twidata,11			; ACCX_H
0049e4 f419      	brne	data4
0049e5 91b0 00bb 	load	xh,twdr				; data3 save
0049e7 c0b8      	rjmp	check_last
                 
                 data4:
0049e8 302a      	cpi		twidata,10			; ACCX_L
0049e9 f409      	brne	data5a
0049ea c002      	rjmp	data4_1
                 data5a:
0049eb 940c 4a17 	jmp		data5
                 data4_1:
0049ed 91a0 00bb 	load	xl,twdr				; data4 save
0049ef 93b0 057c
0049f1 93a0 057d
0049f3 93d0 057e 	b16store AccX
0049f5 9160 057c
0049f7 9170 057d
0049f9 9180 057e
0049fb 2755
0049fc 2744
0049fd 2733
0049fe 1b58
0049ff 0b47
004a00 0b36
004a01 9330 057c
004a03 9340 057d
004a05 9350 057e 	b16neg	AccX		
004a07 9160 057c
004a09 9170 057d
004a0b 9180 057e
004a0d e006
004a0e 940e 4f2b
004a10 9360 057c
004a12 9370 057d
004a14 9380 057e 	b16fdiv AccX,6				; shift 6 bits
004a16 c089      	rjmp	check_last
                 
                 data5:
004a17 3029      	cpi		twidata,9			; ACCZ_H
004a18 f419      	brne	data6
004a19 91b0 00bb 	load	xh,twdr				; data5 save
004a1b c084      	rjmp	check_last
                 
                 data6:
004a1c 3028      	cpi		twidata,8			; ACCZ_L
004a1d f4c1      	brne	data7
004a1e 91a0 00bb 	load	xl,twdr				; data6 save
004a20 93b0 0582
004a22 93a0 0583
004a24 93d0 0584 	b16store AccZ
004a26 9160 0582
004a28 9170 0583
004a2a 9180 0584
004a2c e006
004a2d 940e 4f2b
004a2f 9360 0582
004a31 9370 0583
004a33 9380 0584 	b16fdiv AccZ,6				; shift 6 bits
004a35 c06a      	rjmp	check_last
                 
                 data7:
004a36 3027      	cpi		twidata,7			; Temp_H
004a37 f419      	brne	data8
004a38 91b0 00bb 	load	xh,twdr				; data7 save
004a3a c065      	rjmp	check_last
                 
                 data8:
004a3b 3026      	cpi		twidata,6			; Temp_L
004a3c f449      	brne	data9	
004a3d 91a0 00bb 	load	xl,twdr				; data8 save
004a3f 93b0 059a
004a41 93a0 059b
004a43 93d0 059c 	b16store MpuTemperature
004a45 c05a      	rjmp	check_last
                 
                 data9:
004a46 3025      	cpi		twidata,5			; GyroPitch_H
004a47 f419      	brne	data10
004a48 91b0 00bb 	load	xh,twdr				; data9 save
004a4a c055      	rjmp	check_last
                 
                 data10:
004a4b 3024      	cpi		twidata,4			; GyroPitch_L
004a4c f4c1      	brne	data11
004a4d 91a0 00bb 	load	xl,twdr				; data10 save
004a4f 93b0 0567
004a51 93a0 0568
004a53 93d0 0569 	b16store GyroPitch
004a55 9160 0567
004a57 9170 0568
004a59 9180 0569
004a5b e006
004a5c 940e 4f2b
004a5e 9360 0567
004a60 9370 0568
004a62 9380 0569 	b16fdiv GyroPitch,6			; shift 6 bits
004a64 c03b      	rjmp	check_last
                 
                 data11:
004a65 3023      	cpi		twidata,3			; GyroRoll_H
004a66 f419      	brne	data12
004a67 91b0 00bb 	load	xh,twdr				; data11 save
004a69 c036      	rjmp	check_last
                 
                 data12:
004a6a 3022      	cpi		twidata,2			; GyroRoll_L
004a6b f4c1      	brne	data13
004a6c 91a0 00bb 	load	xl,twdr				; data12 save
004a6e 93b0 0564
004a70 93a0 0565
004a72 93d0 0566 	b16store GyroRoll
004a74 9160 0564
004a76 9170 0565
004a78 9180 0566
004a7a e006
004a7b 940e 4f2b
004a7d 9360 0564
004a7f 9370 0565
004a81 9380 0566 	b16fdiv GyroRoll,6			; shift 6 bits
004a83 c01c      	rjmp	check_last
                 
                 data13:
004a84 3021      	cpi		twidata,1			; GyroYaw_H
004a85 f419      	brne	data14
004a86 91b0 00bb 	load	xh,twdr				; data13 save
004a88 c017      	rjmp	check_last
                 
                 data14:							; Must be ; GyroYaw_L
004a89 91a0 00bb 	load	xl,twdr				; data14 save
004a8b 93b0 056a
004a8d 93a0 056b
004a8f 93d0 056c 	b16store GyroYaw
004a91 9160 056a
004a93 9170 056b
004a95 9180 056c
004a97 e006
004a98 940e 4f2b
004a9a 9360 056a
004a9c 9370 056b
004a9e 9380 056c 	b16fdiv GyroYaw,6			; shift 6 bits
                 
                 check_last:
004aa0 3020      	cpi		twidata,0
004aa1 f009      	breq	i2c_get_data_d_ok
004aa2 cf0a      	rjmp	i2c_get_data_d
                 	
                 i2c_get_data_d_ok:
004aa3 940e 4abd 	call	i2c_stop
004aa5 9408      	sec
004aa6 9508      	ret
                 //i2c_get_data_command =================
                 
                 
                 // Send data =====================
                 i2c_send_adr:
004aa7 de70      	rcall	i2c_start
004aa8 f008      	brcs	i2c_send_adr2
004aa9 9508      	ret
                 	 
                 i2c_send_adr2:
004aaa 9100 0738 	lds		t,TWI_address		// write Address
004aac dedc      	rcall	i2c_write_address
004aad f008      	brcs	go_write
004aae 9508      	ret
                 
                 go_write:
004aaf 2f02      	mov 	t,twidata		// write data
004ab0 ded8         	rcall	i2c_write_address
004ab1 f420      	brcc	fail_write
004ab2 940e 4abd 	call	i2c_stop
004ab4 9408      	sec
004ab5 9508      	ret
                 
                 fail_write:
004ab6 9488      	clc
004ab7 9508      	ret
                 
                 // Send data =====================
                 
                 
                 
                 // Wait_TWI_int ==============
                 
                 i2c_wait: 
004ab8 9100 00bc    lds   	t,TWCR   
004aba ff07         sbrs   	t,TWINT 
004abb cffc         rjmp   	i2c_wait 
004abc 9508         ret 
                 
                 // Wait_TWI_int ==============
                 
                 // Send_stop =================
                 
                 i2c_stop:  
004abd e904         ldi   	t,(1<<TWINT)|(1<<TWEN)|(1<<TWSTO) 
004abe 9300 00bc    store   	TWCR,t 
004ac0 9508         ret 
                 
                 // End Send_stop =================
                 
                 
                 
                 
                 setup_mpu6050:	
                 
004ac1 e60b      	ldi t, 0x6B				
004ac2 9300 0738 	sts TWI_address, t		// PWR_MGMT_1    -- DEVICE_RESET 1
004ac4 e820      	ldi twidata, 0x80
004ac5 940e 4aa7 	call i2c_send_adr
004ac7 e3a2
004ac8 e0b0      	ldx 50
004ac9 940e 4e9c 	call WaitXms
                 
004acb e60b      	ldi t, 0x6B				
004acc 9300 0738 	sts TWI_address, t		// PWR_MGMT_1    -- SLEEP 0; CYCLE 0; TEMP_DIS 0; CLKSEL 1 (PLL with X Gyro reference)
004ace e021      	ldi twidata, 0x01
004acf 940e 4aa7 	call i2c_send_adr
                 
004ad1 e10a      	ldi t, 0x1A				
004ad2 9300 0738 	sts TWI_address,t		// CONFIG        -- EXT_SYNC_SET 0 (disable input pin for data sync) ; default DLPF_CFG = 0 => ACC bandwidth = 260Hz
004ad4 ecea
004ad5 e0f0      	ldz eeMpuFilter
004ad6 940e 4f13 	call ReadEepromP
004ad8 7007      	andi t, 0x07
004ad9 9300 073a 	sts MpuFilter, t		// save to SRAM for later
004adb 2f20      	mov twidata, t
004adc 940e 4aa7 	call i2c_send_adr
                 
004ade e10b      	ldi t, 0x1B
004adf 9300 0738 	sts TWI_address, t		// GYRO_CONFIG   -- Default FS_SEL = 3: Full scale set to 2000 deg/sec
004ae1 eceb
004ae2 e0f0      	ldz eeMpuGyroCfg
004ae3 940e 4f13 	call ReadEepromP
004ae5 7108      	andi t, 0x18
004ae6 9300 073c 	sts MpuGyroCfg, t		// save to SRAM for later
004ae8 2f20      	mov twidata, t
004ae9 940e 4aa7 	call i2c_send_adr
                 
004aeb e10c      	ldi t,0x1C
004aec 9300 0738 	sts TWI_address,t		// write reg address to sensor  ACCEL_CONFIG
004aee ecec
004aef e0f0      	ldz eeMpuAccCfg
004af0 940e 4f13 	call ReadEepromP
004af2 7108      	andi t, 0x18
004af3 9300 073b 	sts MpuAccCfg, t		// save to SRAM for later
004af5 2f20      	mov twidata, t
004af6 940e 4aa7 	call i2c_send_adr
                 
004af8 e3a2
004af9 e0b0      	ldx 50
004afa 940e 4e9c 	call WaitXms
                 
004afc 9508      	ret
                 
                 
                 
                 	;--- Read setup direct from MPU6050 ---
                 /*
                 GetMpu6050Setup:
                 
                 	ldi t, 0x1A
                 	sts TWI_address, t
                 	call i2c_read_adr
                 	sts MpuFilter, t
                 
                 	ldi t, 0x1B
                 	sts TWI_address, t
                 	call i2c_read_adr
                 	sts MpuGyroCfg, t
                 
                 	ldi t, 0x1C
                 	sts TWI_address, t
                 	call i2c_read_adr
                 	sts MpuAccCfg, t
                 
                 	ret
                 */
                 
                 .undef	i	
                 .undef	twidata	
                 .include "ST7565.asm"
                 
                 
                 HilightRectangle:
                 ;	PushAll
004afd 931f      	push r17
                 
004afe 9110 0742 	lds TargetY, Y2
                 
004b00 9100 0740 Hili1:	lds t, Y1
004b02 9300 0742 	sts Y2, t
                 
004b04 940e 4c7b 	call Bresenham
                 
004b06 9100 0740 	lds t, Y1
004b08 9503      	inc t
004b09 9300 0740 	sts Y1, t
                 
004b0b 1701      	cp t, TargetY
004b0c f398      	brlo Hili1
                 
                 ;	PopAll
004b0d 911f      	pop r17
004b0e 9508      	ret
                 
                 .undef TargetY
                 
                 
                 PrintSelector:
004b0f 9105      	lpm t, z+
004b10 9300 073f 	sts X1, t
004b12 9105      	lpm t, z+
004b13 9300 0740 	sts Y1, t
004b15 9105      	lpm t, z+
004b16 9300 0741 	sts X2, t
004b18 9104      	lpm t, z
004b19 9300 0742 	sts Y2, t
004b1b e000
004b1c 9300 0743 	lrv PixelType, 0
004b1e dfde      	rcall HilightRectangle
004b1f 9508      	ret
                 
                 
                 .def	X1r = r17
                 .def 	Y1r = r18
                 .def	X2r = r19
                 .def 	Y2r = r20
                 
                 Rectangle:
                 ;	PushAll
004b20 931f      	push r17
004b21 932f      	push r18
004b22 933f      	push r19
004b23 934f      	push r20
                 
004b24 9110 073f 	lds X1r, X1
004b26 9120 0740 	lds Y1r, Y1
004b28 9130 0741 	lds X2r, X2
004b2a 9140 0742 	lds Y2r, Y2
                 
004b2c 9320 0742 	sts Y2, Y1r
004b2e 940e 4c7b 	call Bresenham
                 
004b30 9330 073f 	sts X1, X2r
004b32 9340 0740 	sts Y1, Y2r
004b34 940e 4c7b 	call Bresenham
                 
004b36 9310 0741 	sts X2, X1r
004b38 9340 0742 	sts Y2, Y2r
004b3a 940e 4c7b 	call Bresenham
                 
004b3c 9310 073f 	sts X1, X1r
004b3e 9320 0740 	sts Y1, Y1r
004b40 940e 4c7b 	call Bresenham
                 
                 ;	PopAll
004b42 914f      	pop r20
004b43 913f      	pop r19
004b44 912f      	pop r18
004b45 911f      	pop r17
004b46 9508      	ret
                 
                 
                 .undef X1r
                 .undef Y1r
                 .undef X2r
                 .undef Y2r
                 
                 
                 
                 .def flagLeadingZero	=r17
                 .def Counter		=r18
                 .def Digit		=r19
                 
                 Print16Signed:
                 ;	PushAll
004b47 93af      	push xl
004b48 93bf      	push xh
004b49 93cf      	push yl
004b4a 93df      	push yh
004b4b 93ef      	push zl
004b4c 93ff      	push zh
004b4d 931f      	push r17
004b4e 932f      	push r18
004b4f 933f      	push r19
                 
004b50 2f0a      	mov t, xl
004b51 2b0b      	or t, xh
004b52 f421      	brne print14		;is X zero?
                 
004b53 e300      	ldi t, '0'		;yes, print a zero and exit
004b54 940e 4c35 	call PrintChar
004b56 c022      	rjmp print13
                 
004b57 2711      print14:clr flagLeadingZero	;no
                 
004b58 23bb      	tst xh
004b59 f442      	brpl print7		;negative?
                 
004b5a 95a0      	com xl			;yes, negate x
004b5b 95b0      	com xh
004b5c e001      	ldi t, 1
004b5d 0fa0      	add xl, t
004b5e 2700      	clr t
004b5f 1fb0      	adc xh, t
                 
004b60 e20d      	ldi t, '-'		;print minus sign
004b61 d0d3      	rcall PrintChar
                 
004b62 e0e6
004b63 e9f7      print7: ldz convt*2
004b64 e025      	ldi Counter, 5	
                 
004b65 ef3f      print8:	ldi Digit, 0xff
004b66 91c5      	lpm yl, Z+
004b67 91d5      	lpm yh, Z+
                 
004b68 1bac      print9:	sub xl, yl		; digit = int(X / Y) ;  X = frac(X / Y)
004b69 0bbd      	sbc xh, yh
                 
004b6a 9533      	inc Digit	
                 
004b6b f7e0      	brcc print9	
                 
004b6c 0fac      	add xl, yl
004b6d 1fbd      	adc xh, yh
                 
004b6e 2333      	tst Digit		;is digit zero?
004b6f f419      	brne print10
                 
004b70 2311
004b71 f42a      	brflagfalse flagLeadingZero, print11	;yes, skip it if no nonzero digits have been printed
004b72 c001      	rjmp print12
                 
004b73 ef1f      print10:ser flagLeadingZero	;no, set flag
                 
004b74 2f03      print12:mov t, Digit		;Digit to ASCII
004b75 5d00      	subi t, -0x30
                 
004b76 d0be      	rcall PrintChar		;print digit
                 
004b77 952a      print11:dec Counter		;more digits?
004b78 f761      	brne print8
                 
                 ;print13:PopAll			;no, exit
004b79 913f      print13:pop r19
004b7a 912f      	pop r18
004b7b 911f      	pop r17
004b7c 91ff      	pop zh
004b7d 91ef      	pop zl
004b7e 91df      	pop yh
004b7f 91cf      	pop yl
004b80 91bf      	pop xh
004b81 91af      	pop xl
                 
004b82 9508      	ret
                 
                 
                 
                 
004b83 2710      convt:	.dw 10000
004b84 03e8      	.dw 1000
004b85 0064      	.dw 100
004b86 000a      	.dw 10
004b87 0001      	.dw 1
                 
                 .undef flagLeadingZero
                 .undef Counter
                 .undef Digit
                 
                 
                 PrintNumberLF:
004b88 dfbe      	rcall Print16Signed
                 
                 LineFeed:			;OBSERVE: This subroutine must follow immediately after 'PrintNumberLF'!
004b89 9000 0740
004b8b e009
004b8c 0e00
004b8d 9200 0740 	rvadd Y1, 9
004b8f 9508      	ret
                 
                 
                 PrintHeader:
004b90 d09d      	rcall PrintString
004b91 e001
004b92 9300 0744 	lrv FontSelector, f6x8
004b94 e101
004b95 9300 0740 	lrv Y1, 17
004b97 9508      	ret
                 
                 
                 PrintWarningHeader:
                 
004b98 e100
004b99 9300 073f 	lrv X1, 16
004b9b e3e4
004b9c e9fb      	ldz warning*2
004b9d dff2      	rcall PrintHeader
004b9e 9508      	ret
                 
                 
                 PrintMotto:
004b9f e000
004ba0 9300 073f 	lrv X1, 0
004ba2 edee
004ba3 e9fb      	ldz motto*2
004ba4 940e 4c2e 	call PrintString
004ba6 9508      	ret
                 
                 
                 PrintColonAndSpace:
004ba7 e30a      	ldi t, ':'
004ba8 d08c      	rcall PrintChar
004ba9 e200      	ldi t, ' '
004baa d08a      	rcall PrintChar
004bab 9508      	ret
                 
                 
                 PrintCCW:
004bac e403      	ldi t, 'C'
004bad d087      	rcall PrintChar
                 
                 PrintCW:			;OBSERVE: This subroutine must follow immediately after 'PrintCCW'!
004bae e403      	ldi t, 'C'
004baf d085      	rcall PrintChar
004bb0 e507      	ldi t, 'W'
004bb1 d083      	rcall PrintChar
004bb2 9508      	ret
                 
                 
                 PrintMenuFooter:
004bb3 e000
004bb4 9300 073f 	lrv X1, 0
004bb6 e309
004bb7 9300 0740 	lrv Y1, 57
004bb9 e7e6
004bba e9fb      	ldz updown*2
004bbb d072      	rcall PrintString
004bbc 9508      	ret
                 
                 
                 PrintSelectFooter:
004bbd e000
004bbe 9300 073f 	lrv X1, 0
004bc0 e309
004bc1 9300 0740 	lrv Y1, 57
004bc3 eae2
004bc4 e9fb      	ldz bckprev*2
004bc5 d068      	rcall PrintString
004bc6 ece4
004bc7 e9fb      	ldz nxtsel*2
004bc8 d065      	rcall PrintString
004bc9 9508      	ret
                 
                 
                 PrintStdFooter:
004bca e000
004bcb 9300 073f 	lrv X1, 0
004bcd e309
004bce 9300 0740 	lrv Y1, 57
004bd0 93ef
004bd1 93ff      	pushz
004bd2 eae2
004bd3 e9fb      	ldz bckprev*2
004bd4 d059      	rcall PrintString
004bd5 ebe6
004bd6 e9fb      	ldz nxtchng*2
004bd7 d056      	rcall PrintString
004bd8 91ff
004bd9 91ef      	popz
004bda 9508      	ret
                 
                 
                 PrintBackFooter:
004bdb e000
004bdc 9300 073f 	lrv X1, 0
004bde e309
004bdf 9300 0740 	lrv Y1, 57
004be1 93ef
004be2 93ff      	pushz
004be3 e9ec
004be4 e9fb      	ldz back*2
004be5 d048      	rcall PrintString
004be6 91ff
004be7 91ef      	popz
004be8 9508      	ret
                 
                 
                 PrintChangeFooter:
                 
004be9 e50a
004bea 9300 073f 	lrv X1, 90
004bec e309
004bed 9300 0740 	lrv Y1, 57
004bef ede2
004bf0 e9fb      	ldz change*2
004bf1 d03c      	rcall PrintString
004bf2 9508      	ret
                 
                 
                 PrintOkFooter:
004bf3 e702
004bf4 9300 073f 	lrv X1, 114
004bf6 e309
004bf7 9300 0740 	lrv Y1, 57
004bf9 93ef
004bfa 93ff      	pushz
004bfb edea
004bfc e9fb      	ldz ok*2
004bfd d030      	rcall PrintString
004bfe 91ff
004bff 91ef      	popz
004c00 9508      	ret
                 
                 
                 PrintContinueFooter:
004c01 e40e
004c02 9300 073f 	lrv X1, 78
004c04 e309
004c05 9300 0740 	lrv Y1, 57
004c07 93ef
004c08 93ff      	pushz
004c09 e8ec
004c0a e9fb      	ldz cont*2
004c0b d022      	rcall PrintString
004c0c 91ff
004c0d 91ef      	popz
004c0e 9508      	ret
                 
                 
                 PrintFromStringArray:
004c0f 0f00      	lsl t
004c10 0fe0      	add zl, t
004c11 2700      	clr t
004c12 1ff0      	adc zh, t
004c13 91a5      	lpm xl, z+
004c14 91b4      	lpm xh, z
004c15 01fd      	movw z, x
004c16 d017      	rcall PrintString
004c17 9508      	ret
                 
                 
                 PrintStringArray:
004c18 93cf
004c19 93df      	pushy
004c1a 2fc0      	mov yl, t			;register T = Array size (i.e. Number of strings)
004c1b 2700      	clr t
                 
004c1c 930f      psa1:	push t
004c1d 93ef
004c1e 93ff      	pushz				;register Z = Array pointer (16 bit)
004c1f 27dd      	clr yh
004c20 93d0 073f 	sts X1, yh
004c22 940e 4c0f 	call PrintFromStringArray
004c24 df64      	rcall LineFeed
004c25 91ff
004c26 91ef      	popz
004c27 910f      	pop t
004c28 9503      	inc t
004c29 170c      	cp t, yl
004c2a f38c      	brlt psa1
                 
004c2b 91df
004c2c 91cf      	popy
004c2d 9508      	ret
                 
                 
                 PrintString:
004c2e 9105      print2:	lpm t, z+
004c2f 2300      	tst t
004c30 f011      	breq print1
004c31 d003      	rcall PrintChar
004c32 cffb      	rjmp print2
                 
004c33 9508      print1: ret
                 
                 print_char:
004c34 9508        ret
                 
                 PrintChar:
004c35 920f
004c36 921f
004c37 922f
004c38 923f
004c39 924f
004c3a 925f
004c3b 926f
004c3c 927f
004c3d 928f
004c3e 929f
004c3f 92af
004c40 92bf
004c41 92cf
004c42 92df
004c43 92ef
004c44 92ff
004c45 930f
004c46 931f
004c47 93cf
004c48 93df
004c49 932f
004c4a 933f
004c4b 934f
004c4c 935f
004c4d 936f
004c4e 937f
004c4f 938f
004c50 939f
004c51 93af
004c52 93bf
004c53 93ef
004c54 93ff        push_all
004c55 2799        clr r25
004c56 2f80        mov r24, t
004c57 2411        clr r1
004c58 940e 4c34   call print_char
004c5a 91ff
004c5b 91ef
004c5c 91bf
004c5d 91af
004c5e 919f
004c5f 918f
004c60 917f
004c61 916f
004c62 915f
004c63 914f
004c64 913f
004c65 912f
004c66 91df
004c67 91cf
004c68 911f
004c69 910f
004c6a 90ff
004c6b 90ef
004c6c 90df
004c6d 90cf
004c6e 90bf
004c6f 90af
004c70 909f
004c71 908f
004c72 907f
004c73 906f
004c74 905f
004c75 904f
004c76 903f
004c77 902f
004c78 901f
004c79 900f        pop_all
004c7a 9508        ret
                 
                 Bresenham:		;line from (X1,Y1) to (Y2,Y2)
                 
                 .def	prx1	=r17
                 .def	prx2	=r18
                 .def	pry1	=r19
                 .def	pry2	=r20
                 .def	xd	=r21
                 .def	yd	=r22
                 .def	step	=r23
                 .def	errorl	=r2
                 .def	errorh	=r3
                 
                 
004c7b 922f
004c7c 923f
004c7d 924f
004c7e 925f
004c7f 926f
004c80 927f
004c81 928f
004c82 931f
004c83 932f
004c84 933f
004c85 934f
004c86 935f
004c87 936f
004c88 937f
004c89 938f
004c8a 939f
004c8b 93af
004c8c 93bf
004c8d 93cf
004c8e 93df
004c8f 93ef
004c90 93ff      	PushAll
                 
004c91 e011      	ldi prx1, 1
004c92 e021      	ldi prx2, 1
004c93 e031      	ldi pry1, 1
004c94 e041      	ldi pry2, 1
                 
004c95 9150 0741 	lds xd, X2	;xd=x2-x1
004c97 9100 073f 	lds t, X1
004c99 1b50      	sub xd, t
                 
004c9a f41a      	brpl op1
                 
004c9b 9551      	neg xd
004c9c ef1f      	ldi prx1, -1
004c9d ef2f      	ldi prx2, -1
                 
004c9e 9160 0742 op1:	lds yd, Y2
004ca0 9100 0740 	lds t, Y1
004ca2 1b60      	sub yd, t
                 
004ca3 f41a      	brpl op2
                 
004ca4 9561      	neg yd
004ca5 ef3f      	ldi pry1, -1
004ca6 ef4f      	ldi pry2, -1
                 
004ca7 1756      op2:	cp xd, yd
004ca8 f428      	brsh op3
                 
004ca9 e010      	ldi prx1, 0
                 
004caa 2f05      	mov t, xd
004cab 2f56      	mov xd, yd
004cac 2f60      	mov yd, t
                 
004cad c001      	rjmp op4
                 
004cae e030      op3:	ldi pry1, 0
                 
004caf 2f75      op4:	mov step, xd
004cb0 0f76      	add step, yd
                 
004cb1 2e25      	mov errorl, xd
004cb2 2433      	clr errorh
                 
004cb3 9100 073f 	lds t, X1
004cb5 9300 073d 	sts Xpos, t
                 
004cb7 9100 0740 	lds t, Y1
004cb9 9300 073e 	sts Ypos, t
                 
004cbb 0f55      	lsl xd
                 
004cbc 0f66      	lsl yd
                 
004cbd d039      op5:	rcall SetPixel
                 
004cbe 2377      	tst step
004cbf f101      	breq op6
004cc0 f0fa      	brmi op6
                 
004cc1 1a26      	sub errorl, yd
004cc2 2700      	clr t
004cc3 0a30      	sbc errorh, t
004cc4 f47a      	brpl op7
                 
004cc5 9100 073d 	lds t, Xpos
004cc7 0f02      	add t, prx2
004cc8 9300 073d 	sts Xpos, t
                 
004cca 9100 073e 	lds t, Ypos
004ccc 0f04      	add t, pry2
004ccd 9300 073e 	sts Ypos, t
                 
004ccf 0e25      	add errorl, xd
004cd0 2700      	clr t
004cd1 1e30      	adc errorh, t
                 
004cd2 5072      	subi step, 2
                 
004cd3 cfe9      	rjmp op5
                 
004cd4 9100 073d op7:	lds t, Xpos
004cd6 0f01      	add t, prx1
004cd7 9300 073d 	sts Xpos, t
                 
004cd9 9100 073e 	lds t, Ypos
004cdb 0f03      	add t, pry1
004cdc 9300 073e 	sts Ypos, t
                 
004cde 5071      	subi step, 1
                 
004cdf cfdd      	rjmp op5
                 
004ce0 91ff
004ce1 91ef
004ce2 91df
004ce3 91cf
004ce4 91bf
004ce5 91af
004ce6 919f
004ce7 918f
004ce8 917f
004ce9 916f
004cea 915f
004ceb 914f
004cec 913f
004ced 912f
004cee 911f
004cef 908f
004cf0 907f
004cf1 906f
004cf2 905f
004cf3 904f
004cf4 903f
004cf5 902f      op6:	PopAll
004cf6 9508      	ret
                 
                 
                 .undef	prx1
                 .undef	prx2
                 .undef	pry1
                 .undef	pry2
                 .undef	xd
                 .undef	yd
                 .undef	step
                 .undef	errorl
                 .undef	errorh
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 SetPixel:				; Destroys: t
                 ;	PushAll
004cf7 93ef      	push zl
004cf8 93ff      	push zh
004cf9 93af      	push xl
004cfa 93bf      	push xh
                 
004cfb e0e0      	ldi zl, low(LcdBuffer)		;Z = LcdBuffer + int(Ypos/8)*128 + Xpos
004cfc e0f1      	ldi zh, high(LcdBuffer)
                 
004cfd 91a0 073e 	lds xl, Ypos
004cff e0b0      	ldi xh, 0
004d00 73a8      	andi xl, 0b00111000
004d01 0faa      	lsl xl
004d02 0faa      	lsl xl
004d03 0faa      	lsl xl
004d04 1fbb      	rol xh
004d05 0faa      	lsl xl
004d06 1fbb      	rol xh
                 
004d07 0fea      	add zl, xl
004d08 1ffb      	adc zh, xh
                 
004d09 9100 073d 	lds t, Xpos
004d0b 770f      	andi t, 0x7f
004d0c 0fe0      	add zl, t
004d0d 2700      	clr t
004d0e 1ff0      	adc zh, t
                 
004d0f 91a0 073e 	lds xl, Ypos			;xl = (Ypos mod 8) + 1
004d11 70a7      	andi xl, 0b00000111
004d12 95a3      	inc xl
                 
004d13 e0b0      	ldi xh,  0b00000000		;xh = 2 ^ (xl - 1)
004d14 9408      	sec 	
004d15 1fbb      qq7:	rol xh	
004d16 95aa      	dec xl
004d17 f7e9      	brne qq7
                 
004d18 81a0      	ld xl, z
                 
004d19 9100 0743 	lds t, PixelType
004d1b 2300      	tst t
004d1c f039      	breq qq8
004d1d 3002      	cpi t, 2
004d1e f011      	breq qq10
                 
004d1f 2bab      	or xl, xh
004d20 c004      	rjmp qq9
                 
004d21 95b0      qq10:	com xh
004d22 23ab      	and xl, xh
004d23 c001      	rjmp qq9
                 
004d24 27ab      qq8: 	eor xl, xh
                 
004d25 83a0      qq9:	st z, xl
                 
                 
                 ;	PopAll
004d26 91bf      	pop xh
004d27 91af      	pop xl
004d28 91ff      	pop zh
004d29 91ef      	pop zl
                 
004d2a 9508      	ret
                 
                 
                 
                 lcd_update:
004d2b 0000        nop
                 
                 
                 LcdUpdate:
004d2c 920f
004d2d 921f
004d2e 922f
004d2f 923f
004d30 924f
004d31 925f
004d32 926f
004d33 927f
004d34 928f
004d35 929f
004d36 92af
004d37 92bf
004d38 92cf
004d39 92df
004d3a 92ef
004d3b 92ff
004d3c 930f
004d3d 931f
004d3e 93cf
004d3f 93df
004d40 932f
004d41 933f
004d42 934f
004d43 935f
004d44 936f
004d45 937f
004d46 938f
004d47 939f
004d48 93af
004d49 93bf
004d4a 93ef
004d4b 93ff
004d4c 2411
004d4d 940e 4d2b
004d4f 91ff
004d50 91ef
004d51 91bf
004d52 91af
004d53 919f
004d54 918f
004d55 917f
004d56 916f
004d57 915f
004d58 914f
004d59 913f
004d5a 912f
004d5b 91df
004d5c 91cf
004d5d 911f
004d5e 910f
004d5f 90ff
004d60 90ef
004d61 90df
004d62 90cf
004d63 90bf
004d64 90af
004d65 909f
004d66 908f
004d67 907f
004d68 906f
004d69 905f
004d6a 904f
004d6b 903f
004d6c 902f
004d6d 901f
004d6e 900f        safe_call_c lcd_update
004d6f 9508        ret
                 
                 LcdClear:
                 ;	PushAll
004d70 93af      	push xl
004d71 93bf      	push xh
004d72 93ef      	push zl
004d73 93ff      	push zh
                 
                 	;ldi zl, low(LcdBuffer)
                 	;ldi zh, high(LcdBuffer)
004d74 e0e0
004d75 e0f1        ldz LcdBuffer
                 
004d76 e0a0      	ldi xl, low(0x0400)
004d77 e0b4      	ldi xh, high(0x0400)
                 
004d78 e000      	ldi t,0x00
                 
004d79 9301      qq5:	st z+, t
004d7a 9711      	sbiw xh:xl, 1 
004d7b f7e9      	brne qq5
                 
                 ;	PopAll
004d7c 91ff      	pop zh
004d7d 91ef      	pop zl
004d7e 91bf      	pop xh
004d7f 91af      	pop xl
004d80 9508      	ret
                 
                 
                 LcdClear6x8:
004d81 dfee      	rcall LcdClear
004d82 e001
004d83 9300 0743 	lrv PixelType, 1
004d85 e001
004d86 9300 0744 	lrv FontSelector, f6x8
004d88 e000
004d89 9300 073f 	lrv X1, 0
004d8b e001
004d8c 9300 0740 	lrv Y1, 1
004d8e 9508      	ret
                 
                 
                 LcdClear12x16:
004d8f dfe0      	rcall LcdClear
004d90 e001
004d91 9300 0743 	lrv PixelType, 1
004d93 e003
004d94 9300 0744 	lrv FontSelector, f12x16
004d96 e000
004d97 9300 0740 	lrv Y1, 0
004d99 9508      	ret
                 
                 
                 	;headers
                 
004d9a 4157
004d9b 4e52
004d9c 4e49
004d9d 2147
004d9e 0000      warning:.db "WARNING!", 0, 0
004d9f 5245
004da0 4f52
004da1 0052      cerror:	.db "ERROR", 0
004da2 4153
004da3 4556
004da4 0044      saved:	.db "SAVED", 0
                 
                 	;footers
004da5 4142
004da6 4b43
004da7 5220
004da8 5441
004da9 2045
004daa 4153
004dab 4556
004dac 4320
004dad 4148
004dae 474e
004daf 0045      tunefn:	.db "BACK RATE SAVE CHANGE", 0
004db0 4142
004db1 4b43
004db2 5220
004db3 5441
004db4 2045
004db5 454e
004db6 5458
004db7 4320
004db8 4148
004db9 474e
004dba 0045      qtunefn:.db "BACK RATE NEXT CHANGE", 0
004dbb 4142
004dbc 4b43
004dbd 2020
004dbe 5055
004dbf 2020
004dc0 4f44
004dc1 4e57
004dc2 2020
004dc3 4e45
004dc4 4554
004dc5 0052      updown:	.db "BACK  UP  DOWN  ENTER", 0
004dc6 4f43
004dc7 544e
004dc8 4e49
004dc9 4555
004dca 0000      cont:	.db "CONTINUE", 0, 0
004dcb 4c43
004dcc 4145
004dcd 0052      clear:	.db "CLEAR", 0
004dce 4142
004dcf 4b43
004dd0 0000      back:	.db "BACK", 0, 0
004dd1 4142
004dd2 4b43
004dd3 5020
004dd4 4552
004dd5 0056      bckprev:.db "BACK PREV", 0		;used in combination with other footers (e.g. "NEXT CHANGE")
004dd6 4142
004dd7 4b43
004dd8 4d20
004dd9 524f
004dda 0045      bckmore:.db "BACK MORE", 0		;also used in combination with other footers (e.g. "NEXT CHANGE")
004ddb 4e20
004ddc 5845
004ddd 2054
004dde 4843
004ddf 4e41
004de0 4547
004de1 0000      nxtchng:.db " NEXT CHANGE", 0, 0
004de2 4e20
004de3 5845
004de4 2054
004de5 4553
004de6 454c
004de7 5443
004de8 0000      nxtsel:	.db " NEXT SELECT", 0, 0
004de9 4843
004dea 4e41
004deb 4547
004dec 0000      change:	.db "CHANGE", 0, 0
004ded 4b4f
004dee 0000      ok:	.db "OK", 0, 0			;also used as status text (in sensortest.asm and flightdisplay.asm)
                 
                 	;other texts
004def 6c46
004df0 2079
004df1 6173
004df2 6566
004df3 2021
004df4 2020
004df5 2020
004df6 2020
004df7 4352
004df8 3139
004df9 0031      motto:	.db "Fly safe!       RC911", 0
004dfa 664f
004dfb 0066      off:	.db "Off", 0
004dfc 6e4f
004dfd 0000      on:	.db "On", 0, 0
004dfe 6f4e
004dff 0000      no:	.db "No", 0, 0
004e00 6559
004e01 0073      yes:	.db "Yes", 0
004e02 6341
004e03 6f72
004e04 0000      acro:	.db "Acro", 0, 0
004e05 6c41
004e06 7261
004e07 006d      alarm:	.db "Alarm", 0
004e08 6f4e
004e09 6d72
004e0a 6c61
004e0b 5320
004e0c 004c      normsl:	.db "Normal SL", 0
004e0d 4c53
004e0e 4d20
004e0f 7869
004e10 0000      slmix:	.db "SL Mix", 0, 0
004e11 4341
004e12 2043
004e13 7254
004e14 6d69
004e15 0000      sltrim:	.db "ACC Trim", 0, 0
004e16 4c53
004e17 4720
004e18 6961
004e19 006e      slgain:	.db "SL Gain", 0
004e1a 4c53
004e1b 0000      selflvl:.db "SL", 0, 0
004e1c 6947
004e1d 626d
004e1e 6c61
004e1f 0000      gimbal:	.db "Gimbal", 0, 0
004e20 6941
004e21 2b6c
004e22 6c45
004e23 0065      ailele:	.db "Ail+Ele", 0
004e24 6941
004e25 656c
004e26 6f72
004e27 006e      ail:	.db "Aileron", 0
004e28 6c45
004e29 7665
004e2a 7461
004e2b 726f
004e2c 0000      ele:	.db "Elevator", 0, 0
004e2d 7552
004e2e 6464
004e2f 7265
004e30 0000      rudd:	.db "Rudder", 0, 0
004e31 6854
004e32 6f72
004e33 7474
004e34 656c
004e35 0000      thr:	.db "Throttle", 0, 0
004e36 7541
004e37 0078      aux:	.db "Aux", 0
004e38 664f
004e39 7366
004e3a 7465
004e3b 0000      ofs:	.db "Offset", 0, 0
004e3c 2050
004e3d 6147
004e3e 6e69
004e3f 0000      pgain:	.db "P Gain", 0, 0
004e40 2050
004e41 694c
004e42 696d
004e43 0074      plimit:	.db "P Limit", 0
004e44 2049
004e45 6147
004e46 6e69
004e47 0000      igain:	.db "I Gain", 0, 0
004e48 2049
004e49 694c
004e4a 696d
004e4b 0074      ilimit:	.db "I Limit", 0
004e4c 6f4c
004e4d 6b63
004e4e 6465
004e4f 0000      locked:	.db "Locked", 0, 0
004e50 6f48
004e51 656d
004e52 0000      home:	.db "Home", 0, 0
004e53 6f50
004e54 2073
004e55 0031      pos1:	.db "Pos 1", 0
004e56 6f50
004e57 2073
004e58 0032      pos2:	.db "Pos 2", 0
004e59 6f50
004e5a 2073
004e5b 0033      pos3:	.db "Pos 3", 0
004e5c 6f50
004e5d 2073
004e5e 0034      pos4:	.db "Pos 4", 0
004e5f 6f50
004e60 2073
004e61 0035      pos5:	.db "Pos 5", 0
004e62 4f4c
004e63 0057      rate1:	.db "LOW", 0
004e64 454d
004e65 4944
004e66 4d55
004e67 0000      rate2:	.db "MEDIUM", 0, 0
004e68 4948
004e69 4847
004e6a 0000      rate3:	.db "HIGH", 0, 0
004e6b 5353
004e6c 2b20
004e6d 0030      ss0:	.db "SS +0", 0
004e6e 5353
004e6f 2b20
004e70 3032
004e71 0000      ss20:	.db "SS +20", 0, 0
004e72 5353
004e73 2b20
004e74 3033
004e75 0000      ss30:	.db "SS +30", 0, 0
004e76 5353
004e77 2b20
004e78 3035
004e79 0000      ss50:	.db "SS +50", 0, 0
                 
                 	;arrays
004e7a 9bfc
004e7b 9c00      yesno:	.dw no*2, yes*2
004e7c 9bf4
004e7d 9c48
004e7e 9c50
004e7f 9c5a
004e80 9c2c
004e81 9c22
004e82 9c38      tunmode:.dw off*2, ail*2, ele*2, rudd*2, slgain*2, sltrim*2, gimbal*2
004e83 84fa
004e84 9cc4
004e85 9cc8
004e86 9cd0      lmh:	.dw null*2, rate1*2, rate2*2, rate3*2
004e87 9ca6
004e88 9cac
004e89 9cb2
004e8a 9cb8
004e8b 9cbe      auxtxt:	.dw pos1*2, pos2*2, pos3*2, pos4*2, pos5*2
004e8c 9c04
004e8d 9c1a
004e8e 9c10
004e8f 9c0a      auxfn:	.dw acro*2, slmix*2, normsl*2, alarm*2
004e90 9cd6
004e91 9cdc
004e92 9ce4
004e93 9cec      auxss:	.dw ss0*2, ss20*2, ss30*2, ss50*2
004e94 9c98
004e95 9bf4
004e96 9ca0      aux4txt:.dw locked*2, off*2, home*2
004e97 9c48
004e98 9c50
004e99 9c62
004e9a 9c5a
004e9b 9c6c      rxch:	.dw ail*2, ele*2, thr*2, rudd*2, aux*2
                 .include "miscsubs.asm"
                 
004e9c e0ca      WaitXms:ldi yl, 10
004e9d d003      	rcall wms
004e9e 9711      	sbiw x, 1
004e9f f7e1      	brne WaitXms
004ea0 9508      	ret
                 		
                 
004ea1 ef0a      wms:	ldi t, 250		;wait yl *0.1 ms at 20MHz
004ea2 950a      wm1:	dec t
004ea3 0000      	nop
004ea4 0000      	nop
004ea5 0000      	nop
004ea6 0000      	nop
004ea7 0000      	nop
004ea8 f7c9      	brne wm1
004ea9 95ca      	dec yl
004eaa f7b1      	brne wms
004eab 9508      	ret
                 
                 
004eac 17ac      CmpXy:	cp xl, yl
004ead 07bd      	cpc xh, yh
004eae 9508      	ret
                 
                 
                 GetButtons:
004eaf 93af      	push xl
004eb0 93cf      	push yl
                 
004eb1 b103      	load t, pinb	;read buttons
004eb2 9500      	com t
004eb3 9502      	swap t
004eb4 700f      	andi t, 0x0F
004eb5 f0a1      	breq get1	;any buttons pressed?
                 	
004eb6 e6c4      	ldi yl, 100	;yes, wait 10ms
004eb7 940e 4ea1 	call wms
                 
004eb9 b103      	load t, pinb	;read buttons again
004eba 9500      	com t
004ebb 9502      	swap t
004ebc 91a0 0791 	lds xl, BtnReversed
004ebe 23aa      	tst xl
004ebf f049      	breq get2
                 
004ec0 9507      	ror t		;swapping button order (for unoriginal KK2 mini)
004ec1 1faa      	rol xl
004ec2 9507      	ror t
004ec3 1faa      	rol xl
004ec4 9507      	ror t
004ec5 1faa      	rol xl
004ec6 9507      	ror t
004ec7 1faa      	rol xl
004ec8 2f0a      	mov t, xl
                 
004ec9 700f      get2:	andi t, 0x0F
                 
004eca 91cf      get1:	pop yl		;no, exit
004ecb 91af      	pop xl
004ecc 9508      	ret
                 
                 
                 ReleaseButtons:
004ecd dfe1      	rcall GetButtons		;wait for button to be released
004ece 3000      	cpi t, 0x00
004ecf f7e9      	brne ReleaseButtons
004ed0 9508      	ret
                 
                 
                 GetButtonsBlocking:
004ed1 dffb      	rcall ReleaseButtons
                 
                 WaitForKeypress:
004ed2 dfdc      	rcall GetButtons
004ed3 3000      	cpi t, 0x00
004ed4 f3e9      	breq WaitForKeypress
                 	
004ed5 940e 1dd3 	call Beep
                 
004ed7 9508      	ret
                 
                 
                 
                 WaitForOkButton:
004ed8 dff8      	rcall GetButtonsBlocking
004ed9 3001      	cpi t, 0x01			;OK?
004eda f7e9      	brne WaitForOkButton
                 
004edb dff1      	rcall ReleaseButtons
004edc 9508      	ret
                 
                 
                 GetEePVariable16:
004edd 91f0 0803 	lds zh, UserProfile
                 
                 GetEeVariable16:
004edf d035      	rcall ReadEeprom
004ee0 9631      	adiw z, 1
004ee1 2fa0      	mov xl, t
004ee2 d032      	rcall ReadEeprom
004ee3 9631      	adiw z, 1
004ee4 2fb0      	mov xh, t
004ee5 9508      	ret
                 
                 
                 StoreEePVariable16:
004ee6 91f0 0803 	lds zh, UserProfile
                 
                 StoreEeVariable16:
004ee8 2f0a      	mov t, xl
004ee9 d035      	rcall WriteEeprom
004eea 9631      	adiw z, 1
004eeb 2f0b      	mov t, xh
004eec d032      	rcall WriteEeprom
004eed 9631      	adiw z, 1
004eee 9508      	ret
                 
                 
                 GetEePVariable8:
004eef 91f0 0803 	lds zh, UserProfile
                 
                 GetEeVariable8:
004ef1 d023      	rcall ReadEeprom
004ef2 9631      	adiw z, 1
004ef3 2fa0      	mov xl, t
004ef4 9508      	ret
                 
                 
                 StoreEePVariable8:
004ef5 91f0 0803 	lds zh, UserProfile
                 
                 StoreEeVariable8:
004ef7 2f0a      	mov t, xl
004ef8 d026      	rcall WriteEeprom
004ef9 9631      	adiw z, 1
004efa 9508      	ret
                 
                 
                 GetEePVariable168:
004efb 91f0 0803 	lds zh, UserProfile
004efd d017      	rcall ReadEeprom
004efe 9631      	adiw z, 1
004eff 2fd0      	mov yh, t
004f00 d014      	rcall ReadEeprom
004f01 9631      	adiw z, 1
004f02 2fa0      	mov xl, t
004f03 d011      	rcall ReadEeprom
004f04 9631      	adiw z, 1
004f05 2fb0      	mov xh, t
004f06 9508      	ret
                 
                 StoreEePVariable168:
004f07 91f0 0803 	lds zh, UserProfile
004f09 2f0d      	mov t, yh
004f0a d014      	rcall WriteEeprom
004f0b 9631      	adiw z, 1
004f0c 2f0a      	mov t, xl
004f0d d011      	rcall WriteEeprom
004f0e 9631      	adiw z, 1
004f0f 2f0b      	mov t, xh
004f10 d00e      	rcall WriteEeprom
004f11 9631      	adiw z, 1
004f12 9508      	ret
                 
                 
                 ReadEepromP:
004f13 91f0 0803 	lds zh, UserProfile
                 
                 ReadEeprom:
004f15 99f9      re1:	skbc eecr,1, r0
004f16 cffe      	rjmp re1
                 
004f17 bde1      	store eearl,zl	;(Z) -> t
004f18 bdf2      	store eearh,zh
                 
004f19 e001      	ldi t,0x01
004f1a bb0f      	store eecr,t
                 
004f1b b500      	load t, eedr
004f1c 9508      	ret
                 
                 
                 WriteEepromP:
004f1d 91f0 0803 	lds zh, UserProfile
                 
                 WriteEeprom:
004f1f 94f8      	cli		;t -> (Z)
                 
004f20 99f9      wr1:	skbc eecr,1, r0
004f21 cffe      	rjmp wr1
                 
004f22 bde1      	store eearl,zl
004f23 bdf2      	store eearh,zh
                 
004f24 bd00      	store eedr,t
                 
                 	;       76543210
004f25 e004      	ldi t,0b00000100
004f26 bb0f      	store eecr,t
                 
                 	;       76543210
004f27 e002      	ldi t,0b00000010
004f28 bb0f      	store eecr,t
                 
004f29 9478      	sei
004f2a 9508      	ret
                 
                 
                 .include "168mathlib_subs.asm"
                 
                 	;--- 16.8 fixed point fast divide ---
                 
                 .def	Op1_2=r22
                 .def	Op1_1=r23
                 .def	Op1_0=r24
                 
                 b16fdiv_c:
004f2b 9565      	asr Op1_2
004f2c 9577      	ror Op1_1
004f2d 9587      	ror Op1_0
004f2e 950a      	dec t
004f2f f7d9      	brne b16fdiv_c
                 
004f30 1f80      	adc Op1_0, t		;round off
004f31 1f70      	adc Op1_1, t
004f32 1f60      	adc Op1_2, t
                 	
004f33 9508      	ret
                 
                 .undef	Op1_2
                 .undef	Op1_1
                 .undef	Op1_0
                 
                 
                 	;--- 16.8 fixed point fast multiply ---
                 
                 .def	Op1_2=r22
                 .def	Op1_1=r23
                 .def	Op1_0=r24
                 
                 b16fmul_c:		
004f34 0f88      	lsl Op1_0
004f35 1f77      	rol Op1_1
004f36 1f66      	rol Op1_2
004f37 950a      	dec t
004f38 f7d9      	brne b16fmul_c
                 	
004f39 9508      	ret
                 
                 .undef	Op1_2
                 .undef	Op1_1
                 .undef	Op1_0
                 
                 
                 	;--- 16.8 fixed point multiply ---
                 
                 .def	Op1_2=r17
                 .def	Op1_1=r18
                 .def	Op1_0=r19
                 
                 .def	Op2_2=r20
                 .def	Op2_1=r21
                 .def	Op2_0=r22
                 
                 .def	Result2=r23
                 .def	Result1=r24
                 .def	Result0=r2
                 .def	Sign=r3
                 
                 
004f3a 2e31      multc:	mov Sign, Op1_2		;calculate result sign
004f3b 2634      	eor Sign, Op2_2
                 
004f3c 2311      	tst Op1_2		;Op1=ABS(Op1)
004f3d f442      	brpl mul1
004f3e 9530      	com Op1_0
004f3f 9520      	com Op1_1
004f40 9510      	com Op1_2
004f41 e001      	ldi t,1
004f42 0f30      	add Op1_0, t
004f43 2700      	clr t
004f44 1f20      	adc Op1_1, t
004f45 1f10      	adc Op1_2, t
                 
004f46 2344      mul1:	tst Op2_2		;Op2=ABS(Op2)
004f47 f442      	brpl mul2
004f48 9560      	com Op2_0
004f49 9550      	com Op2_1
004f4a 9540      	com Op2_2
004f4b e001      	ldi t,1
004f4c 0f60      	add Op2_0, t
004f4d 2700      	clr t
004f4e 1f50      	adc Op2_1, t
004f4f 1f40      	adc Op2_2, t
                 
004f50 2788      mul2:	clr Result1
004f51 2777      	clr Result2
                 
004f52 9f36      	mul Op1_0, Op2_0	;Mul #1
004f53 920f      	push r0
004f54 2c21      	mov Result0, r1
004f55 2700      	clr t
                 
004f56 9f35      	mul Op1_0, Op2_1	;mul #2
004f57 0c20      	add Result0, r0
004f58 1d81      	adc Result1, r1
004f59 1f70      	adc Result2, t
                 
004f5a 9f34      	mul Op1_0, Op2_2	;mul #3
004f5b 0d80      	add Result1, r0
004f5c 1d71      	adc Result2, r1
                 
004f5d 9f26      	mul Op1_1, Op2_0	;mul #4
004f5e 0c20      	add Result0, r0
004f5f 1d81      	adc Result1, r1
004f60 1f70      	adc Result2, t
                 
004f61 9f25      	mul Op1_1, Op2_1	;mul #5
004f62 0d80      	add Result1, r0
004f63 1d71      	adc Result2, r1
                 
004f64 9f24      	mul Op1_1, Op2_2	;mul #6
004f65 0d70      	add Result2, r0
                 	
004f66 9f16      	mul Op1_2, Op2_0	;mul #7
004f67 0d80      	add Result1, r0
004f68 1d71      	adc Result2, r1
                 
004f69 9f15      	mul Op1_2, Op2_1	;mul #8
004f6a 0d70      	add Result2, r0
                 		
004f6b 900f      	pop r0			;round off
004f6c 0c00      	lsl r0
                 
004f6d 1e20      	adc Result0, t
004f6e 1f80      	adc result1, t
004f6f 1f70      	adc result2, t
                 
004f70 f422      	brpl mul4		;overflow?
                 	
004f71 ef0f      	ldi t, 0xff		;yes, set result to max
004f72 2e20      	mov Result0, t	
004f73 2f80      	mov Result1, t
004f74 e77f      	ldi Result2, 0x7f	
                 
004f75 2033      mul4:	tst Sign		;negate result if sign set.
004f76 f442      	brpl mul3
004f77 9420      	com Result0
004f78 9580      	com Result1
004f79 9570      	com Result2
004f7a e001      	ldi t,1
004f7b 0e20      	add Result0, t
004f7c 2700      	clr t
004f7d 1f80      	adc Result1, t
004f7e 1f70      	adc Result2, t
                 
004f7f 9508      mul3:	ret
                 
                 .undef	Op1_2
                 .undef	Op1_1
                 .undef	Op1_0
                 
                 .undef	Op2_2
                 .undef	Op2_1
                 .undef	Op2_0
                 
                 .undef	Result2
                 .undef	Result1
                 .undef	Result0
                 .undef	Sign
                 
                 
                 	;--- 16.8 fixed point MAC ---
                 
                 
                 .def	A=r18
                 
                 .def	Op1_2=r19
                 .def	Op1_1=r20
                 .def	Op1_0=r21
                 
                 .def	Op2_0=r22
                 
                 .def	Result2=r23
                 .def	Result1=r24
                 .def	Result0=r2
                 .def	Sign=r3
                 
004f80 2f60      macc:	mov Op2_0, t
                 
004f81 2e33      	mov Sign, Op1_2		;calculate result sign
004f82 2636      	eor Sign, Op2_0
                 
004f83 2333      	tst Op1_2		;Op1=ABS(Op1)
004f84 f442      	brpl mac1
004f85 9550      	com Op1_0
004f86 9540      	com Op1_1
004f87 9530      	com Op1_2
004f88 e001      	ldi t,1
004f89 0f50      	add Op1_0, t
004f8a 2700      	clr t
004f8b 1f40      	adc Op1_1, t
004f8c 1f30      	adc Op1_2, t
                 
004f8d 2366      mac1:	tst Op2_0		;Op2=ABS(Op2)
004f8e f40a      	brpl pc + 2
004f8f 9561      	neg Op2_0
                 
004f90 2788      	clr Result1
004f91 2777      	clr Result2
004f92 2700      	clr t
                 
004f93 9f56      	mul Op1_0, Op2_0	;Mul #1
004f94 2d20      	mov A, r0
004f95 2c21      	mov Result0, r1
                 
004f96 9f46      	mul Op1_1, Op2_0	;mul #2
004f97 0c20      	add Result0, r0
004f98 1d81      	adc Result1, r1
004f99 1f70      	adc Result2, t
                 
004f9a 9f36      	mul Op1_2, Op2_0	;mul #3
004f9b 0d80      	add Result1, r0
004f9c 1d71      	adc Result2, r1
                 
004f9d 0f22      	lsl A			;round off
                 
004f9e 1e20      	adc Result0, t
004f9f 1f80      	adc result1, t
004fa0 1f70      	adc result2, t
                 
004fa1 2033      	tst Sign		;accumulate
004fa2 f422      	brpl mac2
                 
004fa3 19d2      	sub yh, Result0
004fa4 0ba8      	sbc xl, Result1
004fa5 0bb7      	sbc xh, Result2
                 
004fa6 9508      	ret
                 
004fa7 0dd2      mac2:	add yh, Result0
004fa8 1fa8      	adc xl, Result1
004fa9 1fb7      	adc xh, Result2
                 
004faa 9508      	ret
                 
                 .undef	Op1_2
                 .undef	Op1_1
                 .undef	Op1_0
                 
                 .undef	Op2_0
                 
                 .undef	Result2
                 .undef	Result1
                 .undef	Result0
                 .undef	Sign
                 
                 .undef A
                 
                 .include "832mathlib_subs.asm"
                 
                 	;--- 8.32 fixed point multiply ---
                 
                 .undef	XH
                 .undef	XL
                 .undef	YH
                 .undef	YL
                 .undef	ZH
                 .undef	ZL
                 
                 .def	Op1_4=r3
                 .def	Op1_3=r4
                 .def	Op1_2=r5
                 .def	Op1_1=r6
                 .def	Op1_0=r7
                 
                 .def	op2_4=r18
                 .def	op2_3=r19
                 .def	Op2_2=r20
                 .def	Op2_1=r21
                 .def	Op2_0=r22
                 
                 .def	Result4=r27
                 .def	Result3=r28
                 .def	Result2=r29
                 .def	Result1=r30
                 .def	Result0=r31
                 .def	Resultm1=r8
                 .def	Resultm2=r9
                 .def	Resultm3=r10
                 
                 .def	Sign=r23
                 
                 
                 b832mul_c:
004fab 2d73      	mov Sign, Op1_4		;calculate result sign
004fac 2772      	eor Sign, Op2_4
                 
004fad 2033      	tst Op1_4		;Op1=ABS(Op1)
004fae f462      	brpl mmm1a
004faf 9470      	com Op1_0
004fb0 9460      	com Op1_1
004fb1 9450      	com Op1_2
004fb2 9440      	com Op1_3
004fb3 9430      	com Op1_4
004fb4 e001      	ldi t,1
004fb5 0e70      	add Op1_0, t
004fb6 2700      	clr t
004fb7 1e60      	adc Op1_1, t
004fb8 1e50      	adc Op1_2, t
004fb9 1e40      	adc Op1_3, t
004fba 1e30      	adc Op1_4, t
                 
                 
004fbb 2322      mmm1a:	tst Op2_4		;Op2=ABS(Op2)
004fbc f462      	brpl mmm2a
004fbd 9560      	com Op2_0
004fbe 9550      	com Op2_1
004fbf 9540      	com Op2_2
004fc0 9530      	com Op2_3
004fc1 9520      	com Op2_4
004fc2 e001      	ldi t,1
004fc3 0f60      	add Op2_0, t
004fc4 2700      	clr t
004fc5 1f50      	adc Op2_1, t
004fc6 1f40      	adc Op2_2, t
004fc7 1f30      	adc Op2_3, t
004fc8 1f20      	adc Op2_4, t
                 
                 
004fc9 27bb      mmm2a:	clr Result4
004fca 27cc      	clr Result3
004fcb 27dd      	clr Result2
004fcc 27ee      	clr Result1
004fcd 27ff      	clr Result0
004fce 2488      	clr Resultm1
004fcf 2499      	clr Resultm2
004fd0 2700      	clr t
                 				
                 	; byte 0
004fd1 9e76      	mul Op1_0, Op2_0
004fd2 2ca1      	mov resultm3, r1
                 
                 	; byte 1
004fd3 9e75      	mul Op1_0, Op2_1
004fd4 0ca0      	add resultm3, r0
004fd5 1c91      	adc resultm2, r1
004fd6 1e80      	adc resultm1, t
                 
004fd7 9e66      	mul Op1_1, Op2_0
004fd8 0ca0      	add resultm3, r0
004fd9 1c91      	adc resultm2, r1
004fda 1e80      	adc resultm1, t
                 
                 	;byte 2
004fdb 9e65      	mul Op1_1, Op2_1
004fdc 0c90      	add resultm2, r0
004fdd 1c81      	adc resultm1, r1
004fde 1ff0      	adc result0, t
                 
004fdf 9e74      	mul Op1_0, Op2_2
004fe0 0c90      	add resultm2, r0
004fe1 1c81      	adc resultm1, r1
004fe2 1ff0      	adc result0, t
                 
004fe3 9e56      	mul Op1_2, Op2_0
004fe4 0c90      	add resultm2, r0
004fe5 1c81      	adc resultm1, r1
004fe6 1ff0      	adc result0, t
                 
                 	;byte 3
004fe7 9e73      	mul Op1_0, Op2_3
004fe8 0c80      	add resultm1, r0
004fe9 1df1      	adc result0, r1
004fea 1fe0      	adc result1, t
                 
004feb 9e46      	mul Op1_3, Op2_0
004fec 0c80      	add resultm1, r0
004fed 1df1      	adc result0, r1
004fee 1fe0      	adc result1, t
                 
004fef 9e64      	mul Op1_1, Op2_2
004ff0 0c80      	add resultm1, r0
004ff1 1df1      	adc result0, r1
004ff2 1fe0      	adc result1, t
                 
004ff3 9e55      	mul Op1_2, Op2_1
004ff4 0c80      	add resultm1, r0
004ff5 1df1      	adc result0, r1
004ff6 1fe0      	adc result1, t
                 
                 	; byte 4
                 	
004ff7 9e72      	mul Op1_0, Op2_4
004ff8 0df0      	add result0, r0
004ff9 1de1      	adc result1, r1
004ffa 1fd0      	adc result2, t
                 
004ffb 9e36      	mul Op1_4, Op2_0
004ffc 0df0      	add result0, r0
004ffd 1de1      	adc result1, r1
004ffe 1fd0      	adc result2, t
                 
004fff 9e63      	mul Op1_1, Op2_3
005000 0df0      	add result0, r0
005001 1de1      	adc result1, r1
005002 1fd0      	adc result2, t
                 
005003 9e45      	mul Op1_3, Op2_1
005004 0df0      	add result0, r0
005005 1de1      	adc result1, r1
005006 1fd0      	adc result2, t
                 
005007 9e54      	mul Op1_2, Op2_2
005008 0df0      	add result0, r0
005009 1de1      	adc result1, r1
00500a 1fd0      	adc result2, t
                 
                 	; byte 5
00500b 9e62      	mul Op1_1, Op2_4
00500c 0de0      	add result1, r0
00500d 1dd1      	adc result2, r1
00500e 1fc0      	adc result3, t
                 	
00500f 9e35      	mul Op1_4, Op2_1
005010 0de0      	add result1, r0
005011 1dd1      	adc result2, r1
005012 1fc0      	adc result3, t
                 
005013 9e53      	mul Op1_2, Op2_3
005014 0de0      	add result1, r0
005015 1dd1      	adc result2, r1
005016 1fc0      	adc result3, t
                 
005017 9e44      	mul Op1_3, Op2_2
005018 0de0      	add result1, r0
005019 1dd1      	adc result2, r1
00501a 1fc0      	adc result3, t
                 
                 	; byte 6
                 	
00501b 9e52      	mul Op1_2, Op2_4
00501c 0dd0      	add result2, r0
00501d 1dc1      	adc result3, r1
00501e 1fb0      	adc result4, t
                 	
00501f 9e34      	mul Op1_4, Op2_2
005020 0dd0      	add result2, r0
005021 1dc1      	adc result3, r1
005022 1fb0      	adc result4, t
                 
005023 9e43      	mul Op1_3, Op2_3
005024 0dd0      	add result2, r0
005025 1dc1      	adc result3, r1
005026 1fb0      	adc result4, t
                 
                 	; byte 7
005027 9e42      	mul Op1_3, Op2_4
005028 0dc0      	add result3, r0
005029 1db1      	adc result4, r1
                 
00502a 9e33      	mul Op1_4, Op2_3
00502b 0dc0      	add result3, r0
00502c 1db1      	adc result4, r1
                 	
                 	; byte 8
00502d 9e32      	mul Op1_4, Op2_4
00502e 0db0      	add result4, r0
                 
                 
00502f 0c88      	lsl Resultm1		;round off
005030 1ff0      	adc Result0, t
005031 1fe0      	adc result1, t
005032 1fd0      	adc result2, t
005033 1fc0      	adc result3, t
005034 1fb0      	adc result4, t
                 
005035 2377      	tst Sign		;negate result if sign set.
005036 f462      	brpl mmm3a
005037 95f0      	com Result0
005038 95e0      	com Result1
005039 95d0      	com Result2
00503a 95c0      	com Result3
00503b 95b0      	com Result4
00503c e001      	ldi t,1
00503d 0ff0      	add Result0, t
00503e 2700      	clr t
00503f 1fe0      	adc Result1, t
005040 1fd0      	adc Result2, t
005041 1fc0      	adc Result3, t
005042 1fb0      	adc Result4, t
                 
005043 9508      mmm3a:	ret
                 
                 .undef	Op1_4
                 .undef	Op1_3
                 .undef	Op1_2
                 .undef	Op1_1
                 .undef	Op1_0
                 
                 .undef	op2_4
                 .undef	op2_3
                 .undef	Op2_2
                 .undef	Op2_1
                 .undef	Op2_0
                 
                 .undef	Result4
                 .undef	Result3
                 .undef	Result2
                 .undef	Result1
                 .undef	Result0
                 .undef	Resultm1
                 .undef	Resultm2
                 .undef	Resultm3
                 
                 .undef	Sign
                 
                 .def	XH	= r27
                 .def	XL	= r26
                 .def	YH	= r29
                 .def	YL	= r28
                 .def	ZH	= r31
                 .def	ZL	= r30
                 	;--- 8.32 fast divide ---
                 
                 .def	Op1_4=r3
                 .def	Op1_3=r4
                 .def	Op1_2=r5
                 .def	Op1_1=r6
                 .def	Op1_0=r7
                 
                 b832fdiv_c:
005044 9435      	asr Op1_4
005045 9447      	ror Op1_3
005046 9457      	ror Op1_2
005047 9467      	ror Op1_1
005048 9477      	ror Op1_0
005049 950a      	dec t
00504a f7c9      	brne b832fdiv_c
                 
00504b 1e70      	adc Op1_0, t		;round off
00504c 1e60      	adc Op1_1, t
00504d 1e50      	adc Op1_2, t
00504e 1e40      	adc Op1_3, t
00504f 1e30      	adc Op1_4, t
                 	
005050 9508      	ret
                 
                 .undef	Op1_4
                 .undef	Op1_3
                 .undef	Op1_2
                 .undef	Op1_1
                 .undef	Op1_0
                 font6x8:
                 .include "font6x8.asm"
005051 0000
005052 0000
005053 0000      
005054 e310
005055 1084
005056 0001      	.db 0x10,0xE3,0x84,0x10,0x01,0x00	; !
005057 b46d
005058 0080
005059 0000      	.db 0x6D,0xB4,0x80,0x00,0x00,0x00	; &quot;
00505a a700
00505b 29ca
00505c 80f2      	.db 0x00,0xA7,0xCA,0x29,0xF2,0x80	; #
00505d e420
00505e 090c
00505f 00c1      	.db 0x20,0xE4,0x0C,0x09,0xC1,0x00	; $
005060 9065
005061 2184
005062 c034      	.db 0x65,0x90,0x84,0x21,0x34,0xC0	; %
005063 4521
005064 5508
005065 4023      	.db 0x21,0x45,0x08,0x55,0x23,0x40	; &amp;
005066 c230
005067 0000
005068 0000      	.db 0x30,0xC2,0x00,0x00,0x00,0x00	; '
005069 8210
00506a 2008
00506b 0081      	.db 0x10,0x82,0x08,0x20,0x81,0x00	; (
00506c 4120
00506d 1004
00506e 0042      	.db 0x20,0x41,0x04,0x10,0x42,0x00	; )
00506f 9218
005070 0046
005071 0000      	.db 0x18,0x92,0x46,0x00,0x00,0x00	; Custom degree symbol			.db 0x00,0xA3,0x9F,0x38,0xA0,0x00	; *
005072 4100
005073 101f
005074 0040      	.db 0x00,0x41,0x1F,0x10,0x40,0x00	; +
005075 0000
005076 0000
005077 08c3      	.db 0x00,0x00,0x00,0x00,0xC3,0x08	; ,
005078 0000
005079 001f
00507a 0000      	.db 0x00,0x00,0x1F,0x00,0x00,0x00	; -
00507b 0000
00507c 0000
00507d 00c3      	.db 0x00,0x00,0x00,0x00,0xC3,0x00	; .
00507e 1000
00507f 2184
005080 0000      	.db 0x00,0x10,0x84,0x21,0x00,0x00	; /
005081 1439
005082 65d5
005083 8013      	.db 0x39,0x14,0xD5,0x65,0x13,0x80	; 0
005084 c110
005085 1004
005086 8043      	.db 0x10,0xC1,0x04,0x10,0x43,0x80	; 1
005087 1039
005088 2146
005089 c007      	.db 0x39,0x10,0x46,0x21,0x07,0xC0	; 2
00508a 1039
00508b 054e
00508c 8013      	.db 0x39,0x10,0x4E,0x05,0x13,0x80	; 3
00508d 6208
00508e 7c92
00508f 8020      	.db 0x08,0x62,0x92,0x7C,0x20,0x80	; 4
005090 047d
005091 051e
005092 8013      	.db 0x7D,0x04,0x1E,0x05,0x13,0x80	; 5
005093 8418
005094 451e
005095 8013      	.db 0x18,0x84,0x1E,0x45,0x13,0x80	; 6
005096 107c
005097 2084
005098 0082      	.db 0x7C,0x10,0x84,0x20,0x82,0x00	; 7
005099 1439
00509a 454e
00509b 8013      	.db 0x39,0x14,0x4E,0x45,0x13,0x80	; 8
00509c 1439
00509d 044f
00509e 0023      	.db 0x39,0x14,0x4F,0x04,0x23,0x00	; 9
00509f 0300
0050a0 000c
0050a1 00c3      	.db 0x00,0x03,0x0C,0x00,0xC3,0x00	; :
0050a2 0300
0050a3 000c
0050a4 08c3      	.db 0x00,0x03,0x0C,0x00,0xC3,0x08	; ;
0050a5 0700
0050a6 10ce
0050a7 0000      	.db 0x00,0x07,0xCE,0x10,0x00,0x00	; Custom triangle pointing down.	.db 0x08,0x42,0x10,0x20,0x40,0x80	; &lt;
0050a8 0700
0050a9 01c0
0050aa 00f0      	.db 0x00,0x07,0xC0,0x01,0xF0,0x00	; =
0050ab 0100
0050ac 7c0e
0050ad 0000      	.db 0x00,0x01,0x0E,0x7C,0x00,0x00	; Custom triangle pointing up.		.db 0x20,0x40,0x81,0x08,0x42,0x00	; &gt;
0050ae 1039
0050af 1046
0050b0 0001      	.db 0x39,0x10,0x46,0x10,0x01,0x00	; ?
0050b1 e700
0050b2 7cdf
0050b3 00e0      	.db 0x00,0xE7,0xDF,0x7C,0xE0,0x00	; Custom selection ball.		.db 0x39,0x15,0xD5,0x5D,0x03,0x80	; @
0050b4 1439
0050b5 7d51
0050b6 4014      	.db 0x39,0x14,0x51,0x7D,0x14,0x40	; A
0050b7 1479
0050b8 455e
0050b9 8017      	.db 0x79,0x14,0x5E,0x45,0x17,0x80	; B
0050ba 1439
0050bb 4110
0050bc 8013      	.db 0x39,0x14,0x10,0x41,0x13,0x80	; C
0050bd 1479
0050be 4551
0050bf 8017      	.db 0x79,0x14,0x51,0x45,0x17,0x80	; D
0050c0 047d
0050c1 411e
0050c2 c007      	.db 0x7D,0x04,0x1E,0x41,0x07,0xC0	; E
0050c3 047d
0050c4 411e
0050c5 0004      	.db 0x7D,0x04,0x1E,0x41,0x04,0x00	; F
0050c6 1439
0050c7 4517
0050c8 c013      	.db 0x39,0x14,0x17,0x45,0x13,0xC0	; G
0050c9 1445
0050ca 455f
0050cb 4014      	.db 0x45,0x14,0x5F,0x45,0x14,0x40	; H
0050cc 4138
0050cd 1004
0050ce 8043      	.db 0x38,0x41,0x04,0x10,0x43,0x80	; I
0050cf 1004
0050d0 4541
0050d1 8013      	.db 0x04,0x10,0x41,0x45,0x13,0x80	; J
0050d2 2545
0050d3 5118
0050d4 4024      	.db 0x45,0x25,0x18,0x51,0x24,0x40	; K
0050d5 0441
0050d6 4110
0050d7 c007      	.db 0x41,0x04,0x10,0x41,0x07,0xC0	; L
0050d8 b545
0050d9 4551
0050da 4014      	.db 0x45,0xB5,0x51,0x45,0x14,0x40	; M
0050db 9545
0050dc 4553
0050dd 4014      	.db 0x45,0x95,0x53,0x45,0x14,0x40	; N
0050de 1439
0050df 4551
0050e0 8013      	.db 0x39,0x14,0x51,0x45,0x13,0x80	; O
0050e1 1479
0050e2 415e
0050e3 0004      	.db 0x79,0x14,0x5E,0x41,0x04,0x00	; P
0050e4 1439
0050e5 5551
0050e6 4023      	.db 0x39,0x14,0x51,0x55,0x23,0x40	; Q
0050e7 1479
0050e8 495e
0050e9 4014      	.db 0x79,0x14,0x5E,0x49,0x14,0x40	; R
0050ea 1439
0050eb 050e
0050ec 8013      	.db 0x39,0x14,0x0E,0x05,0x13,0x80	; S
0050ed 417c
0050ee 1004
0050ef 0041      	.db 0x7C,0x41,0x04,0x10,0x41,0x00	; T
0050f0 1445
0050f1 4551
0050f2 8013      	.db 0x45,0x14,0x51,0x45,0x13,0x80	; U
0050f3 1445
0050f4 4451
0050f5 00a1      	.db 0x45,0x14,0x51,0x44,0xA1,0x00	; V
0050f6 1545
0050f7 5555
0050f8 8052      	.db 0x45,0x15,0x55,0x55,0x52,0x80	; W
0050f9 1245
0050fa 2984
0050fb 4014      	.db 0x45,0x12,0x84,0x29,0x14,0x40	; X
0050fc 1445
0050fd 104a
0050fe 0041      	.db 0x45,0x14,0x4A,0x10,0x41,0x00	; Y
0050ff 2178
005100 4108
005101 8007      	.db 0x78,0x21,0x08,0x41,0x07,0x80	; Z
005102 8238
005103 2008
005104 8083      	.db 0x38,0x82,0x08,0x20,0x83,0x80	; [
005105 0201
005106 0804
005107 0010      	.db 0x01,0x02,0x04,0x08,0x10,0x00	; \
005108 2038
005109 0882
00510a 8023      	.db 0x38,0x20,0x82,0x08,0x23,0x80	; ]
00510b a410
00510c 0040
00510d 0000      	.db 0x10,0xA4,0x40,0x00,0x00,0x00	; ^
00510e 0000
00510f 0000
005110 3f00      	.db 0x00,0x00,0x00,0x00,0x00,0x3F	; _
005111 c130
005112 0000
005113 0000      	.db 0x30,0xC1,0x00,0x00,0x00,0x00	; `
005114 0300
005115 3d81
005116 c013      	.db 0x00,0x03,0x81,0x3D,0x13,0xC0	; a
005117 0741
005118 4591
005119 8017      	.db 0x41,0x07,0x91,0x45,0x17,0x80	; b
00511a 0300
00511b 4191
00511c 8013      	.db 0x00,0x03,0x91,0x41,0x13,0x80	; c
00511d 1304
00511e 45d1
00511f c013      	.db 0x04,0x13,0xD1,0x45,0x13,0xC0	; d
005120 0300
005121 7991
005122 8003      	.db 0x00,0x03,0x91,0x79,0x03,0x80	; e
005123 8218
005124 201e
005125 0082      	.db 0x18,0x82,0x1E,0x20,0x82,0x00	; f
005126 0300
005127 44d1
005128 4ef0      	.db 0x00,0x03,0xD1,0x44,0xF0,0x4E	; g
005129 0741
00512a 4912
00512b 8024      	.db 0x41,0x07,0x12,0x49,0x24,0x80	; h
00512c 0110
00512d 1004
00512e 8041      	.db 0x10,0x01,0x04,0x10,0x41,0x80	; i
00512f 0108
005130 0882
005131 8c24      	.db 0x08,0x01,0x82,0x08,0x24,0x8C	; j
005132 0441
005133 6194
005134 8044      	.db 0x41,0x04,0x94,0x61,0x44,0x80	; k
005135 4110
005136 1004
005137 8041      	.db 0x10,0x41,0x04,0x10,0x41,0x80	; l
005138 0600
005139 5595
00513a 4014      	.db 0x00,0x06,0x95,0x55,0x14,0x40	; m
00513b 0700
00513c 4912
00513d 8024      	.db 0x00,0x07,0x12,0x49,0x24,0x80	; n
00513e 0300
00513f 4591
005140 8013      	.db 0x00,0x03,0x91,0x45,0x13,0x80	; o
005141 0700
005142 4591
005143 9017      	.db 0x00,0x07,0x91,0x45,0x17,0x90	; p
005144 0300
005145 45d1
005146 c113      	.db 0x00,0x03,0xD1,0x45,0x13,0xC1	; q
005147 0500
005148 2089
005149 0087      	.db 0x00,0x05,0x89,0x20,0x87,0x00	; r
00514a 0300
00514b 3890
00514c 8013      	.db 0x00,0x03,0x90,0x38,0x13,0x80	; s
00514d 8700
00514e 2088
00514f 00a1      	.db 0x00,0x87,0x88,0x20,0xA1,0x00	; t
005150 0400
005151 4992
005152 8062      	.db 0x00,0x04,0x92,0x49,0x62,0x80	; u
005153 0400
005154 4451
005155 00a1      	.db 0x00,0x04,0x51,0x44,0xA1,0x00	; v
005156 0400
005157 5551
005158 80f2      	.db 0x00,0x04,0x51,0x55,0xF2,0x80	; w
005159 0400
00515a 3192
00515b 8024      	.db 0x00,0x04,0x92,0x31,0x24,0x80	; x
00515c 0400
00515d 4892
00515e 18e1      	.db 0x00,0x04,0x92,0x48,0xE1,0x18	; y
00515f 0700
005160 3182
005161 8007      	.db 0x00,0x07,0x82,0x31,0x07,0x80	; z
005162 8218
005163 2018
005164 8081      	.db 0x18,0x82,0x18,0x20,0x81,0x80	; {
005165 4110
005166 1000
005167 0041      	.db 0x10,0x41,0x00,0x10,0x41,0x00	; |
005168 2030
005169 0883
00516a 0023      	.db 0x30,0x20,0x83,0x08,0x23,0x00	; }
00516b 4029
00516c 0000
00516d 0000      	.db 0x29,0x40,0x00,0x00,0x00,0x00	; ~
00516e e610
00516f 45d1
005170 00f0      	.db 0x10,0xE6,0xD1,0x45,0xF0,0x00	; 
                 
                 font8x12:
                 ;.include "font8x12.asm"
                 font12x16:
                 .include "font12x16.asm"
                 
                 
005171 0000
005172 0000
005173 0000
005174 0000
005175 0000
005176 0000
005177 0000
005178 0000
005179 0000
00517a 0000
00517b 0000
00517c 0000      	.db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	;  
00517d 0006
00517e 0f60
00517f f000
005180 000f
005181 0ff0
005182 6000
005183 0006
005184 0060
005185 0000
005186 0006
005187 0060
005188 0000      	.db 0x06,0x00,0x60,0x0F,0x00,0xF0,0x0F,0x00,0xF0,0x0F,0x00,0x60,0x06,0x00,0x60,0x00,0x00,0x00,0x06,0x00,0x60,0x00,0x00,0x00	; !
005189 0000
00518a 1900
00518b 9881
00518c 8119
00518d 0098
00518e 0000
00518f 0000
005190 0000
005191 0000
005192 0000
005193 0000
005194 0000      	.db 0x00,0x00,0x00,0x19,0x81,0x98,0x19,0x81,0x98,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; &quot;
005195 0000
005196 0666
005197 6660
005198 f03f
005199 0ccc
00519a 98c1
00519b 8719
00519c 33fc
00519d 3003
00519e 0033
00519f 0000
0051a0 0000      	.db 0x00,0x00,0x66,0x06,0x60,0x66,0x3F,0xF0,0xCC,0x0C,0xC1,0x98,0x19,0x87,0xFC,0x33,0x03,0x30,0x33,0x00,0x00,0x00,0x00,0x00	; #
0051a1 0006
0051a2 1f60
0051a3 fc83
0051a4 0336
0051a5 3f60
0051a6 fc81
0051a7 c006
0051a8 3f6c
0051a9 f8c1
0051aa 0006
0051ab 0060
0051ac 0000      	.db 0x06,0x00,0x60,0x1F,0x83,0xFC,0x36,0x03,0x60,0x3F,0x81,0xFC,0x06,0xC0,0x6C,0x3F,0xC1,0xF8,0x06,0x00,0x60,0x00,0x00,0x00	; $
0051ad 0000
0051ae 0000
0051af 8313
0051b0 7338
0051b1 018e
0051b2 38c0
0051b3 0007
0051b4 1ce0
0051b5 8e03
0051b6 e670
0051b7 000e
0051b8 0000      	.db 0x00,0x00,0x00,0x00,0x13,0x83,0x38,0x73,0x8E,0x01,0xC0,0x38,0x07,0x00,0xE0,0x1C,0x03,0x8E,0x70,0xE6,0x0E,0x00,0x00,0x00	; %
0051b9 0000
0051ba 0d70
0051bb 9881
0051bc 8119
0051bd 0eb0
0051be e001
0051bf 033e
0051c0 3336
0051c1 18c3
0051c2 c13b
0051c3 00e6
0051c4 0000      	.db 0x00,0x00,0x70,0x0D,0x81,0x98,0x19,0x81,0xB0,0x0E,0x01,0xE0,0x3E,0x03,0x36,0x33,0xC3,0x18,0x3B,0xC1,0xE6,0x00,0x00,0x00	; &amp;
0051c5 000e
0051c6 0ee0
0051c7 6000
0051c8 0006
0051c9 00c0
0051ca 0000
0051cb 0000
0051cc 0000
0051cd 0000
0051ce 0000
0051cf 0000
0051d0 0000      	.db 0x0E,0x00,0xE0,0x0E,0x00,0x60,0x06,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; '
0051d1 8003
0051d2 0e60
0051d3 c000
0051d4 011c
0051d5 1cc0
0051d6 c001
0051d7 011c
0051d8 0cc0
0051d9 e000
0051da 0006
0051db 0038
0051dc 0000      	.db 0x03,0x80,0x60,0x0E,0x00,0xC0,0x1C,0x01,0xC0,0x1C,0x01,0xC0,0x1C,0x01,0xC0,0x0C,0x00,0xE0,0x06,0x00,0x38,0x00,0x00,0x00	; (
0051dd 001c
0051de 0760
0051df 3000
0051e0 8003
0051e1 0338
0051e2 3880
0051e3 8003
0051e4 0338
0051e5 7000
0051e6 0106
0051e7 00c0
0051e8 0000      	.db 0x1C,0x00,0x60,0x07,0x00,0x30,0x03,0x80,0x38,0x03,0x80,0x38,0x03,0x80,0x38,0x03,0x00,0x70,0x06,0x01,0xC0,0x00,0x00,0x00	; )
0051e9 0000
0051ea 0000
0051eb 6c03
0051ec c136
0051ed 0ff8
0051ee fc03
0051ef 010f
0051f0 36f8
0051f1 6cc3
0051f2 0000
0051f3 0000
0051f4 0000      	.db 0x00,0x00,0x00,0x00,0x03,0x6C,0x36,0xC1,0xF8,0x0F,0x03,0xFC,0x0F,0x01,0xF8,0x36,0xC3,0x6C,0x00,0x00,0x00,0x00,0x00,0x00	; *
0051f5 0000
0051f6 0000
0051f7 0000
0051f8 0006
0051f9 0660
0051fa fc03
0051fb c03f
0051fc 0660
0051fd 6000
0051fe 0000
0051ff 0000
005200 0000      	.db 0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x60,0x06,0x03,0xFC,0x3F,0xC0,0x60,0x06,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00	; +
005201 0000
005202 0000
005203 0000
005204 0000
005205 0000
005206 0000
005207 0000
005208 0000
005209 e000
00520a 000e
00520b 06e0
00520c c000      	.db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x0E,0x00,0xE0,0x06,0x00,0xC0	; ,
00520d 0000
00520e 0000
00520f 0000
005210 0000
005211 0000
005212 fc03
005213 c03f
005214 0000
005215 0000
005216 0000
005217 0000
005218 0000      	.db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFC,0x3F,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; -
005219 0000
00521a 0000
00521b 0000
00521c 0000
00521d 0000
00521e 0000
00521f 0000
005220 0000
005221 e000
005222 000e
005223 00e0
005224 0000      	.db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x0E,0x00,0xE0,0x00,0x00,0x00	; .
005225 0000
005226 0001
005227 0730
005228 e000
005229 031c
00522a 7080
00522b 010e
00522c 38c0
00522d 0007
00522e 0060
00522f 0000
005230 0000      	.db 0x00,0x00,0x01,0x00,0x30,0x07,0x00,0xE0,0x1C,0x03,0x80,0x70,0x0E,0x01,0xC0,0x38,0x07,0x00,0x60,0x00,0x00,0x00,0x00,0x00	; /
                 
005231 830f
005232 30fe
005233 0766
005234 f660
005235 631b
005236 6336
005237 376c
005238 7083
005239 0633
00523a e03f
00523b 00f8
00523c 0000      	.db 0x0F,0x83,0xFE,0x30,0x66,0x07,0x60,0xF6,0x1B,0x63,0x36,0x63,0x6C,0x37,0x83,0x70,0x33,0x06,0x3F,0xE0,0xF8,0x00,0x00,0x00	; 0
00523d 0003
00523e 1f70
00523f f001
005240 0003
005241 0330
005242 3000
005243 0003
005244 0330
005245 3000
005246 e11f
005247 00fe
005248 0000      	.db 0x03,0x00,0x70,0x1F,0x01,0xF0,0x03,0x00,0x30,0x03,0x00,0x30,0x03,0x00,0x30,0x03,0x00,0x30,0x1F,0xE1,0xFE,0x00,0x00,0x00	; 1
005249 c31f
00524a 70fe
00524b 0376
00524c 7060
00524d 010e
00524e 38c0
00524f 0007
005250 1ce0
005251 8003
005252 f77f
005253 00ff
005254 0000      	.db 0x1F,0xC3,0xFE,0x70,0x76,0x03,0x60,0x70,0x0E,0x01,0xC0,0x38,0x07,0x00,0xE0,0x1C,0x03,0x80,0x7F,0xF7,0xFF,0x00,0x00,0x00	; 2
005255 c31f
005256 70fe
005257 0376
005258 3000
005259 0f07
00525a fce0
00525b 6000
00525c 6003
00525d 0737
00525e e13f
00525f 00fc
005260 0000      	.db 0x1F,0xC3,0xFE,0x70,0x76,0x03,0x00,0x30,0x07,0x0F,0xE0,0xFC,0x00,0x60,0x03,0x60,0x37,0x07,0x3F,0xE1,0xFC,0x00,0x00,0x00	; 3
005261 c001
005262 073c
005263 ecc0
005264 c31c
005265 708c
005266 0cc6
005267 f77f
005268 00ff
005269 0cc0
00526a c000
00526b 000c
00526c 0000      	.db 0x01,0xC0,0x3C,0x07,0xC0,0xEC,0x1C,0xC3,0x8C,0x70,0xC6,0x0C,0x7F,0xF7,0xFF,0x00,0xC0,0x0C,0x00,0xC0,0x0C,0x00,0x00,0x00	; 4
00526d f77f
00526e 60ff
00526f 0006
005270 0760
005271 3ffc
005272 07e0
005273 3000
005274 6003
005275 0737
005276 e13f
005277 00fc
005278 0000      	.db 0x7F,0xF7,0xFF,0x60,0x06,0x00,0x60,0x07,0xFC,0x3F,0xE0,0x07,0x00,0x30,0x03,0x60,0x37,0x07,0x3F,0xE1,0xFC,0x00,0x00,0x00	; 5
005279 c003
00527a 0e7c
00527b c001
00527c 0338
00527d 7f00
00527e fec7
00527f 7670
005280 6003
005281 0737
005282 e13f
005283 00fc
005284 0000      	.db 0x03,0xC0,0x7C,0x0E,0x01,0xC0,0x38,0x03,0x00,0x7F,0xC7,0xFE,0x70,0x76,0x03,0x60,0x37,0x07,0x3F,0xE1,0xFC,0x00,0x00,0x00	; 6
005285 f77f
005286 00ff
005287 0660
005288 c000
005289 010c
00528a 1880
00528b 0003
00528c 0630
00528d 6000
00528e 000c
00528f 00c0
005290 0000      	.db 0x7F,0xF7,0xFF,0x00,0x60,0x06,0x00,0xC0,0x0C,0x01,0x80,0x18,0x03,0x00,0x30,0x06,0x00,0x60,0x0C,0x00,0xC0,0x00,0x00,0x00	; 7
005291 810f
005292 38fc
005293 06e3
005294 6330
005295 1f8e
005296 fec3
005297 7670
005298 6003
005299 0737
00529a e13f
00529b 00fc
00529c 0000      	.db 0x0F,0x81,0xFC,0x38,0xE3,0x06,0x30,0x63,0x8E,0x1F,0xC3,0xFE,0x70,0x76,0x03,0x60,0x37,0x07,0x3F,0xE1,0xFC,0x00,0x00,0x00	; 8
00529d c31f
00529e 70fe
00529f 0376
0052a0 3760
0052a1 3f07
0052a2 fff1
0052a3 6000
0052a4 010e
0052a5 38c0
0052a6 011f
0052a7 00e0
0052a8 0000      	.db 0x1F,0xC3,0xFE,0x70,0x76,0x03,0x60,0x37,0x07,0x3F,0xF1,0xFF,0x00,0x60,0x0E,0x01,0xC0,0x38,0x1F,0x01,0xE0,0x00,0x00,0x00	; 9
                 
0052a9 0000
0052aa 0000
0052ab 0000
0052ac 000e
0052ad 0ee0
0052ae 0000
0052af 0000
0052b0 0e00
0052b1 e000
0052b2 000e
0052b3 0000
0052b4 0000      	.db 0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x00,0xE0,0x0E,0x00,0x00,0x00,0x00,0x00,0x0E,0x00,0xE0,0x0E,0x00,0x00,0x00,0x00,0x00	; :
0052b5 0000
0052b6 0000
0052b7 0000
0052b8 000e
0052b9 0ee0
0052ba 0000
0052bb 0000
0052bc 0e00
0052bd e000
0052be 000e
0052bf 0660
0052c0 c000      	.db 0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x00,0xE0,0x0E,0x00,0x00,0x00,0x00,0x00,0x0E,0x00,0xE0,0x0E,0x00,0x60,0x06,0x00,0xC0	; ;
0052c1 c000
0052c2 031c
0052c3 7080
0052c4 010e
0052c5 38c0
0052c6 8003
0052c7 001c
0052c8 07e0
0052c9 3800
0052ca c001
0052cb 000c
0052cc 0000      	.db 0x00,0xC0,0x1C,0x03,0x80,0x70,0x0E,0x01,0xC0,0x38,0x03,0x80,0x1C,0x00,0xE0,0x07,0x00,0x38,0x01,0xC0,0x0C,0x00,0x00,0x00	; &lt;
0052cd 0000
0052ce 0000
0052cf 0000
0052d0 0300
0052d1 3ffe
0052d2 00e0
0052d3 0300
0052d4 3ffe
0052d5 00e0
0052d6 0000
0052d7 0000
0052d8 0000      	.db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFE,0x3F,0xE0,0x00,0x00,0x03,0xFE,0x3F,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; =
0052d9 0330
0052da 1c80
0052db e000
0052dc 0007
0052dd 0138
0052de 1cc0
0052df 8003
0052e0 0e70
0052e1 c001
0052e2 0338
0052e3 0000
0052e4 0000      	.db 0x30,0x03,0x80,0x1C,0x00,0xE0,0x07,0x00,0x38,0x01,0xC0,0x1C,0x03,0x80,0x70,0x0E,0x01,0xC0,0x38,0x03,0x00,0x00,0x00,0x00	; &gt;
0052e5 831f
0052e6 70fc
0052e7 06e6
0052e8 e060
0052e9 031c
0052ea 7080
0052eb 0006
0052ec 0660
0052ed 0000
0052ee 0006
0052ef 0060
0052f0 0000      	.db 0x1F,0x83,0xFC,0x70,0xE6,0x06,0x60,0xE0,0x1C,0x03,0x80,0x70,0x06,0x00,0x60,0x06,0x00,0x00,0x06,0x00,0x60,0x00,0x00,0x00	; ?
0052f1 c31f
0052f2 30fe
0052f3 7b66
0052f4 b66f
0052f5 6ddb
0052f6 dbb6
0052f7 b66d
0052f8 67fe
0052f9 00c7
0052fa c03f
0052fb 00fc
0052fc 0000      	.db 0x1F,0xC3,0xFE,0x30,0x66,0x7B,0x6F,0xB6,0xDB,0x6D,0xB6,0xDB,0x6D,0xB6,0xFE,0x67,0xC7,0x00,0x3F,0xC0,0xFC,0x00,0x00,0x00	; @
                 
0052fd 0006
0052fe 0f60
0052ff f000
005300 010f
005301 1998
005302 9881
005303 c330
005304 3ffc
005305 06c6
005306 6660
005307 0006
005308 0000      	.db 0x06,0x00,0x60,0x0F,0x00,0xF0,0x0F,0x01,0x98,0x19,0x81,0x98,0x30,0xC3,0xFC,0x3F,0xC6,0x06,0x60,0x66,0x06,0x00,0x00,0x00	; A
005309 077f
00530a 61f8
00530b 0cc6
00530c c660
00530d 7f1c
00530e fc87
00530f e660
005310 6006
005311 0e66
005312 c77f
005313 00f8
005314 0000      	.db 0x7F,0x07,0xF8,0x61,0xC6,0x0C,0x60,0xC6,0x1C,0x7F,0x87,0xFC,0x60,0xE6,0x06,0x60,0x66,0x0E,0x7F,0xC7,0xF8,0x00,0x00,0x00	; B
005315 810f
005316 38fc
005317 06e3
005318 0660
005319 6000
00531a 0006
00531b 0660
00531c 3000
00531d 8e63
00531e c01f
00531f 00f8
005320 0000      	.db 0x0F,0x81,0xFC,0x38,0xE3,0x06,0x60,0x06,0x00,0x60,0x06,0x00,0x60,0x06,0x00,0x30,0x63,0x8E,0x1F,0xC0,0xF8,0x00,0x00,0x00	; C
005321 077f
005322 61f8
005323 0cc6
005324 6660
005325 6006
005326 0666
005327 6660
005328 6006
005329 1cc6
00532a 877f
00532b 00f0
00532c 0000      	.db 0x7F,0x07,0xF8,0x61,0xC6,0x0C,0x60,0x66,0x06,0x60,0x66,0x06,0x60,0x66,0x06,0x60,0xC6,0x1C,0x7F,0x87,0xF0,0x00,0x00,0x00	; D
00532d e77f
00532e 60fe
00532f 0006
005330 0660
005331 7f00
005332 f887
005333 0660
005334 6000
005335 0006
005336 e77f
005337 00fe
005338 0000      	.db 0x7F,0xE7,0xFE,0x60,0x06,0x00,0x60,0x06,0x00,0x7F,0x87,0xF8,0x60,0x06,0x00,0x60,0x06,0x00,0x7F,0xE7,0xFE,0x00,0x00,0x00	; E
005339 e77f
00533a 60fe
00533b 0006
00533c 0660
00533d 7f00
00533e f887
00533f 0660
005340 6000
005341 0006
005342 0660
005343 0000
005344 0000      	.db 0x7F,0xE7,0xFE,0x60,0x06,0x00,0x60,0x06,0x00,0x7F,0x87,0xF8,0x60,0x06,0x00,0x60,0x06,0x00,0x60,0x06,0x00,0x00,0x00,0x00	; F
005345 c10f
005346 38fe
005347 0063
005348 0660
005349 6300
00534a 3ee6
00534b 6660
00534c 3006
00534d 8663
00534e e01f
00534f 00fe
005350 0000      	.db 0x0F,0xC1,0xFE,0x38,0x63,0x00,0x60,0x06,0x00,0x63,0xE6,0x3E,0x60,0x66,0x06,0x30,0x63,0x86,0x1F,0xE0,0xFE,0x00,0x00,0x00	; G
005351 6660
005352 6006
005353 0666
005354 6660
005355 7f06
005356 fee7
005357 6660
005358 6006
005359 0666
00535a 6660
00535b 0006
00535c 0000      	.db 0x60,0x66,0x06,0x60,0x66,0x06,0x60,0x66,0x06,0x7F,0xE7,0xFE,0x60,0x66,0x06,0x60,0x66,0x06,0x60,0x66,0x06,0x00,0x00,0x00	; H
00535d 811f
00535e 06f8
00535f 6000
005360 0006
005361 0660
005362 6000
005363 0006
005364 0660
005365 6000
005366 811f
005367 00f8
005368 0000      	.db 0x1F,0x81,0xF8,0x06,0x00,0x60,0x06,0x00,0x60,0x06,0x00,0x60,0x06,0x00,0x60,0x06,0x00,0x60,0x1F,0x81,0xF8,0x00,0x00,0x00	; I
005369 6000
00536a 0006
00536b 0660
00536c 6000
00536d 0006
00536e 0660
00536f 6600
005370 6006
005371 0c67
005372 c13f
005373 00f8
005374 0000      	.db 0x00,0x60,0x06,0x00,0x60,0x06,0x00,0x60,0x06,0x00,0x60,0x06,0x00,0x66,0x06,0x60,0x67,0x0C,0x3F,0xC1,0xF8,0x00,0x00,0x00	; J
005375 6660
005376 610e
005377 38c6
005378 0667
005379 7ce0
00537a c007
00537b 066e
00537c 6370
00537d 1c86
00537e e660
00537f 0006
005380 0000      	.db 0x60,0x66,0x0E,0x61,0xC6,0x38,0x67,0x06,0xE0,0x7C,0x07,0xC0,0x6E,0x06,0x70,0x63,0x86,0x1C,0x60,0xE6,0x06,0x00,0x00,0x00	; K
005381 0660
005382 6000
005383 0006
005384 0660
005385 6000
005386 0006
005387 0660
005388 6000
005389 0006
00538a e77f
00538b 00fe
00538c 0000      	.db 0x60,0x06,0x00,0x60,0x06,0x00,0x60,0x06,0x00,0x60,0x06,0x00,0x60,0x06,0x00,0x60,0x06,0x00,0x7F,0xE7,0xFE,0x00,0x00,0x00	; L
00538d 6760
00538e 700e
00538f 9ee7
005390 e679
005391 6ff6
005392 6666
005393 6666
005394 6006
005395 0666
005396 6660
005397 0006
005398 0000      	.db 0x60,0x67,0x0E,0x70,0xE7,0x9E,0x79,0xE6,0xF6,0x6F,0x66,0x66,0x66,0x66,0x06,0x60,0x66,0x06,0x60,0x66,0x06,0x00,0x00,0x00	; M
005399 6760
00539a 7006
00539b 8667
00539c 666c
00539d 66c6
00539e 6666
00539f 6663
0053a0 6136
0053a1 0ee6
0053a2 e660
0053a3 0006
0053a4 0000      	.db 0x60,0x67,0x06,0x70,0x67,0x86,0x6C,0x66,0xC6,0x66,0x66,0x66,0x63,0x66,0x36,0x61,0xE6,0x0E,0x60,0xE6,0x06,0x00,0x00,0x00	; N
0053a5 010f
0053a6 39f8
0053a7 0cc3
0053a8 6660
0053a9 6006
0053aa 0666
0053ab 6660
0053ac 3006
0053ad 9cc3
0053ae 801f
0053af 00f0
0053b0 0000      	.db 0x0F,0x01,0xF8,0x39,0xC3,0x0C,0x60,0x66,0x06,0x60,0x66,0x06,0x60,0x66,0x06,0x30,0xC3,0x9C,0x1F,0x80,0xF0,0x00,0x00,0x00	; O
0053b1 877f
0053b2 60fc
0053b3 06e6
0053b4 6660
0053b5 6006
0053b6 fce7
0053b7 867f
0053b8 6000
0053b9 0006
0053ba 0660
0053bb 0000
0053bc 0000      	.db 0x7F,0x87,0xFC,0x60,0xE6,0x06,0x60,0x66,0x06,0x60,0xE7,0xFC,0x7F,0x86,0x00,0x60,0x06,0x00,0x60,0x06,0x00,0x00,0x00,0x00	; P
0053bd 010f
0053be 39f8
0053bf 0cc3
0053c0 6660
0053c1 6006
0053c2 0666
0053c3 6660
0053c4 3336
0053c5 9cc3
0053c6 e01f
0053c7 00f6
0053c8 0000      	.db 0x0F,0x01,0xF8,0x39,0xC3,0x0C,0x60,0x66,0x06,0x60,0x66,0x06,0x60,0x66,0x36,0x33,0xC3,0x9C,0x1F,0xE0,0xF6,0x00,0x00,0x00	; Q
0053c9 877f
0053ca 60fc
0053cb 06e6
0053cc 6660
0053cd 6006
0053ce fce7
0053cf 867f
0053d0 6370
0053d1 1c86
0053d2 e660
0053d3 0006
0053d4 0000      	.db 0x7F,0x87,0xFC,0x60,0xE6,0x06,0x60,0x66,0x06,0x60,0xE7,0xFC,0x7F,0x86,0x70,0x63,0x86,0x1C,0x60,0xE6,0x06,0x00,0x00,0x00	; R
0053d5 831f
0053d6 70fc
0053d7 06e6
0053d8 0760
0053d9 3f00
0053da fc81
0053db e000
0053dc 6006
0053dd 0e67
0053de c13f
0053df 00f8
0053e0 0000      	.db 0x1F,0x83,0xFC,0x70,0xE6,0x06,0x60,0x07,0x00,0x3F,0x81,0xFC,0x00,0xE0,0x06,0x60,0x67,0x0E,0x3F,0xC1,0xF8,0x00,0x00,0x00	; S
0053e1 c33f
0053e2 06fc
0053e3 6000
0053e4 0006
0053e5 0660
0053e6 6000
0053e7 0006
0053e8 0660
0053e9 6000
0053ea 0006
0053eb 0060
0053ec 0000      	.db 0x3F,0xC3,0xFC,0x06,0x00,0x60,0x06,0x00,0x60,0x06,0x00,0x60,0x06,0x00,0x60,0x06,0x00,0x60,0x06,0x00,0x60,0x00,0x00,0x00	; T
0053ed 6660
0053ee 6006
0053ef 0666
0053f0 6660
0053f1 6006
0053f2 0666
0053f3 6660
0053f4 6006
0053f5 0c63
0053f6 c13f
0053f7 00f8
0053f8 0000      	.db 0x60,0x66,0x06,0x60,0x66,0x06,0x60,0x66,0x06,0x60,0x66,0x06,0x60,0x66,0x06,0x60,0x63,0x0C,0x3F,0xC1,0xF8,0x00,0x00,0x00	; U
0053f9 6660
0053fa 6006
0053fb 0c63
0053fc c330
0053fd 190c
0053fe 9881
0053ff 8019
005400 0ff0
005401 f000
005402 0006
005403 0060
005404 0000      	.db 0x60,0x66,0x06,0x60,0x63,0x0C,0x30,0xC3,0x0C,0x19,0x81,0x98,0x19,0x80,0xF0,0x0F,0x00,0xF0,0x06,0x00,0x60,0x00,0x00,0x00	; V
005405 6660
005406 6006
005407 0666
005408 6660
005409 6006
00540a 6666
00540b 6666
00540c 79f6
00540d 0ee7
00540e e670
00540f 0006
005410 0000      	.db 0x60,0x66,0x06,0x60,0x66,0x06,0x60,0x66,0x06,0x60,0x66,0x66,0x66,0x66,0xF6,0x79,0xE7,0x0E,0x70,0xE6,0x06,0x00,0x00,0x00	; W
005411 6660
005412 3006
005413 0cc3
005414 8019
005415 06f0
005416 6000
005417 010f
005418 3098
005419 0cc3
00541a 6660
00541b 0006
00541c 0000      	.db 0x60,0x66,0x06,0x30,0xC3,0x0C,0x19,0x80,0xF0,0x06,0x00,0x60,0x0F,0x01,0x98,0x30,0xC3,0x0C,0x60,0x66,0x06,0x00,0x00,0x00	; X
00541d 6660
00541e 3006
00541f 0cc3
005420 8119
005421 0f98
005422 f000
005423 0006
005424 0660
005425 6000
005426 0006
005427 0060
005428 0000      	.db 0x60,0x66,0x06,0x30,0xC3,0x0C,0x19,0x81,0x98,0x0F,0x00,0xF0,0x06,0x00,0x60,0x06,0x00,0x60,0x06,0x00,0x60,0x00,0x00,0x00	; Y
005429 e77f
00542a 00fe
00542b 0cc0
00542c 8001
00542d 0630
00542e 6000
00542f 010c
005430 3080
005431 0003
005432 e77f
005433 00fe
005434 0000      	.db 0x7F,0xE7,0xFE,0x00,0xC0,0x0C,0x01,0x80,0x30,0x06,0x00,0x60,0x0C,0x01,0x80,0x30,0x03,0x00,0x7F,0xE7,0xFE,0x00,0x00,0x00	; Z
                 
005435 811f
005436 18f8
005437 8001
005438 0118
005439 1880
00543a 8001
00543b 0118
00543c 1880
00543d 8001
00543e 811f
00543f 00f8
005440 0000      	.db 0x1F,0x81,0xF8,0x18,0x01,0x80,0x18,0x01,0x80,0x18,0x01,0x80,0x18,0x01,0x80,0x18,0x01,0x80,0x1F,0x81,0xF8,0x00,0x00,0x00	; [
005441 0400
005442 6000
005443 0007
005444 0138
005445 0ec0
005446 7000
005447 8003
005448 001c
005449 07e0
00544a 3000
00544b 0000
00544c 0000      	.db 0x00,0x04,0x00,0x60,0x07,0x00,0x38,0x01,0xC0,0x0E,0x00,0x70,0x03,0x80,0x1C,0x00,0xE0,0x07,0x00,0x30,0x00,0x00,0x00,0x00	; \
00544d 811f
00544e 01f8
00544f 1880
005450 8001
005451 0118
005452 1880
005453 8001
005454 0118
005455 1880
005456 811f
005457 00f8
005458 0000      	.db 0x1F,0x81,0xF8,0x01,0x80,0x18,0x01,0x80,0x18,0x01,0x80,0x18,0x01,0x80,0x18,0x01,0x80,0x18,0x1F,0x81,0xF8,0x00,0x00,0x00	; ]
005459 0002
00545a 0f70
00545b dc81
00545c e738
00545d 6007
00545e 0030
00545f 0000
005460 0000
005461 0000
005462 0000
005463 0000
005464 0000      	.db 0x02,0x00,0x70,0x0F,0x81,0xDC,0x38,0xE7,0x07,0x60,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; ^
005465 0000
005466 0000
005467 0000
005468 0000
005469 0000
00546a 0000
00546b 0000
00546c 0000
00546d 0000
00546e 0000
00546f 7f00
005470 fff7      	.db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF7,0xFF	; _
005471 0000
005472 0770
005473 7000
005474 0006
005475 0360
005476 0000
005477 0000
005478 0000
005479 0000
00547a 0000
00547b 0000
00547c 0000      	.db 0x00,0x00,0x70,0x07,0x00,0x70,0x06,0x00,0x60,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; `
                 
00547d 0000
00547e 0000
00547f 0000
005480 0100
005481 3ffc
005482 06e0
005483 e31f
005484 60fe
005485 0666
005486 e37f
005487 00fe
005488 0000      	.db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xFC,0x3F,0xE0,0x06,0x1F,0xE3,0xFE,0x60,0x66,0x06,0x7F,0xE3,0xFE,0x00,0x00,0x00	; a
005489 0660
00548a 6000
00548b 0006
00548c 0660
00548d 7ff8
00548e 0ec7
00548f 6660
005490 6006
005491 0e66
005492 c77f
005493 00f8
005494 0000      	.db 0x60,0x06,0x00,0x60,0x06,0x00,0x60,0x06,0xF8,0x7F,0xC7,0x0E,0x60,0x66,0x06,0x60,0x66,0x0E,0x7F,0xC7,0xF8,0x00,0x00,0x00	; b
005495 0000
005496 0000
005497 0000
005498 0100
005499 3ff8
00549a 06c7
00549b 0660
00549c 6000
00549d 0607
00549e c13f
00549f 00f8
0054a0 0000      	.db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xF8,0x3F,0xC7,0x06,0x60,0x06,0x00,0x60,0x07,0x06,0x3F,0xC1,0xF8,0x00,0x00,0x00	; c
0054a1 6000
0054a2 0006
0054a3 0660
0054a4 6100
0054a5 3ff6
0054a6 1ee7
0054a7 6660
0054a8 6006
0054a9 0667
0054aa e13f
0054ab 00fe
0054ac 0000      	.db 0x00,0x60,0x06,0x00,0x60,0x06,0x00,0x61,0xF6,0x3F,0xE7,0x1E,0x60,0x66,0x06,0x60,0x67,0x06,0x3F,0xE1,0xFE,0x00,0x00,0x00	; d
0054ad 0000
0054ae 0000
0054af 0000
0054b0 0100
0054b1 3ff8
0054b2 06c7
0054b3 e77f
0054b4 60fc
0054b5 0007
0054b6 c13f
0054b7 00f8
0054b8 0000      	.db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xF8,0x3F,0xC7,0x06,0x7F,0xE7,0xFC,0x60,0x07,0x00,0x3F,0xC1,0xF8,0x00,0x00,0x00	; e
0054b9 8007
0054ba 1cf8
0054bb 8001
0054bc 0118
0054bd 7f80
0054be f007
0054bf 0118
0054c0 1880
0054c1 8001
0054c2 0118
0054c3 0080
0054c4 0000      	.db 0x07,0x80,0xF8,0x1C,0x01,0x80,0x18,0x01,0x80,0x7F,0x07,0xF0,0x18,0x01,0x80,0x18,0x01,0x80,0x18,0x01,0x80,0x00,0x00,0x00	; f
0054c5 0000
0054c6 0000
0054c7 0000
0054c8 0100
0054c9 3ffe
0054ca 06e7
0054cb 6760
0054cc 3f0e
0054cd f6e1
0054ce 6000
0054cf 3f0e
0054d0 f8c3      	.db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xFE,0x3F,0xE7,0x06,0x60,0x67,0x0E,0x3F,0xE1,0xF6,0x00,0x60,0x0E,0x3F,0xC3,0xF8	; g
0054d1 0660
0054d2 6000
0054d3 0006
0054d4 0660
0054d5 7ff0
0054d6 1c87
0054d7 c660
0054d8 600c
0054d9 0cc6
0054da c660
0054db 000c
0054dc 0000      	.db 0x60,0x06,0x00,0x60,0x06,0x00,0x60,0x06,0xF0,0x7F,0x87,0x1C,0x60,0xC6,0x0C,0x60,0xC6,0x0C,0x60,0xC6,0x0C,0x00,0x00,0x00	; h
0054dd 0000
0054de 0600
0054df 6000
0054e0 0000
0054e1 0ee0
0054e2 6000
0054e3 0006
0054e4 0660
0054e5 6000
0054e6 811f
0054e7 00f8
0054e8 0000      	.db 0x00,0x00,0x00,0x06,0x00,0x60,0x00,0x00,0xE0,0x0E,0x00,0x60,0x06,0x00,0x60,0x06,0x00,0x60,0x1F,0x81,0xF8,0x00,0x00,0x00	; i
0054e9 0000
0054ea 0100
0054eb 1880
0054ec 0000
0054ed 0338
0054ee 1880
0054ef 8001
0054f0 0118
0054f1 1880
0054f2 8101
0054f3 1f98
0054f4 f080      	.db 0x00,0x00,0x00,0x01,0x80,0x18,0x00,0x00,0x38,0x03,0x80,0x18,0x01,0x80,0x18,0x01,0x80,0x18,0x01,0x81,0x98,0x1F,0x80,0xF0	; j
0054f5 0330
0054f6 3000
0054f7 0003
0054f8 0330
0054f9 3318
0054fa 7083
0054fb 033e
0054fc 37e0
0054fd 3803
0054fe c331
0054ff 000c
005500 0000      	.db 0x30,0x03,0x00,0x30,0x03,0x00,0x30,0x03,0x18,0x33,0x83,0x70,0x3E,0x03,0xE0,0x37,0x03,0x38,0x31,0xC3,0x0C,0x00,0x00,0x00	; k
005501 000e
005502 06e0
005503 6000
005504 0006
005505 0660
005506 6000
005507 0006
005508 0660
005509 6000
00550a 811f
00550b 00f8
00550c 0000      	.db 0x0E,0x00,0xE0,0x06,0x00,0x60,0x06,0x00,0x60,0x06,0x00,0x60,0x06,0x00,0x60,0x06,0x00,0x60,0x1F,0x81,0xF8,0x00,0x00,0x00	; l
00550d 0000
00550e 0000
00550f 0000
005510 0500
005511 7f98
005512 fec7
005513 6666
005514 6666
005515 6666
005516 6666
005517 0066
005518 0000      	.db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x98,0x7F,0xC7,0xFE,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x00,0x00,0x00	; m
005519 0000
00551a 0000
00551b 0000
00551c 0300
00551d 3ff8
00551e 0ec3
00551f 6330
005520 3006
005521 0663
005522 6330
005523 0006
005524 0000      	.db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xF8,0x3F,0xC3,0x0E,0x30,0x63,0x06,0x30,0x63,0x06,0x30,0x63,0x06,0x00,0x00,0x00	; n
005525 0000
005526 0000
005527 0000
005528 0100
005529 3ff8
00552a 0ec7
00552b 6660
00552c 6006
00552d 0e67
00552e c13f
00552f 00f8
005530 0000      	.db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xF8,0x3F,0xC7,0x0E,0x60,0x66,0x06,0x60,0x67,0x0E,0x3F,0xC1,0xF8,0x00,0x00,0x00	; o
005531 0000
005532 0000
005533 0000
005534 0700
005535 7ff8
005536 0ec6
005537 6660
005538 7006
005539 fce7
00553a 866f
00553b 6000
00553c 0006      	.db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xF8,0x7F,0xC6,0x0E,0x60,0x66,0x06,0x70,0xE7,0xFC,0x6F,0x86,0x00,0x60,0x06,0x00	; p
00553d 0000
00553e 0000
00553f 0000
005540 0100
005541 3ffe
005542 06e7
005543 6660
005544 7006
005545 fee3
005546 601f
005547 0006
005548 0660      	.db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xFE,0x3F,0xE7,0x06,0x60,0x66,0x06,0x70,0xE3,0xFE,0x1F,0x60,0x06,0x00,0x60,0x06	; q
005549 0000
00554a 0000
00554b 0000
00554c 0300
00554d 3f7c
00554e 86e3
00554f 0330
005550 3000
005551 0003
005552 0330
005553 0000
005554 0000      	.db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x7C,0x3F,0xE3,0x86,0x30,0x03,0x00,0x30,0x03,0x00,0x30,0x03,0x00,0x00,0x00,0x00	; r
005555 0000
005556 0000
005557 0000
005558 0300
005559 7ff0
00555a 0086
00555b 037f
00555c 01f8
00555d 1880
00555e 837f
00555f 00f0
005560 0000      	.db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xF0,0x7F,0x86,0x00,0x7F,0x03,0xF8,0x01,0x80,0x18,0x7F,0x83,0xF0,0x00,0x00,0x00	; s
005561 0100
005562 1880
005563 8001
005564 0718
005565 7ff0
005566 8001
005567 0118
005568 1880
005569 8001
00556a 801f
00556b 00f8
00556c 0000      	.db 0x00,0x01,0x80,0x18,0x01,0x80,0x18,0x07,0xF0,0x7F,0x01,0x80,0x18,0x01,0x80,0x18,0x01,0x80,0x1F,0x80,0xF8,0x00,0x00,0x00	; t
00556d 0000
00556e 0000
00556f 0000
005570 0600
005571 6006
005572 0666
005573 6660
005574 6006
005575 0e67
005576 e13f
005577 00f6
005578 0000      	.db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x06,0x60,0x66,0x06,0x60,0x66,0x06,0x60,0x67,0x0E,0x3F,0xE1,0xF6,0x00,0x00,0x00	; u
005579 0000
00557a 0000
00557b 0000
00557c 0600
00557d 6006
00557e 0c63
00557f c130
005580 1998
005581 f080
005582 000f
005583 0060
005584 0000      	.db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x06,0x60,0x63,0x0C,0x30,0xC1,0x98,0x19,0x80,0xF0,0x0F,0x00,0x60,0x00,0x00,0x00	; v
005585 0000
005586 0000
005587 0000
005588 0600
005589 6666
00558a 6666
00558b 6666
00558c 6f66
00558d fc63
00558e c139
00558f 0008
005590 0000      	.db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x6F,0x63,0xFC,0x39,0xC1,0x08,0x00,0x00,0x00	; w
005591 0000
005592 0000
005593 0000
005594 0600
005595 710c
005596 b8c3
005597 001f
005598 1fe0
005599 b803
00559a c671
00559b 000c
00559c 0000      	.db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x0C,0x71,0xC3,0xB8,0x1F,0x00,0xE0,0x1F,0x03,0xB8,0x71,0xC6,0x0C,0x00,0x00,0x00	; x
00559d 0000
00559e 0000
00559f 0000
0055a0 0300
0055a1 300c
0055a2 98c1
0055a3 8019
0055a4 0ff0
0055a5 6000
0055a6 0006
0055a7 0cc0
0055a8 8001      	.db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x0C,0x30,0xC1,0x98,0x19,0x80,0xF0,0x0F,0x00,0x60,0x06,0x00,0xC0,0x0C,0x01,0x80	; y
0055a9 0000
0055aa 0000
0055ab 0000
0055ac 0700
0055ad 7ffc
0055ae 3080
0055af 0006
0055b0 18c0
0055b1 0003
0055b2 c77f
0055b3 00fc
0055b4 0000      	.db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFC,0x7F,0x80,0x30,0x06,0x00,0xC0,0x18,0x03,0x00,0x7F,0xC7,0xFC,0x00,0x00,0x00	; z
                 
0055b5 c003
0055b6 0e7c
0055b7 c000
0055b8 000c
0055b9 1cc0
0055ba 8003
0055bb 001c
0055bc 0cc0
0055bd c000
0055be 000e
0055bf 037c
0055c0 00c0      	.db 0x03,0xC0,0x7C,0x0E,0x00,0xC0,0x0C,0x00,0xC0,0x1C,0x03,0x80,0x1C,0x00,0xC0,0x0C,0x00,0xC0,0x0E,0x00,0x7C,0x03,0xC0,0x00	; {
0055c1 0006
0055c2 0660
0055c3 6000
0055c4 0006
0055c5 0660
0055c6 6000
0055c7 0006
0055c8 0660
0055c9 6000
0055ca 0006
0055cb 0060
0055cc 0000      	.db 0x06,0x00,0x60,0x06,0x00,0x60,0x06,0x00,0x60,0x06,0x00,0x60,0x06,0x00,0x60,0x06,0x00,0x60,0x06,0x00,0x60,0x00,0x00,0x00	; |
0055cd 033c
0055ce 07e0
0055cf 3000
0055d0 0003
0055d1 0330
0055d2 1c80
0055d3 8003
0055d4 0330
0055d5 3000
0055d6 0307
0055d7 3ce0
0055d8 0000      	.db 0x3C,0x03,0xE0,0x07,0x00,0x30,0x03,0x00,0x30,0x03,0x80,0x1C,0x03,0x80,0x30,0x03,0x00,0x30,0x07,0x03,0xE0,0x3C,0x00,0x00	; }
0055d9 0000
0055da 1c00
0055db 6c63
0055dc 8063
0055dd 0000
0055de 0000
0055df 0000
0055e0 0000
0055e1 0000
0055e2 0000
0055e3 0000
0055e4 0000      	.db 0x00,0x00,0x00,0x1C,0x63,0x6C,0x63,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; ~
0055e5 0000
0055e6 0000
0055e7 0000
0055e8 0006
0055e9 19f0
0055ea 0c83
0055eb 6660
0055ec 7f06
0055ed fee7
0055ee 0000
0055ef 0000
0055f0 0000      	.db 0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0xF0,0x19,0x83,0x0C,0x60,0x66,0x06,0x7F,0xE7,0xFE,0x00,0x00,0x00,0x00,0x00,0x00	; 
                 
                 
                 symbols16x16:
                 .include "symbols16x16.asm"
                 
                 ;.db 0x80,0x00,0xC0,0x00,0xE0,0x00,0xF0,0x00,0xF8,0x00,0xF0,0x00,0xE0,0x00,0xC0,0x00	; Right arrow
                 ;.db 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                 
                 ;.db 0x08,0x00,0x18,0x00,0x38,0x00,0x78,0x00,0xF8,0x00,0x78,0x00,0x38,0x00,0x18,0x00	; Left arrow
                 ;.db 0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                 
0055f1 0008
0055f2 001c
0055f3 003e
0055f4 007f
0055f5 80ff
0055f6 0000
0055f7 0000
0055f8 0000      .db 0x08,0x00,0x1C,0x00,0x3E,0x00,0x7F,0x00,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00	; Up arrow
0055f9 0000
0055fa 0000
0055fb 0000
0055fc 0000
0055fd 0000
0055fe 0000
0055ff 0000
005600 0000      .db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                 
005601 80ff
005602 007f
005603 003e
005604 001c
005605 0008
005606 0000
005607 0000
005608 0000      .db 0xFF,0x80,0x7F,0x00,0x3E,0x00,0x1C,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; Down arrow
005609 0000
00560a 0000
00560b 0000
00560c 0000
00560d 0000
00560e 0000
00560f 0000
005610 0000      .db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                 
005611 0040
005612 00f8
005613 0040
005614 001c
005615 007f
005616 007f
005617 80ff
005618 80ff      .db 0x40,0x00,0xF8,0x00,0x40,0x00,0x1C,0x00,0x7F,0x00,0x7F,0x00,0xFF,0x80,0xFF,0x80	; CCW rotation
005619 80ff
00561a 007f
00561b 007f
00561c 001c
00561d 0000
00561e 0000
00561f 0000
005620 0000      .db 0xFF,0x80,0x7F,0x00,0x7F,0x00,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                 
005621 0001
005622 800f
005623 0001
005624 001c
005625 007f
005626 007f
005627 80ff
005628 80ff      .db 0x01,0x00,0x0F,0x80,0x01,0x00,0x1C,0x00,0x7F,0x00,0x7F,0x00,0xFF,0x80,0xFF,0x80	; CW rotation
005629 80ff
00562a 007f
00562b 007f
00562c 001c
00562d 0000
00562e 0000
00562f 0000
005630 0000      .db 0xFF,0x80,0x7F,0x00,0x7F,0x00,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                 
005631 0000
005632 3800
005633 4400
005634 4430
005635 feff
005636 7efc
005637 3ef8
005638 1ef0      .db 0x00,0x00,0x00,0x38,0x00,0x44,0x30,0x44,0xFF,0xFE,0xFC,0x7E,0xF8,0x3E,0xF0,0x1E	; Camera
005639 1ef0
00563a 1ef0
00563b 3ef8
00563c 7efc
00563d feff
00563e 0000
00563f 0000
005640 0000      .db 0xF0,0x1E,0xF0,0x1E,0xF8,0x3E,0xFC,0x7E,0xFF,0xFE,0x00,0x00,0x00,0x00,0x00,0x00
                 
                 ;.db 0x38,0x00,0x7C,0x00,0xFE,0x00,0xFE,0x00,0xFE,0x00,0x7C,0x00,0x38,0x00,0x00,0x00	; Black ball
                 ;.db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                 
005641 0001
005642 8003
005643 c006
005644 600d
005645 b01a
005646 5835
005647 ac6a
005648 7efd      .db 0x01,0x00,0x03,0x80,0x06,0xC0,0x0D,0x60,0x1A,0xB0,0x35,0x58,0x6A,0xAC,0xFD,0x7E	; Grey arrow up
005649 a00a
00564a 600d
00564b a00a
00564c 600d
00564d a00a
00564e 600d
00564f e00f
005650 0000      .db 0x0A,0xA0,0x0D,0x60,0x0A,0xA0,0x0D,0x60,0x0A,0xA0,0x0D,0x60,0x0F,0xE0,0x00,0x00
                 
005651 0001
005652 0003
005653 0007
005654 000d
005655 fe1b
005656 5635
005657 aa6a
005658 56d5      .db 0x01,0x00,0x03,0x00,0x07,0x00,0x0D,0x00,0x1B,0xFE,0x35,0x56,0x6A,0xAA,0xD5,0x56	; Grey arrow left
005659 aa6a
00565a 5635
00565b fe1b
00565c 000d
00565d 0007
00565e 0003
00565f 0001
005660 0000      .db 0x6A,0xAA,0x35,0x56,0x1B,0xFE,0x0D,0x00,0x07,0x00,0x03,0x00,0x01,0x00,0x00,0x00
                 
005661 e00f
005662 600d
005663 a00a
005664 600d
005665 a00a
005666 600d
005667 a00a
005668 7efd      .db 0x0F,0xE0,0x0D,0x60,0x0A,0xA0,0x0D,0x60,0x0A,0xA0,0x0D,0x60,0x0A,0xA0,0xFD,0x7E	; Grey arrow down
005669 ac6a
00566a 5835
00566b b01a
00566c 600d
00566d c006
00566e 8003
00566f 0001
005670 0000      .db 0x6A,0xAC,0x35,0x58,0x1A,0xB0,0x0D,0x60,0x06,0xC0,0x03,0x80,0x01,0x00,0x00,0x00
                 
005671 8000
005672 c000
005673 e000
005674 b000
005675 d87f
005676 ac6a
005677 5655
005678 ab6a      .db 0x00,0x80,0x00,0xC0,0x00,0xE0,0x00,0xB0,0x7F,0xD8,0x6A,0xAC,0x55,0x56,0x6A,0xAB	; Grey arrow right
005679 5655
00567a ac6a
00567b d87f
00567c b000
00567d e000
00567e c000
00567f 8000
005680 0000      .db 0x55,0x56,0x6A,0xAC,0x7F,0xD8,0x00,0xB0,0x00,0xE0,0x00,0xC0,0x00,0x80,0x00,0x00
                 font4x6:
                 .include "font4x6.asm"
                 
                 /*
                 	.db 0x00,0x00,0x00,0x00	;  
                 	.db 0x22,0x20,0x20,0x00	; !
                 	.db 0x55,0x00,0x00,0x00	; &quot;
                 	.db 0x57,0x57,0x50,0x00	; #
                 	.db 0x23,0x63,0x62,0x00	; $
                 	.db 0x41,0x24,0x10,0x00	; %
                 	.db 0x25,0x35,0x70,0x00	; &amp;
                 	.db 0x64,0x00,0x00,0x00	; '
                 	.db 0x24,0x44,0x20,0x00	; (
                 	.db 0x42,0x22,0x40,0x00	; )
                 	.db 0x52,0x72,0x50,0x00	; *
                 	.db 0x02,0x72,0x00,0x00	; +
                 	.db 0x00,0x00,0x64,0x00	; ,
                 	.db 0x00,0x70,0x00,0x00	; -
                 	.db 0x00,0x00,0x20,0x00	; .
                 	.db 0x11,0x24,0x40,0x00	; /
                 	.db 0x35,0x55,0x60,0x00	; 0
                 */
005681 2226
005682 0070      	.db 0x26,0x22,0x70,0x00	; 1
005683 2461
005684 0070      	.db 0x61,0x24,0x70,0x00	; 2
005685 2161
005686 0060      	.db 0x61,0x21,0x60,0x00	; 3
005687 7115
005688 0010      	.db 0x15,0x71,0x10,0x00	; 4
005689 6174
00568a 0060      	.db 0x74,0x61,0x60,0x00	; 5
00568b 6524
00568c 0020      	.db 0x24,0x65,0x20,0x00	; 6
00568d 3271
00568e 0020      	.db 0x71,0x32,0x20,0x00	; 7
00568f 2525
005690 0020      	.db 0x25,0x25,0x20,0x00	; 8
                 /*
                 	.db 0x25,0x31,0x20,0x00	; 9
                 	.db 0x00,0x20,0x20,0x00	; :
                 	.db 0x00,0x20,0x64,0x00	; ;
                 	.db 0x12,0x42,0x10,0x00	; &lt;
                 	.db 0x00,0x70,0x70,0x00	; =
                 	.db 0x42,0x12,0x40,0x00	; &gt;
                 	.db 0x61,0x20,0x20,0x00	; ?
                 	.db 0x75,0x54,0x70,0x00	; @
                 	.db 0x25,0x75,0x50,0x00	; A
                 	.db 0x65,0x65,0x60,0x00	; B
                 	.db 0x34,0x44,0x30,0x00	; C
                 	.db 0x65,0x55,0x60,0x00	; D
                 	.db 0x74,0x64,0x70,0x00	; E
                 	.db 0x74,0x64,0x40,0x00	; F
                 	.db 0x34,0x55,0x30,0x00	; G
                 	.db 0x55,0x75,0x50,0x00	; H
                 	.db 0x72,0x22,0x70,0x00	; I
                 	.db 0x11,0x15,0x20,0x00	; J
                 	.db 0x55,0x65,0x50,0x00	; K
                 	.db 0x44,0x44,0x70,0x00	; L
                 	.db 0x57,0x75,0x50,0x00	; M
                 	.db 0x57,0x55,0x50,0x00	; N
                 	.db 0x25,0x55,0x20,0x00	; O
                 	.db 0x65,0x64,0x40,0x00	; P
                 	.db 0x25,0x57,0x30,0x00	; Q
                 	.db 0x65,0x65,0x50,0x00	; R
                 	.db 0x34,0x71,0x60,0x00	; S
                 	.db 0x72,0x22,0x20,0x00	; T
                 	.db 0x55,0x55,0x70,0x00	; U
                 	.db 0x55,0x55,0x20,0x00	; V
                 	.db 0x55,0x77,0x50,0x00	; W
                 	.db 0x55,0x25,0x50,0x00	; X
                 	.db 0x55,0x22,0x20,0x00	; Y
                 	.db 0x71,0x24,0x70,0x00	; Z
                 	.db 0x64,0x44,0x60,0x00	; [
                 	.db 0x44,0x21,0x10,0x00	; \
                 	.db 0x62,0x22,0x60,0x00	; ]
                 	.db 0x25,0x00,0x00,0x00	; ^
                 	.db 0x00,0x00,0x0F,0x00	; _
                 	.db 0x62,0x00,0x00,0x00	; `
                 	.db 0x00,0x35,0x70,0x00	; a
                 	.db 0x44,0x65,0x60,0x00	; b
                 	.db 0x00,0x34,0x30,0x00	; c
                 	.db 0x11,0x35,0x30,0x00	; d
                 	.db 0x00,0x76,0x30,0x00	; e
                 	.db 0x12,0x72,0x20,0x00	; f
                 	.db 0x00,0x75,0x17,0x00	; g
                 	.db 0x44,0x65,0x50,0x00	; h
                 	.db 0x20,0x22,0x20,0x00	; i
                 	.db 0x20,0x22,0x26,0x00	; j
                 	.db 0x44,0x56,0x50,0x00	; k
                 	.db 0x22,0x22,0x20,0x00	; l
                 	.db 0x00,0x77,0x50,0x00	; m
                 	.db 0x00,0x65,0x50,0x00	; n
                 	.db 0x00,0x25,0x20,0x00	; o
                 	.db 0x00,0x65,0x64,0x00	; p
                 	.db 0x00,0x35,0x31,0x00	; q
                 	.db 0x00,0x64,0x40,0x00	; r
                 	.db 0x00,0x32,0x60,0x00	; s
                 	.db 0x02,0x72,0x30,0x00	; t
                 	.db 0x00,0x55,0x70,0x00	; u
                 	.db 0x00,0x55,0x20,0x00	; v
                 	.db 0x00,0x57,0x70,0x00	; w
                 	.db 0x00,0x52,0x50,0x00	; x
                 	.db 0x00,0x55,0x24,0x00	; y
                 	.db 0x00,0x62,0x30,0x00	; z
                 	.db 0x32,0x62,0x30,0x00	; {
                 	.db 0x22,0x22,0x20,0x00	; |
                 	.db 0x62,0x32,0x60,0x00	; }
                 	.db 0x5A,0x00,0x00,0x00	; ~
                 	.db 0x02,0x57,0x00,0x00	; 
                 */
                 
                 
                 
                 .include "callwrappers.asm"
                 
                 
                 .include "bindwrappers.asm"
                 
                 ; Details on the calling convention and rules: http://www.atmel.com/images/doc42055.pdf 
                 
                 #ifndef BIND_WRAPPERS_ASM
                 #endif
                 
                 #ifdef STANDALONE_GIMBAL_CONTROLLER
                 #endif
                 
                 esc_calibration_warning:
005691 0000        nop
                 EscCalWarning:
005692 920f
005693 921f
005694 922f
005695 923f
005696 924f
005697 925f
005698 926f
005699 927f
00569a 928f
00569b 929f
00569c 92af
00569d 92bf
00569e 92cf
00569f 92df
0056a0 92ef
0056a1 92ff
0056a2 930f
0056a3 931f
0056a4 93cf
0056a5 93df
0056a6 932f
0056a7 933f
0056a8 934f
0056a9 935f
0056aa 936f
0056ab 937f
0056ac 938f
0056ad 939f
0056ae 93af
0056af 93bf
0056b0 93ef
0056b1 93ff
0056b2 2411
0056b3 940e 5691
0056b5 91ff
0056b6 91ef
0056b7 91bf
0056b8 91af
0056b9 919f
0056ba 918f
0056bb 917f
0056bc 916f
0056bd 915f
0056be 914f
0056bf 913f
0056c0 912f
0056c1 91df
0056c2 91cf
0056c3 911f
0056c4 910f
0056c5 90ff
0056c6 90ef
0056c7 90df
0056c8 90cf
0056c9 90bf
0056ca 90af
0056cb 909f
0056cc 908f
0056cd 907f
0056ce 906f
0056cf 905f
0056d0 904f
0056d1 903f
0056d2 902f
0056d3 901f
0056d4 900f        safe_call_c esc_calibration_warning;
0056d5 9508        ret
                 
                 show_confirmation_dlg:
0056d6 0000        nop
                 
                 ShowConfirmationDlg:
0056d7 920f
0056d8 921f
0056d9 922f
0056da 923f
0056db 924f
0056dc 925f
0056dd 926f
0056de 927f
0056df 928f
0056e0 929f
0056e1 92af
0056e2 92bf
0056e3 92cf
0056e4 92df
0056e5 92ef
0056e6 92ff
0056e7 930f
0056e8 931f
0056e9 932f
0056ea 933f
0056eb 934f
0056ec 935f
0056ed 936f
0056ee 937f
0056ef 93af
0056f0 93bf
0056f1 93cf
0056f2 93df
0056f3 93ef
0056f4 93ff        push_for_call_return_value
0056f5 2411        clr r1 ;avr-gcc assumes r1 is always 0
0056f6 01cf        movw r24, r30
0056f7 940e 56d6   call show_confirmation_dlg
0056f9 91ff
0056fa 91ef
0056fb 91df
0056fc 91cf
0056fd 91bf
0056fe 91af
0056ff 917f
005700 916f
005701 915f
005702 914f
005703 913f
005704 912f
005705 911f
005706 910f
005707 90ff
005708 90ef
005709 90df
00570a 90cf
00570b 90bf
00570c 90af
00570d 909f
00570e 908f
00570f 907f
005710 906f
005711 905f
005712 904f
005713 903f
005714 902f
005715 901f
005716 900f        pop_for_call_return_value
005717 2f08        mov t, r24
005718 9508        ret
                 
                 SetDefaultLcdContrast:
005719 0000        nop
                 
                 show_version:
00571a 0000        nop
                 ShowVersion:
00571b 920f
00571c 921f
00571d 922f
00571e 923f
00571f 924f
005720 925f
005721 926f
005722 927f
005723 928f
005724 929f
005725 92af
005726 92bf
005727 92cf
005728 92df
005729 92ef
00572a 92ff
00572b 930f
00572c 931f
00572d 93cf
00572e 93df
00572f 932f
005730 933f
005731 934f
005732 935f
005733 936f
005734 937f
005735 938f
005736 939f
005737 93af
005738 93bf
005739 93ef
00573a 93ff
00573b 2411
00573c 940e 571a
00573e 91ff
00573f 91ef
005740 91bf
005741 91af
005742 919f
005743 918f
005744 917f
005745 916f
005746 915f
005747 914f
005748 913f
005749 912f
00574a 91df
00574b 91cf
00574c 911f
00574d 910f
00574e 90ff
00574f 90ef
005750 90df
005751 90cf
005752 90bf
005753 90af
005754 909f
005755 908f
005756 907f
005757 906f
005758 905f
005759 904f
00575a 903f
00575b 902f
00575c 901f
00575d 900f        safe_call_c show_version
00575e 9508        ret
                 
00575f 6843
005760 6e61
005761 656e
005762 206c
005763 614d
005764 7070
005765 6e69
005766 0067      adv2: .db "Channel Mapping", 0
005767 6553
005768 736e
005769 726f
00576a 5320
00576b 7465
00576c 6974
00576d 676e
00576e 0073      adv3: .db "Sensor Settings", 0
00576f 694d
005770 6578
005771 2072
005772 6445
005773 7469
005774 726f
005775 0000      adv4: .db "Mixer Editor", 0, 0
005776 6f42
005777 7261
005778 2064
005779 724f
00577a 6569
00577b 746e
00577c 7461
00577d 6f69
00577e 006e      adv5: .db "Board Orientation", 0
                 
00577f aebe
005780 aece
005781 aede
005782 aeec      _adv_options: .dw adv2*2, adv3*2, adv4*2, adv5*2
                 advanced_settings:
005783 0000        nop
                 AdvancedSettings:
005784 920f
005785 921f
005786 922f
005787 923f
005788 924f
005789 925f
00578a 926f
00578b 927f
00578c 928f
00578d 929f
00578e 92af
00578f 92bf
005790 92cf
005791 92df
005792 92ef
005793 92ff
005794 930f
005795 931f
005796 93cf
005797 93df
005798 932f
005799 933f
00579a 934f
00579b 935f
00579c 936f
00579d 937f
00579e 938f
00579f 939f
0057a0 93af
0057a1 93bf
0057a2 93ef
0057a3 93ff
0057a4 2411
0057a5 940e 5783
0057a7 91ff
0057a8 91ef
0057a9 91bf
0057aa 91af
0057ab 919f
0057ac 918f
0057ad 917f
0057ae 916f
0057af 915f
0057b0 914f
0057b1 913f
0057b2 912f
0057b3 91df
0057b4 91cf
0057b5 911f
0057b6 910f
0057b7 90ff
0057b8 90ef
0057b9 90df
0057ba 90cf
0057bb 90bf
0057bc 90af
0057bd 909f
0057be 908f
0057bf 907f
0057c0 906f
0057c1 905f
0057c2 904f
0057c3 903f
0057c4 902f
0057c5 901f
0057c6 900f        safe_call_c advanced_settings
0057c7 9508        ret
                 
                 c_contrast:
0057c8 0000        nop
                 Contrast:
0057c9 920f
0057ca 921f
0057cb 922f
0057cc 923f
0057cd 924f
0057ce 925f
0057cf 926f
0057d0 927f
0057d1 928f
0057d2 929f
0057d3 92af
0057d4 92bf
0057d5 92cf
0057d6 92df
0057d7 92ef
0057d8 92ff
0057d9 930f
0057da 931f
0057db 93cf
0057dc 93df
0057dd 932f
0057de 933f
0057df 934f
0057e0 935f
0057e1 936f
0057e2 937f
0057e3 938f
0057e4 939f
0057e5 93af
0057e6 93bf
0057e7 93ef
0057e8 93ff
0057e9 2411
0057ea 940e 57c8
0057ec 91ff
0057ed 91ef
0057ee 91bf
0057ef 91af
0057f0 919f
0057f1 918f
0057f2 917f
0057f3 916f
0057f4 915f
0057f5 914f
0057f6 913f
0057f7 912f
0057f8 91df
0057f9 91cf
0057fa 911f
0057fb 910f
0057fc 90ff
0057fd 90ef
0057fe 90df
0057ff 90cf
005800 90bf
005801 90af
005802 909f
005803 908f
005804 907f
005805 906f
005806 905f
005807 904f
005808 903f
005809 902f
00580a 901f
00580b 900f        safe_call_c c_contrast
00580c 9508        ret
                 
00580d 6843
00580e 6365
00580f 206b
005810 6f4d
005811 6f74
005812 2072
005813 754f
005814 7074
005815 7475
005816 0073      ef2: .db "Check Motor Outputs", 0
                 #ifdef STANDALONE_GIMBAL_CONTROLLER
                 #endif
005817 6956
005818 7765
005819 5320
00581a 7265
00581b 6169
00581c 206c
00581d 5852
00581e 4420
00581f 7461
005820 0061      ef4: .db "View Serial RX Data", 0
                 
                 _extra_options: 
005821 b01a        .dw ef2*2
                 #ifdef STANDALONE_GIMBAL_CONTROLLER
                 #endif
005822 b02e        .dw ef4*2
                 
                 extra_features:
005823 0000        nop
                 ExtraFeatures:
005824 920f
005825 921f
005826 922f
005827 923f
005828 924f
005829 925f
00582a 926f
00582b 927f
00582c 928f
00582d 929f
00582e 92af
00582f 92bf
005830 92cf
005831 92df
005832 92ef
005833 92ff
005834 930f
005835 931f
005836 93cf
005837 93df
005838 932f
005839 933f
00583a 934f
00583b 935f
00583c 936f
00583d 937f
00583e 938f
00583f 939f
005840 93af
005841 93bf
005842 93ef
005843 93ff
005844 2411
005845 940e 5823
005847 91ff
005848 91ef
005849 91bf
00584a 91af
00584b 919f
00584c 918f
00584d 917f
00584e 916f
00584f 915f
005850 914f
005851 913f
005852 912f
005853 91df
005854 91cf
005855 911f
005856 910f
005857 90ff
005858 90ef
005859 90df
00585a 90cf
00585b 90bf
00585c 90af
00585d 909f
00585e 908f
00585f 907f
005860 906f
005861 905f
005862 904f
005863 903f
005864 902f
005865 901f
005866 900f        safe_call_c extra_features
005867 9508        ret
                 
                 mode_settings:
005868 0000        nop
                 ModeSettings:
005869 920f
00586a 921f
00586b 922f
00586c 923f
00586d 924f
00586e 925f
00586f 926f
005870 927f
005871 928f
005872 929f
005873 92af
005874 92bf
005875 92cf
005876 92df
005877 92ef
005878 92ff
005879 930f
00587a 931f
00587b 93cf
00587c 93df
00587d 932f
00587e 933f
00587f 934f
005880 935f
005881 936f
005882 937f
005883 938f
005884 939f
005885 93af
005886 93bf
005887 93ef
005888 93ff
005889 2411
00588a 940e 5868
00588c 91ff
00588d 91ef
00588e 91bf
00588f 91af
005890 919f
005891 918f
005892 917f
005893 916f
005894 915f
005895 914f
005896 913f
005897 912f
005898 91df
005899 91cf
00589a 911f
00589b 910f
00589c 90ff
00589d 90ef
00589e 90df
00589f 90cf
0058a0 90bf
0058a1 90af
0058a2 909f
0058a3 908f
0058a4 907f
0058a5 906f
0058a6 905f
0058a7 904f
0058a8 903f
0058a9 902f
0058aa 901f
0058ab 900f        safe_call_c mode_settings
0058ac 9508        ret
                 
                 sensor_settings:
0058ad 0000        nop
                 SensorSettings:
0058ae 920f
0058af 921f
0058b0 922f
0058b1 923f
0058b2 924f
0058b3 925f
0058b4 926f
0058b5 927f
0058b6 928f
0058b7 929f
0058b8 92af
0058b9 92bf
0058ba 92cf
0058bb 92df
0058bc 92ef
0058bd 92ff
0058be 930f
0058bf 931f
0058c0 93cf
0058c1 93df
0058c2 932f
0058c3 933f
0058c4 934f
0058c5 935f
0058c6 936f
0058c7 937f
0058c8 938f
0058c9 939f
0058ca 93af
0058cb 93bf
0058cc 93ef
0058cd 93ff
0058ce 2411
0058cf 940e 58ad
0058d1 91ff
0058d2 91ef
0058d3 91bf
0058d4 91af
0058d5 919f
0058d6 918f
0058d7 917f
0058d8 916f
0058d9 915f
0058da 914f
0058db 913f
0058dc 912f
0058dd 91df
0058de 91cf
0058df 911f
0058e0 910f
0058e1 90ff
0058e2 90ef
0058e3 90df
0058e4 90cf
0058e5 90bf
0058e6 90af
0058e7 909f
0058e8 908f
0058e9 907f
0058ea 906f
0058eb 905f
0058ec 904f
0058ed 903f
0058ee 902f
0058ef 901f
0058f0 900f        safe_call_c sensor_settings
0058f1 9508        ret
                 
                 selflevel_settings:
0058f2 0000        nop
                 SelflevelSettings:
0058f3 920f
0058f4 921f
0058f5 922f
0058f6 923f
0058f7 924f
0058f8 925f
0058f9 926f
0058fa 927f
0058fb 928f
0058fc 929f
0058fd 92af
0058fe 92bf
0058ff 92cf
005900 92df
005901 92ef
005902 92ff
005903 930f
005904 931f
005905 93cf
005906 93df
005907 932f
005908 933f
005909 934f
00590a 935f
00590b 936f
00590c 937f
00590d 938f
00590e 939f
00590f 93af
005910 93bf
005911 93ef
005912 93ff
005913 2411
005914 940e 58f2
005916 91ff
005917 91ef
005918 91bf
005919 91af
00591a 919f
00591b 918f
00591c 917f
00591d 916f
00591e 915f
00591f 914f
005920 913f
005921 912f
005922 91df
005923 91cf
005924 911f
005925 910f
005926 90ff
005927 90ef
005928 90df
005929 90cf
00592a 90bf
00592b 90af
00592c 909f
00592d 908f
00592e 907f
00592f 906f
005930 905f
005931 904f
005932 903f
005933 902f
005934 901f
005935 900f        safe_call_c selflevel_settings
005936 9508        ret
                 
                 stick_scaling:
005937 0000        nop
                 StickScaling:
005938 920f
005939 921f
00593a 922f
00593b 923f
00593c 924f
00593d 925f
00593e 926f
00593f 927f
005940 928f
005941 929f
005942 92af
005943 92bf
005944 92cf
005945 92df
005946 92ef
005947 92ff
005948 930f
005949 931f
00594a 93cf
00594b 93df
00594c 932f
00594d 933f
00594e 934f
00594f 935f
005950 936f
005951 937f
005952 938f
005953 939f
005954 93af
005955 93bf
005956 93ef
005957 93ff
005958 2411
005959 940e 5937
00595b 91ff
00595c 91ef
00595d 91bf
00595e 91af
00595f 919f
005960 918f
005961 917f
005962 916f
005963 915f
005964 914f
005965 913f
005966 912f
005967 91df
005968 91cf
005969 911f
00596a 910f
00596b 90ff
00596c 90ef
00596d 90df
00596e 90cf
00596f 90bf
005970 90af
005971 909f
005972 908f
005973 907f
005974 906f
005975 905f
005976 904f
005977 903f
005978 902f
005979 901f
00597a 900f        safe_call_c stick_scaling
00597b 9508        ret
                 
                 misc_settings:
00597c 0000        nop
                 MiscSettings:
00597d 920f
00597e 921f
00597f 922f
005980 923f
005981 924f
005982 925f
005983 926f
005984 927f
005985 928f
005986 929f
005987 92af
005988 92bf
005989 92cf
00598a 92df
00598b 92ef
00598c 92ff
00598d 930f
00598e 931f
00598f 93cf
005990 93df
005991 932f
005992 933f
005993 934f
005994 935f
005995 936f
005996 937f
005997 938f
005998 939f
005999 93af
00599a 93bf
00599b 93ef
00599c 93ff
00599d 2411
00599e 940e 597c
0059a0 91ff
0059a1 91ef
0059a2 91bf
0059a3 91af
0059a4 919f
0059a5 918f
0059a6 917f
0059a7 916f
0059a8 915f
0059a9 914f
0059aa 913f
0059ab 912f
0059ac 91df
0059ad 91cf
0059ae 911f
0059af 910f
0059b0 90ff
0059b1 90ef
0059b2 90df
0059b3 90cf
0059b4 90bf
0059b5 90af
0059b6 909f
0059b7 908f
0059b8 907f
0059b9 906f
0059ba 905f
0059bb 904f
0059bc 903f
0059bd 902f
0059be 901f
0059bf 900f        safe_call_c misc_settings
0059c0 9508        ret
                 
                 sbus_dg2settings:
0059c1 9508        ret
                 SBusDG2SwitchSetup:
0059c2 920f
0059c3 921f
0059c4 922f
0059c5 923f
0059c6 924f
0059c7 925f
0059c8 926f
0059c9 927f
0059ca 928f
0059cb 929f
0059cc 92af
0059cd 92bf
0059ce 92cf
0059cf 92df
0059d0 92ef
0059d1 92ff
0059d2 930f
0059d3 931f
0059d4 93cf
0059d5 93df
0059d6 932f
0059d7 933f
0059d8 934f
0059d9 935f
0059da 936f
0059db 937f
0059dc 938f
0059dd 939f
0059de 93af
0059df 93bf
0059e0 93ef
0059e1 93ff
0059e2 2411
0059e3 940e 59c1
0059e5 91ff
0059e6 91ef
0059e7 91bf
0059e8 91af
0059e9 919f
0059ea 918f
0059eb 917f
0059ec 916f
0059ed 915f
0059ee 914f
0059ef 913f
0059f0 912f
0059f1 91df
0059f2 91cf
0059f3 911f
0059f4 910f
0059f5 90ff
0059f6 90ef
0059f7 90df
0059f8 90cf
0059f9 90bf
0059fa 90af
0059fb 909f
0059fc 908f
0059fd 907f
0059fe 906f
0059ff 905f
005a00 904f
005a01 903f
005a02 902f
005a03 901f
005a04 900f        safe_call_c sbus_dg2settings
005a05 9508        ret
                 
                 show_layout:
005a06 9508        ret
                 MotorLayout:
005a07 920f
005a08 921f
005a09 922f
005a0a 923f
005a0b 924f
005a0c 925f
005a0d 926f
005a0e 927f
005a0f 928f
005a10 929f
005a11 92af
005a12 92bf
005a13 92cf
005a14 92df
005a15 92ef
005a16 92ff
005a17 930f
005a18 931f
005a19 93cf
005a1a 93df
005a1b 932f
005a1c 933f
005a1d 934f
005a1e 935f
005a1f 936f
005a20 937f
005a21 938f
005a22 939f
005a23 93af
005a24 93bf
005a25 93ef
005a26 93ff
005a27 2411
005a28 940e 5a06
005a2a 91ff
005a2b 91ef
005a2c 91bf
005a2d 91af
005a2e 919f
005a2f 918f
005a30 917f
005a31 916f
005a32 915f
005a33 914f
005a34 913f
005a35 912f
005a36 91df
005a37 91cf
005a38 911f
005a39 910f
005a3a 90ff
005a3b 90ef
005a3c 90df
005a3d 90cf
005a3e 90bf
005a3f 90af
005a40 909f
005a41 908f
005a42 907f
005a43 906f
005a44 905f
005a45 904f
005a46 903f
005a47 902f
005a48 901f
005a49 900f        safe_call_c show_layout
005a4a 9508        ret
                 
                 ; Used in rxmode screen
005a4b 7453
005a4c 6e61
005a4d 6164
005a4e 6472
005a4f 5220
005a50 0058      stdrx:	.db "Standard RX", 0
005a51 5043
005a52 4d50
005a53 2820
005a54 6b61
005a55 2e61
005a56 5020
005a57 4d50
005a58 0029      cppm:	.db "CPPM (aka. PPM)", 0
005a59 2e53
005a5a 7542
005a5b 0073      sbus:	.db "S.Bus", 0
005a5c 6153
005a5d 6574
005a5e 6c6c
005a5f 7469
005a60 2065
005a61 5344
005a62 324d
005a63 0000      dsm2:	.db "Satellite DSM2", 0, 0
005a64 6153
005a65 6574
005a66 6c6c
005a67 7469
005a68 2065
005a69 5344
005a6a 584d
005a6b 0000      dsmx:	.db "Satellite DSMX", 0, 0
                 
                 ; Used in version screen
005a6c b496
005a6d b4a2
005a6e b4b2
005a6f b4b8
005a70 b4c8      modes:	.dw stdrx*2, cppm*2, sbus*2, dsm2*2, dsmx*2
                 
                 select_rx_mode:
005a71 9508        ret
                 SelectRxMode:
005a72 920f
005a73 921f
005a74 922f
005a75 923f
005a76 924f
005a77 925f
005a78 926f
005a79 927f
005a7a 928f
005a7b 929f
005a7c 92af
005a7d 92bf
005a7e 92cf
005a7f 92df
005a80 92ef
005a81 92ff
005a82 930f
005a83 931f
005a84 93cf
005a85 93df
005a86 932f
005a87 933f
005a88 934f
005a89 935f
005a8a 936f
005a8b 937f
005a8c 938f
005a8d 939f
005a8e 93af
005a8f 93bf
005a90 93ef
005a91 93ff
005a92 2411
005a93 940e 5a71
005a95 91ff
005a96 91ef
005a97 91bf
005a98 91af
005a99 919f
005a9a 918f
005a9b 917f
005a9c 916f
005a9d 915f
005a9e 914f
005a9f 913f
005aa0 912f
005aa1 91df
005aa2 91cf
005aa3 911f
005aa4 910f
005aa5 90ff
005aa6 90ef
005aa7 90df
005aa8 90cf
005aa9 90bf
005aaa 90af
005aab 909f
005aac 908f
005aad 907f
005aae 906f
005aaf 905f
005ab0 904f
005ab1 903f
005ab2 902f
005ab3 901f
005ab4 900f        safe_call_c select_rx_mode
005ab5 9508        ret
                 
                 /* Initial Setup Screen 
                  * Could not make this work in C. Leave it here for now.
                 const char isp1[] PROGMEM = "INITIAL SETUP";
                 const char isp5[] PROGMEM = "Select RX Mode";
                 const char isp4[] PROGMEM = "Trim Battery Voltage";
                 const char isp3[] PROGMEM = "ACC Calibration";
                 const char isp2[] PROGMEM = "Load Motor Layout";
                 
                 const isp10[4] PROGMEM = {
                   isp2,
                   isp3,
                   isp4,
                   isp5
                 };
                 */
                 
005ab6 4e49
005ab7 5449
005ab8 4149
005ab9 204c
005aba 4553
005abb 5554
005abc 0050      isp1:  .db "INITIAL SETUP", 0
005abd 6f4c
005abe 6461
005abf 4d20
005ac0 746f
005ac1 726f
005ac2 4c20
005ac3 7961
005ac4 756f
005ac5 0074      isp2:  .db "Load Motor Layout", 0
005ac6 4341
005ac7 2043
005ac8 6143
005ac9 696c
005aca 7262
005acb 7461
005acc 6f69
005acd 006e      isp3:  .db "ACC Calibration", 0
005ace 7254
005acf 6d69
005ad0 4220
005ad1 7461
005ad2 6574
005ad3 7972
005ad4 5620
005ad5 6c6f
005ad6 6174
005ad7 6567
005ad8 0000      isp4:  .db "Trim Battery Voltage", 0, 0
005ad9 6553
005ada 656c
005adb 7463
005adc 5220
005add 2058
005ade 6f4d
005adf 6564
005ae0 0000      isp5:  .db "Select RX Mode", 0, 0
005ae1 b57a
005ae2 b58c
005ae3 b59c
005ae4 b5b2      isp10: .dw isp2*2, isp3*2, isp4*2, isp5*2
                 
                 initial_setup:
005ae5 0000        nop
                 InitialSetup:
005ae6 920f
005ae7 921f
005ae8 922f
005ae9 923f
005aea 924f
005aeb 925f
005aec 926f
005aed 927f
005aee 928f
005aef 929f
005af0 92af
005af1 92bf
005af2 92cf
005af3 92df
005af4 92ef
005af5 92ff
005af6 930f
005af7 931f
005af8 93cf
005af9 93df
005afa 932f
005afb 933f
005afc 934f
005afd 935f
005afe 936f
005aff 937f
005b00 938f
005b01 939f
005b02 93af
005b03 93bf
005b04 93ef
005b05 93ff
005b06 2411
005b07 940e 5ae5
005b09 91ff
005b0a 91ef
005b0b 91bf
005b0c 91af
005b0d 919f
005b0e 918f
005b0f 917f
005b10 916f
005b11 915f
005b12 914f
005b13 913f
005b14 912f
005b15 91df
005b16 91cf
005b17 911f
005b18 910f
005b19 90ff
005b1a 90ef
005b1b 90df
005b1c 90cf
005b1d 90bf
005b1e 90af
005b1f 909f
005b20 908f
005b21 907f
005b22 906f
005b23 905f
005b24 904f
005b25 903f
005b26 902f
005b27 901f
005b28 900f        safe_call_c initial_setup
005b29 9508        ret
                 
                 ; Interface to original Assembly Routines
                 asm_get_mpu_register:
005b2a 920f
005b2b 921f
005b2c 922f
005b2d 923f
005b2e 924f
005b2f 925f
005b30 926f
005b31 927f
005b32 928f
005b33 929f
005b34 92af
005b35 92bf
005b36 92cf
005b37 92df
005b38 92ef
005b39 92ff
005b3a 930f
005b3b 931f
005b3c 932f
005b3d 933f
005b3e 934f
005b3f 935f
005b40 936f
005b41 937f
005b42 93af
005b43 93bf
005b44 93cf
005b45 93df
005b46 93ef
005b47 93ff        push_for_call_return_value
005b48 2f08        mov t, r24
005b49 9300 0738   sts TWI_address, t
005b4b 940e 495e   call i2c_read_adr
005b4d 2799        clr r25
005b4e 2f80        mov r24, t
005b4f 91ff
005b50 91ef
005b51 91df
005b52 91cf
005b53 91bf
005b54 91af
005b55 917f
005b56 916f
005b57 915f
005b58 914f
005b59 913f
005b5a 912f
005b5b 911f
005b5c 910f
005b5d 90ff
005b5e 90ef
005b5f 90df
005b60 90cf
005b61 90bf
005b62 90af
005b63 909f
005b64 908f
005b65 907f
005b66 906f
005b67 905f
005b68 904f
005b69 903f
005b6a 902f
005b6b 901f
005b6c 900f        pop_for_call_return_value
005b6d 9508        ret
                 
                 asm_setup_mpu6050:
005b6e 922f
005b6f 923f
005b70 924f
005b71 925f
005b72 926f
005b73 927f
005b74 928f
005b75 929f
005b76 92af
005b77 92bf
005b78 92cf
005b79 92df
005b7a 92ef
005b7b 92ff
005b7c 930f
005b7d 931f
005b7e 93cf
005b7f 93df
005b80 940e 4ac1
005b82 91df
005b83 91cf
005b84 911f
005b85 910f
005b86 90ff
005b87 90ef
005b88 90df
005b89 90cf
005b8a 90bf
005b8b 90af
005b8c 909f
005b8d 908f
005b8e 907f
005b8f 906f
005b90 905f
005b91 904f
005b92 903f
005b93 902f
005b94 2411        safe_called_from_c setup_mpu6050
005b95 9508        ret
                 
                 asm_NumEdit:
                 ; num=r25:r24
                 ; min=r23:r22
                 ; max=r21:r20
                 ; NumEdit expects:
                 ; num=xh:xl
                 ; min=yh:yl
                 ; max=zh:zl
                 ; return in r1:r0
005b96 922f
005b97 923f
005b98 924f
005b99 925f
005b9a 926f
005b9b 927f
005b9c 928f
005b9d 929f
005b9e 92af
005b9f 92bf
005ba0 92cf
005ba1 92df
005ba2 92ef
005ba3 92ff
005ba4 930f
005ba5 931f
005ba6 93cf
005ba7 93df        push_r2_to_r17_r28_r29
005ba8 932f
005ba9 933f
005baa 934f
005bab 935f
005bac 936f
005bad 937f
005bae 938f
005baf 939f
005bb0 93af
005bb1 93bf
005bb2 93ef
005bb3 93ff        push_r18_to_r27_r30_r31
                 
005bb4 2fb9        mov xh, r25
005bb5 2fa8        mov xl, r24
005bb6 2fd7        mov yh, r23
005bb7 2fc6        mov yl, r22
005bb8 2ff5        mov zh, r21
005bb9 2fe4        mov zl, r20
005bba 940e 33a4   call NumberEdit
                   
005bbc 91ff
005bbd 91ef
005bbe 91bf
005bbf 91af
005bc0 919f
005bc1 918f
005bc2 917f
005bc3 916f
005bc4 915f
005bc5 914f
005bc6 913f
005bc7 912f        pop_r18_to_r27_r30_r31
005bc8 91df
005bc9 91cf
005bca 911f
005bcb 910f
005bcc 90ff
005bcd 90ef
005bce 90df
005bcf 90cf
005bd0 90bf
005bd1 90af
005bd2 909f
005bd3 908f
005bd4 907f
005bd5 906f
005bd6 905f
005bd7 904f
005bd8 903f
005bd9 902f        pop_r2_to_r17_r28_r29
                 
005bda 2d91        mov r25, r1
005bdb 2d80        mov r24, r0
005bdc 2411        clr r1
005bdd 9508        ret
                 
                 asm_MixerEditor:
005bde 922f
005bdf 923f
005be0 924f
005be1 925f
005be2 926f
005be3 927f
005be4 928f
005be5 929f
005be6 92af
005be7 92bf
005be8 92cf
005be9 92df
005bea 92ef
005beb 92ff
005bec 930f
005bed 931f
005bee 93cf
005bef 93df
005bf0 940e 3475
005bf2 91df
005bf3 91cf
005bf4 911f
005bf5 910f
005bf6 90ff
005bf7 90ef
005bf8 90df
005bf9 90cf
005bfa 90bf
005bfb 90af
005bfc 909f
005bfd 908f
005bfe 907f
005bff 906f
005c00 905f
005c01 904f
005c02 903f
005c03 902f
005c04 2411        safe_called_from_c MixerEditor
005c05 9508        ret
                 
                 asm_MotorCheck:
005c06 922f
005c07 923f
005c08 924f
005c09 925f
005c0a 926f
005c0b 927f
005c0c 928f
005c0d 929f
005c0e 92af
005c0f 92bf
005c10 92cf
005c11 92df
005c12 92ef
005c13 92ff
005c14 930f
005c15 931f
005c16 93cf
005c17 93df
005c18 940e 1370
005c1a 91df
005c1b 91cf
005c1c 911f
005c1d 910f
005c1e 90ff
005c1f 90ef
005c20 90df
005c21 90cf
005c22 90bf
005c23 90af
005c24 909f
005c25 908f
005c26 907f
005c27 906f
005c28 905f
005c29 904f
005c2a 903f
005c2b 902f
005c2c 2411        safe_called_from_c MotorCheck
005c2d 9508        ret  
                 
                 asm_SerialDebug:
005c2e 922f
005c2f 923f
005c30 924f
005c31 925f
005c32 926f
005c33 927f
005c34 928f
005c35 929f
005c36 92af
005c37 92bf
005c38 92cf
005c39 92df
005c3a 92ef
005c3b 92ff
005c3c 930f
005c3d 931f
005c3e 93cf
005c3f 93df
005c40 940e 0391
005c42 91df
005c43 91cf
005c44 911f
005c45 910f
005c46 90ff
005c47 90ef
005c48 90df
005c49 90cf
005c4a 90bf
005c4b 90af
005c4c 909f
005c4d 908f
005c4e 907f
005c4f 906f
005c50 905f
005c51 904f
005c52 903f
005c53 902f
005c54 2411        safe_called_from_c SerialDebug
005c55 9508        ret
                 
                 asm_EnforceRestart:
005c56 922f
005c57 923f
005c58 924f
005c59 925f
005c5a 926f
005c5b 927f
005c5c 928f
005c5d 929f
005c5e 92af
005c5f 92bf
005c60 92cf
005c61 92df
005c62 92ef
005c63 92ff
005c64 930f
005c65 931f
005c66 93cf
005c67 93df
005c68 940e 2717
005c6a 91df
005c6b 91cf
005c6c 911f
005c6d 910f
005c6e 90ff
005c6f 90ef
005c70 90df
005c71 90cf
005c72 90bf
005c73 90af
005c74 909f
005c75 908f
005c76 907f
005c77 906f
005c78 905f
005c79 904f
005c7a 903f
005c7b 902f
005c7c 2411        safe_called_from_c EnforceRestart
005c7d 9508        ret
                 
                 
                 asm_LoadMixer:
005c7e 922f
005c7f 923f
005c80 924f
005c81 925f
005c82 926f
005c83 927f
005c84 928f
005c85 929f
005c86 92af
005c87 92bf
005c88 92cf
005c89 92df
005c8a 92ef
005c8b 92ff
005c8c 930f
005c8d 931f
005c8e 93cf
005c8f 93df
005c90 940e 21af
005c92 91df
005c93 91cf
005c94 911f
005c95 910f
005c96 90ff
005c97 90ef
005c98 90df
005c99 90cf
005c9a 90bf
005c9b 90af
005c9c 909f
005c9d 908f
005c9e 907f
005c9f 906f
005ca0 905f
005ca1 904f
005ca2 903f
005ca3 902f
005ca4 2411        safe_called_from_c LoadMixer
005ca5 9508        ret
                 
                 asm_CalibrateSensors:
005ca6 922f
005ca7 923f
005ca8 924f
005ca9 925f
005caa 926f
005cab 927f
005cac 928f
005cad 929f
005cae 92af
005caf 92bf
005cb0 92cf
005cb1 92df
005cb2 92ef
005cb3 92ff
005cb4 930f
005cb5 931f
005cb6 93cf
005cb7 93df
005cb8 940e 2731
005cba 91df
005cbb 91cf
005cbc 911f
005cbd 910f
005cbe 90ff
005cbf 90ef
005cc0 90df
005cc1 90cf
005cc2 90bf
005cc3 90af
005cc4 909f
005cc5 908f
005cc6 907f
005cc7 906f
005cc8 905f
005cc9 904f
005cca 903f
005ccb 902f
005ccc 2411        safe_called_from_c CalibrateSensors
005ccd 9508        ret
                 
                 asm_AdjustBatteryVoltage:
005cce 922f
005ccf 923f
005cd0 924f
005cd1 925f
005cd2 926f
005cd3 927f
005cd4 928f
005cd5 929f
005cd6 92af
005cd7 92bf
005cd8 92cf
005cd9 92df
005cda 92ef
005cdb 92ff
005cdc 930f
005cdd 931f
005cde 93cf
005cdf 93df
005ce0 940e 004b
005ce2 91df
005ce3 91cf
005ce4 911f
005ce5 910f
005ce6 90ff
005ce7 90ef
005ce8 90df
005ce9 90cf
005cea 90bf
005ceb 90af
005cec 909f
005ced 908f
005cee 907f
005cef 906f
005cf0 905f
005cf1 904f
005cf2 903f
005cf3 902f
005cf4 2411        safe_called_from_c AdjustBatteryVoltage
005cf5 9508        ret
                 
                 asm_SelectRxMode:
005cf6 922f
005cf7 923f
005cf8 924f
005cf9 925f
005cfa 926f
005cfb 927f
005cfc 928f
005cfd 929f
005cfe 92af
005cff 92bf
005d00 92cf
005d01 92df
005d02 92ef
005d03 92ff
005d04 930f
005d05 931f
005d06 93cf
005d07 93df
005d08 940e 5a72
005d0a 91df
005d0b 91cf
005d0c 911f
005d0d 910f
005d0e 90ff
005d0f 90ef
005d10 90df
005d11 90cf
005d12 90bf
005d13 90af
005d14 909f
005d15 908f
005d16 907f
005d17 906f
005d18 905f
005d19 904f
005d1a 903f
005d1b 902f
005d1c 2411        safe_called_from_c SelectRxMode
005d1d 9508        ret
                 
                 
                 _menu_opts:
005d1e ba4e        .dw m0*2
005d1f ba54        .dw m1*2
005d20 ba5a        .dw m2*2
005d21 ba60        .dw m3*2
005d22 ba66        .dw m4*2
005d23 ba6c        .dw m5*2
005d24 ba72        .dw m6*2
005d25 ba78        .dw m7*2
005d26 ba7e        .dw m8*2
                 
                 
005d27 6261
005d28 3063
Source/callwrappers.asm(254): warning: .cseg .db misalignment - padding zero byte
Source/kk2++.asm(156): 'Source/callwrappers.asm' included form here
005d29 0000      m0: .db "abc0", 0
005d2a 6261
005d2b 3163
Source/callwrappers.asm(255): warning: .cseg .db misalignment - padding zero byte
Source/kk2++.asm(156): 'Source/callwrappers.asm' included form here
005d2c 0000      m1: .db "abc1", 0
005d2d 6261
005d2e 3263
Source/callwrappers.asm(256): warning: .cseg .db misalignment - padding zero byte
Source/kk2++.asm(156): 'Source/callwrappers.asm' included form here
005d2f 0000      m2: .db "abc2", 0
005d30 6261
005d31 3363
Source/callwrappers.asm(257): warning: .cseg .db misalignment - padding zero byte
Source/kk2++.asm(156): 'Source/callwrappers.asm' included form here
005d32 0000      m3: .db "abc3", 0
005d33 6261
005d34 3463
Source/callwrappers.asm(258): warning: .cseg .db misalignment - padding zero byte
Source/kk2++.asm(156): 'Source/callwrappers.asm' included form here
005d35 0000      m4: .db "abc4", 0
005d36 6261
005d37 3563
Source/callwrappers.asm(259): warning: .cseg .db misalignment - padding zero byte
Source/kk2++.asm(156): 'Source/callwrappers.asm' included form here
005d38 0000      m5: .db "abc5", 0
005d39 6261
005d3a 3663
Source/callwrappers.asm(260): warning: .cseg .db misalignment - padding zero byte
Source/kk2++.asm(156): 'Source/callwrappers.asm' included form here
005d3b 0000      m6: .db "abc6", 0
005d3c 6261
005d3d 3763
Source/callwrappers.asm(261): warning: .cseg .db misalignment - padding zero byte
Source/kk2++.asm(156): 'Source/callwrappers.asm' included form here
005d3e 0000      m7: .db "abc7", 0
005d3f 6261
005d40 3863
Source/callwrappers.asm(262): warning: .cseg .db misalignment - padding zero byte
Source/kk2++.asm(156): 'Source/callwrappers.asm' included form here
005d41 0000      m8: .db "abc8", 0
                 
                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega644P register use summary:
r0 : 185 r1 : 146 r2 : 121 r3 : 110 r4 :  99 r5 :  99 r6 :  99 r7 :  99 
r8 :  73 r9 :  62 r10:  59 r11:  56 r12:  56 r13:  56 r14:  91 r15:  79 
r16:3833 r17: 235 r18: 233 r19: 494 r20: 471 r21: 441 r22: 455 r23: 420 
r24: 410 r25: 193 r26: 718 r27: 498 r28: 276 r29: 354 r30: 581 r31: 570 
x  :  31 y  :  17 z  : 106 
Registers used: 35 out of 35 (100.0%)

ATmega644P instruction use summary:
.lds  :   0 .sts  :   0 adc   : 228 add   : 147 adiw  :  25 and   :   8 
andi  :  85 asr   :   9 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :  62 brcs  :  14 break :   0 breq  : 140 brge  :  37 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :  11 brlt  :  56 brmi  :  40 
brne  : 214 brpl  :  88 brsh  :   2 brtc  :   0 brts  :   3 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  : 996 cbi   :  50 cbr   :   8 
clc   :  19 clh   :   0 cli   :  10 cln   :   0 clr   : 280 cls   :   0 
clt   :   2 clv   :   0 clz   :   0 com   :  52 cp    :  93 cpc   : 100 
cpi   : 215 cpse  :   0 dec   :  68 eor   :  11 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   4 ijmp  :   0 in    :  23 inc   :  80 jmp   :  52 
ld    :  30 ldd   :   6 ldi   :1738 lds   :2299 lpm   :  34 lsl   :  25 
lsr   :  44 mov   : 137 movw  :  22 mul   :  57 muls  :   0 mulsu :   0 
neg   :   5 nop   :  24 or    :   9 ori   :  21 out   :  63 pop   : 931 
push  : 922 rcall : 317 ret   : 346 reti  :  15 rjmp  : 243 rol   :  18 
ror   :  48 sbc   : 118 sbci  :   7 sbi   :  48 sbic  :   3 sbis  :   5 
sbiw  :   5 sbr   :   0 sbrc  :   4 sbrs  :   1 sec   :  19 seh   :   0 
sei   :  14 sen   :   0 ser   :  75 ses   :   0 set   :   2 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :  22 std   :   0 sts   :2411 
sub   :  72 subi  :  14 swap  :  13 tst   : 166 wdr   :   0 
Instructions used: 75 out of 113 (66.4%)

ATmega644P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00ba84  38668   9080  47748   65536  72.9%
[.dseg] 0x000100 0x000100      0      0      0    4096   0.0%
[.eseg] 0x000000 0x000000      0      0      0    2048   0.0%

Assembly complete, 0 errors, 9 warnings
